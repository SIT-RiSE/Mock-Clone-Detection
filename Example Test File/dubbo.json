[
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\AbstractObservationFilterTest.java",
      "className": "AbstractObservationFilterTest"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = mock(Invoker.class);",
        "line": 40,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation.addInvokedInvoker(invoker);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setupConfig",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setupConfig",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
      "className": "MetricsClusterFilterTest"
    },
    "statements": [
      {
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testClusterFilterError",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
      "className": "MetricsClusterFilterTest"
    },
    "statements": [
      {
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testClusterFilterError",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 52,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url1);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(balance.getWeight(invoker1, invocation), balance.getWeight(invoker2, invocation));",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url2);",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(balance.getWeight(invoker1, invocation), balance.getWeight(invoker2, invocation));",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 70,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url1);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(100, balance.getWeight(invoker1, invocation));",
        "line": 84,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker invoker2 = mock(ClusterInvoker.class, Mockito.withSettings().stubOnly());",
        "line": 74,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url2);",
        "line": 81,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getRegistryUrl()).willReturn(registryUrl2);",
        "line": 82,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getRegistryUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(30, balance.getWeight(invoker2, invocation));",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetRegistryWeight",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invocation invocation;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation = mock(Invocation.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"method1\");",
        "line": 79,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\", \"arg2\", \"arg3\" });",
        "line": 80,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "genericInvocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invocation genericInvocation;",
        "line": 51,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "genericInvocation = mock(Invocation.class);",
        "line": 82,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(genericInvocation.getMethodName()).willReturn(\"$invoke\");",
        "line": 84,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(genericInvocation.getArguments()).willReturn(args);",
        "line": 88,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker1;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = mock(Invoker.class);",
        "line": 90,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 102,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 103,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url1);",
        "line": 104,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 122,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker2;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = mock(Invoker.class);",
        "line": 91,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 106,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 107,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url2);",
        "line": 108,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 123,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker3;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = mock(Invoker.class);",
        "line": 92,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(true);",
        "line": 110,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 111,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url3);",
        "line": 112,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 124,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker4;",
        "line": 56,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = mock(Invoker.class);",
        "line": 93,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.isAvailable()).willReturn(true);",
        "line": 114,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getUrl()).willReturn(url4);",
        "line": 116,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 125,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker5;",
        "line": 57,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = mock(Invoker.class);",
        "line": 94,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.isAvailable()).willReturn(true);",
        "line": 118,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 119,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getUrl()).willReturn(url5);",
        "line": 120,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker5);",
        "line": 126,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker1",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker1;",
        "line": 234,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 242,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.isAvailable()).willReturn(true);",
        "line": 257,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 258,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.getUrl()).willReturn(url1);",
        "line": 259,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker1);",
        "line": 277,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker1);",
        "line": 281,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker2",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker2;",
        "line": 235,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 243,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.isAvailable()).willReturn(true);",
        "line": 261,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 262,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.getUrl()).willReturn(url2);",
        "line": 263,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker2);",
        "line": 278,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker2);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker3",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker3;",
        "line": 236,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker3 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 244,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.isAvailable()).willReturn(true);",
        "line": 265,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 266,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.getUrl()).willReturn(url3);",
        "line": 267,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker3);",
        "line": 279,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// weightTestRpcStatus3 active is 1\r\nRpcStatus.beginCount(weightInvoker3.getUrl(), weightTestInvocation.getMethodName());",
        "line": 291,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvokerTmp",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvokerTmp;",
        "line": 237,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvokerTmp = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 245,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.isAvailable()).willReturn(true);",
        "line": 269,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 270,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.getUrl()).willReturn(urlTmp);",
        "line": 271,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker5",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker5;",
        "line": 238,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker5 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 246,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.isAvailable()).willReturn(true);",
        "line": 273,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 274,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.getUrl()).willReturn(url5);",
        "line": 275,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker5);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// weightTestRpcStatus5 shortest response time of success calls is bigger than 0\r\n// weightTestRpcStatus5 active is 1\r\nRpcStatus.beginCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName());",
        "line": 295,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "RpcStatus.endCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName(), 5000L, true);",
        "line": 296,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "RpcStatus.beginCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName());",
        "line": 297,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invocation invocation;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation = mock(Invocation.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"method1\");",
        "line": 79,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\", \"arg2\", \"arg3\" });",
        "line": 80,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "genericInvocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invocation genericInvocation;",
        "line": 51,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "genericInvocation = mock(Invocation.class);",
        "line": 82,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(genericInvocation.getMethodName()).willReturn(\"$invoke\");",
        "line": 84,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(genericInvocation.getArguments()).willReturn(args);",
        "line": 88,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker1;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = mock(Invoker.class);",
        "line": 90,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 102,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 103,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url1);",
        "line": 104,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 122,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker2;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = mock(Invoker.class);",
        "line": 91,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 106,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 107,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url2);",
        "line": 108,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 123,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker3;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = mock(Invoker.class);",
        "line": 92,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(true);",
        "line": 110,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 111,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url3);",
        "line": 112,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 124,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker4;",
        "line": 56,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = mock(Invoker.class);",
        "line": 93,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.isAvailable()).willReturn(true);",
        "line": 114,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getUrl()).willReturn(url4);",
        "line": 116,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 125,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "Invoker<LoadBalanceBaseTest> invoker5;",
        "line": 57,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = mock(Invoker.class);",
        "line": 94,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.isAvailable()).willReturn(true);",
        "line": 118,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 119,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getUrl()).willReturn(url5);",
        "line": 120,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker5);",
        "line": 126,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker1",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker1;",
        "line": 234,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 242,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.isAvailable()).willReturn(true);",
        "line": 257,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 258,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker1.getUrl()).willReturn(url1);",
        "line": 259,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker1);",
        "line": 277,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker1);",
        "line": 281,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker2",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker2;",
        "line": 235,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 243,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.isAvailable()).willReturn(true);",
        "line": 261,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 262,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker2.getUrl()).willReturn(url2);",
        "line": 263,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker2);",
        "line": 278,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker2);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker3",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker3;",
        "line": 236,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker3 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 244,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.isAvailable()).willReturn(true);",
        "line": 265,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 266,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker3.getUrl()).willReturn(url3);",
        "line": 267,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokers.add(weightInvoker3);",
        "line": 279,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// weightTestRpcStatus3 active is 1\r\nRpcStatus.beginCount(weightInvoker3.getUrl(), weightTestInvocation.getMethodName());",
        "line": 291,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvokerTmp",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvokerTmp;",
        "line": 237,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvokerTmp = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 245,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.isAvailable()).willReturn(true);",
        "line": 269,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 270,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvokerTmp.getUrl()).willReturn(urlTmp);",
        "line": 271,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "weightInvoker5",
    "variableType": "Invoker<LoadBalanceBaseTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.loadbalance",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\LoadBalanceBaseTest.java",
      "className": "LoadBalanceBaseTest"
    },
    "statements": [
      {
        "code": "protected Invoker<LoadBalanceBaseTest> weightInvoker5;",
        "line": 238,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "weightInvoker5 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
        "line": 246,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.isAvailable()).willReturn(true);",
        "line": 273,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.getInterface()).willReturn(LoadBalanceBaseTest.class);",
        "line": 274,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(weightInvoker5.getUrl()).willReturn(url5);",
        "line": 275,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.loadbalance.LoadBalanceBaseTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "weightInvokersSR.add(weightInvoker5);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// weightTestRpcStatus5 shortest response time of success calls is bigger than 0\r\n// weightTestRpcStatus5 active is 1\r\nRpcStatus.beginCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName());",
        "line": 295,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "RpcStatus.endCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName(), 5000L, true);",
        "line": 296,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "RpcStatus.beginCount(weightInvoker5.getUrl(), weightTestInvocation.getMethodName());",
        "line": 297,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "router",
    "variableType": "ProviderAppStateRouter<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\condition\\config\\ProviderAppConditionStateRouterTest.java"
    },
    "statements": [
      {
        "code": "ProviderAppStateRouter<String> router = new ProviderAppStateRouter<>(url);",
        "line": 62,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router = Mockito.spy(router);",
        "line": 63,
        "type": "ASSIGNMENT_SPY",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getRuleRepository()).thenReturn(ruleRepository);",
        "line": 64,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.condition.config.ProviderAppStateRouter<java.lang.String>.getRuleRepository()).thenReturn(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router.notify(invokers);",
        "line": 70,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ruleRepository",
    "variableType": "GovernanceRuleRepository",
    "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.condition.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\condition\\config\\ProviderAppConditionStateRouterTest.java",
      "className": "ProviderAppConditionStateRouterTest"
    },
    "statements": [
      {
        "code": "private static GovernanceRuleRepository ruleRepository;",
        "line": 42,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
        "line": 57,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUpBeforeClass",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getRuleRepository()).thenReturn(ruleRepository);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(ruleRepository.getRule(\"demo-provider\" + RULE_SUFFIX, DynamicConfiguration.DEFAULT_GROUP)).thenReturn(rawRule);",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository.getRule(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FileRouterEngineTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.file",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\file\\FileRouterEngineTest.java",
      "className": "FileRouterEngineTest"
    },
    "statements": [
      {
        "code": "Invoker<FileRouterEngineTest> invoker1 = mock(Invoker.class);",
        "line": 56,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 163,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(invoker1Status);",
        "line": 164,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 165,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FileRouterEngineTest.class);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FileRouterEngineTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.file",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\file\\FileRouterEngineTest.java",
      "className": "FileRouterEngineTest"
    },
    "statements": [
      {
        "code": "Invoker<FileRouterEngineTest> invoker2 = mock(Invoker.class);",
        "line": 57,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 73,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 168,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(invoker2Status);",
        "line": 169,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 170,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FileRouterEngineTest.class);",
        "line": 171,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FileRouterEngineTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.file",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\file\\FileRouterEngineTest.java",
      "className": "FileRouterEngineTest"
    },
    "statements": [
      {
        "code": "Invoker<FileRouterEngineTest> invoker1 = mock(Invoker.class);",
        "line": 56,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 163,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(invoker1Status);",
        "line": 164,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 165,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FileRouterEngineTest.class);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FileRouterEngineTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.file",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\file\\FileRouterEngineTest.java",
      "className": "FileRouterEngineTest"
    },
    "statements": [
      {
        "code": "Invoker<FileRouterEngineTest> invoker2 = mock(Invoker.class);",
        "line": 57,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 73,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 168,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(invoker2Status);",
        "line": 169,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 170,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FileRouterEngineTest.class);",
        "line": 171,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.router.file.FileRouterEngineTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "initInvokers",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 115,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testStandard",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
        "line": 116,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testStandard",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 123,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testStandard",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
        "line": 134,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testStandard",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter1",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 141,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter1);",
        "line": 144,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter1, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 166,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter2",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 142,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter2);",
        "line": 154,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter2, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 176,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "register",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter1",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 189,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter1);",
        "line": 192,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.unregister(standardMeshRuleRouter1);",
        "line": 211,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter2",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 190,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter2);",
        "line": 202,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.unregister(standardMeshRuleRouter2);",
        "line": 220,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "unregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 229,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "process",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "process",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 243,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "process",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 259,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "process",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
        "line": 273,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "process",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 280,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnknownRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 288,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 297,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
        "line": 304,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "standardMeshRuleRouter",
    "variableType": "StandardMeshRuleRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
        "line": 368,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultipleRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
        "line": 370,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultipleRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
        "line": 380,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultipleRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleCacheTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 47,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleCacheTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 53,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key1\")).thenReturn(\"value1\");",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOriginalServiceParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key2\")).thenReturn(\"value2\");",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOriginalServiceParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key3\")).thenReturn(\"value3\");",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOriginalServiceParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getOriginalServiceParameter(\"test\", \"key4\")).thenReturn(\"value4\");",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOriginalServiceParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertTrue(MeshRuleCache.isLabelMatch(url, \"test\", inputMap));",
        "line": 70,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertTrue(MeshRuleCache.isLabelMatch(url, \"test\", inputMap));",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "containMapKeyValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "envListenerFactoryLoader",
    "variableType": "ExtensionLoader<MeshEnvListenerFactory>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<MeshEnvListenerFactory> envListenerFactoryLoader = Mockito.mock(ExtensionLoader.class);",
        "line": 79,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(envListenerFactoryLoader.getSupportedExtensionInstances()).thenReturn(envListenerFactories);",
        "line": 81,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory>.getSupportedExtensionInstances()).thenReturn(java.util.Set<org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(MeshEnvListenerFactory.class)).thenReturn(envListenerFactoryLoader);",
        "line": 82,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "meshEnvListenerFactory1",
    "variableType": "MeshEnvListenerFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java"
    },
    "statements": [
      {
        "code": "MeshEnvListenerFactory meshEnvListenerFactory1 = Mockito.mock(MeshEnvListenerFactory.class);",
        "line": 199,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);",
        "line": 203,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "envListenerFactories.add(meshEnvListenerFactory1);",
        "line": 207,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "meshEnvListenerFactory2",
    "variableType": "MeshEnvListenerFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java"
    },
    "statements": [
      {
        "code": "MeshEnvListenerFactory meshEnvListenerFactory2 = Mockito.mock(MeshEnvListenerFactory.class);",
        "line": 200,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);",
        "line": 205,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "envListenerFactories.add(meshEnvListenerFactory2);",
        "line": 208,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "meshEnvListener1",
    "variableType": "MeshEnvListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java"
    },
    "statements": [
      {
        "code": "MeshEnvListener meshEnvListener1 = Mockito.mock(MeshEnvListener.class);",
        "line": 202,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListener1.isEnable()).thenReturn(false);",
        "line": 227,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "meshEnvListener2",
    "variableType": "MeshEnvListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java"
    },
    "statements": [
      {
        "code": "MeshEnvListener meshEnvListener2 = Mockito.mock(MeshEnvListener.class);",
        "line": 204,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);",
        "line": 205,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(meshEnvListener2.isEnable()).thenReturn(true);",
        "line": 228,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(meshEnvListener2, times(1)).onSubscribe(\"dubbo-demo\", meshAppRuleListener);",
        "line": 238,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(meshEnvListener2, times(1)).onUnSubscribe(\"dubbo-demo\");",
        "line": 271,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
      "className": "MeshRuleManagerTest"
    },
    "statements": [
      {
        "code": "private ModuleModel moduleModel;",
        "line": 67,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "moduleModel = Mockito.spy(originModule);",
        "line": 74,
        "type": "ASSIGNMENT_SPY",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);",
        "line": 77,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getDefaultExtension(java.lang.Class<org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository>)).thenReturn(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(MeshEnvListenerFactory.class)).thenReturn(envListenerFactoryLoader);",
        "line": 82,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ruleRepository",
    "variableType": "GovernanceRuleRepository",
    "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
      "className": "MeshRuleManagerTest"
    },
    "statements": [
      {
        "code": "private GovernanceRuleRepository ruleRepository;",
        "line": 68,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 112,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 116,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 148,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(ruleRepository.getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L)).thenReturn(rule1 + \"---\\n\" + rule2);",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository.getRule(java.lang.String, java.lang.String, long)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 181,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshRuleManager.getAppRuleListeners().values().iterator().next());",
        "line": 182,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
        "line": 233,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 236,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
        "line": 270,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegister3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "beanFactory",
    "variableType": "ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java"
    },
    "statements": [
      {
        "code": "ScopeBeanFactory beanFactory = Mockito.spy(originBeanFactory);",
        "line": 173,
        "type": "METHOD_SPY_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 174,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBean(MeshRuleManager.class)).thenReturn(meshRuleManager);",
        "line": 177,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBean(java.lang.Class<org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager>)).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoader",
    "variableType": "ExtensionLoader<TracingContextProvider>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<TracingContextProvider> extensionLoader = Mockito.mock(ExtensionLoader.class);",
        "line": 179,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(extensionLoader.getSupportedExtensionInstances()).thenReturn(tracingContextProviders);",
        "line": 181,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>.getSupportedExtensionInstances()).thenReturn(java.util.Set<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(TracingContextProvider.class)).thenReturn(extensionLoader);",
        "line": 182,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 195,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 196,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 203,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 204,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java",
      "className": "MeshRuleRouterTest"
    },
    "statements": [
      {
        "code": "private ModuleModel moduleModel;",
        "line": 162,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "moduleModel = Mockito.spy(originModel);",
        "line": 170,
        "type": "ASSIGNMENT_SPY",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 174,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(TracingContextProvider.class)).thenReturn(extensionLoader);",
        "line": 182,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "meshRuleManager",
    "variableType": "MeshRuleManager",
    "mockedClass": "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleRouterTest.java",
      "className": "MeshRuleRouterTest"
    },
    "statements": [
      {
        "code": "private MeshRuleManager meshRuleManager;",
        "line": 163,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "meshRuleManager = Mockito.mock(MeshRuleManager.class);",
        "line": 176,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBean(MeshRuleManager.class)).thenReturn(meshRuleManager);",
        "line": 177,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(meshRuleManager, times(1)).register(\"app1\", meshRuleRouter);",
        "line": 223,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(meshRuleManager, times(1)).register(\"app2\", meshRuleRouter);",
        "line": 227,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(meshRuleManager, times(1)).unregister(\"app1\", meshRuleRouter);",
        "line": 228,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(meshRuleManager, times(1)).unregister(\"app2\", meshRuleRouter);",
        "line": 232,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java"
    },
    "statements": [
      {
        "code": "// Data preparation\r\nInvoker<DemoService> invoker1 = Mockito.mock(Invoker.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker1.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(invokers.contains(invoker1));",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker2 = Mockito.mock(Invoker.class);",
        "line": 42,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker2.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(invokers.contains(invoker2));",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker3 = Mockito.mock(Invoker.class);",
        "line": 43,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker3.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1/test\"));",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(invokers.contains(invoker3));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "rpcInvocation",
    "variableType": "RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java"
    },
    "statements": [
      {
        "code": "RpcInvocation rpcInvocation = Mockito.mock(RpcInvocation.class);",
        "line": 49,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// rpcInvocation have an attached \"invocation.need.mock\" parameter, so it will filter out the invoker whose\r\n// protocol is mock\r\nMockito.when(rpcInvocation.getObjectAttachmentWithoutConvert(INVOCATION_NEED_MOCK)).thenReturn(\"true\");",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getObjectAttachmentWithoutConvert(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\RouterSnapshotFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).invoke(invocation);",
        "line": 51,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 75,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\RouterSnapshotFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "routerSnapshotFilter.invoke(invoker, invocation);",
        "line": 75,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceModel",
    "variableType": "ServiceModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\RouterSnapshotFilterTest.java"
    },
    "statements": [
      {
        "code": "ServiceModel serviceModel = Mockito.mock(ServiceModel.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceModel.getServiceKey()).thenReturn(\"TestKey\");",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ServiceModel.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "router",
    "variableType": "AppScriptStateRouter<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\script\\config\\AppScriptStateRouterTest.java"
    },
    "statements": [
      {
        "code": "AppScriptStateRouter<String> router = new AppScriptStateRouter<>(url);",
        "line": 69,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router = Mockito.spy(router);",
        "line": 70,
        "type": "ASSIGNMENT_SPY",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getRuleRepository()).thenReturn(ruleRepository);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.script.config.AppScriptStateRouter<java.lang.String>.getRuleRepository()).thenReturn(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router.notify(invokers);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ruleRepository",
    "variableType": "GovernanceRuleRepository",
    "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.script.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\script\\config\\AppScriptStateRouterTest.java",
      "className": "AppScriptStateRouterTest"
    },
    "statements": [
      {
        "code": "private static GovernanceRuleRepository ruleRepository;",
        "line": 45,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
        "line": 64,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUpBeforeClass",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getRuleRepository()).thenReturn(ruleRepository);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(ruleRepository.getRule(\"demo-provider\" + RULE_SUFFIX, DynamicConfiguration.DEFAULT_GROUP)).thenReturn(rawRule);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository.getRule(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConfigScriptRoute",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "beanFactory",
    "variableType": "ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java"
    },
    "statements": [
      {
        "code": "ScopeBeanFactory beanFactory = Mockito.spy(originBeanFactory);",
        "line": 59,
        "type": "METHOD_SPY_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoader",
    "variableType": "ExtensionLoader<TracingContextProvider>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<TracingContextProvider> extensionLoader = Mockito.mock(ExtensionLoader.class);",
        "line": 62,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(extensionLoader.getSupportedExtensionInstances()).thenReturn(tracingContextProviders);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>.getSupportedExtensionInstances()).thenReturn(java.util.Set<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(TracingContextProvider.class)).thenReturn(extensionLoader);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "router",
    "variableType": "TagStateRouter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java"
    },
    "statements": [
      {
        "code": "TagStateRouter router = (TagStateRouter) new TagStateRouterFactory().getRouter(TagRouterRule.class, url);",
        "line": 98,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTagRouteWithDynamicRuleV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router = Mockito.spy(router);",
        "line": 99,
        "type": "ASSIGNMENT_SPY",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTagRouteWithDynamicRuleV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getInvokers()).thenReturn(invokers);",
        "line": 120,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.tag.TagStateRouter.getInvokers()).thenReturn(org.apache.dubbo.rpc.cluster.router.state.BitList<org.apache.dubbo.rpc.Invoker<java.lang.String>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTagRouteWithDynamicRuleV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "rule.init(router);",
        "line": 121,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTagRouteWithDynamicRuleV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "router.setTagRouterRule(rule);",
        "line": 122,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTagRouteWithDynamicRuleV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "router",
    "variableType": "TagStateRouter<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java"
    },
    "statements": [
      {
        "code": "TagStateRouter<?> router = Mockito.mock(TagStateRouter.class);",
        "line": 156,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tagRouterRuleParseTest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getInvokers()).thenReturn(BitList.emptyList());",
        "line": 157,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.tag.TagStateRouter<?>.getInvokers()).thenReturn(org.apache.dubbo.rpc.cluster.router.state.BitList<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tagRouterRuleParseTest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "tagRouterRule.init(router);",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tagRouterRuleParseTest",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "router",
    "variableType": "TagStateRouter<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java"
    },
    "statements": [
      {
        "code": "TagStateRouter<String> router = Mockito.mock(TagStateRouter.class);",
        "line": 216,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tagRouterRuleParseTestV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(router.getInvokers()).thenReturn(getInvokers());",
        "line": 217,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.tag.TagStateRouter<java.lang.String>.getInvokers()).thenReturn(org.apache.dubbo.rpc.cluster.router.state.BitList<org.apache.dubbo.rpc.Invoker<java.lang.String>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tagRouterRuleParseTestV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "tagRouterRule.init(router);",
        "line": 218,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tagRouterRuleParseTestV3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.router.tag",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\tag\\TagStateRouterTest.java",
      "className": "TagStateRouterTest"
    },
    "statements": [
      {
        "code": "private ModuleModel moduleModel;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "moduleModel = Mockito.spy(originModel);",
        "line": 56,
        "type": "ASSIGNMENT_SPY",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(moduleModel.getExtensionLoader(TracingContextProvider.class)).thenReturn(extensionLoader);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.rpc.cluster.router.mesh.util.TracingContextProvider>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\RouterChainTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = Mockito.mock(Invoker.class);",
        "line": 202,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 203,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\RouterChainTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = Mockito.mock(Invoker.class);",
        "line": 212,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createNormalInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 213,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createNormalInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
        "line": 44,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(StickyTest.class);",
        "line": 116,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 119,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
        "line": 120,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(StickyTest.class);",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Directory<StickyTest> dic;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(StickyTest.class);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
        "line": 44,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(StickyTest.class);",
        "line": 116,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 119,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
        "line": 120,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(StickyTest.class);",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSticky",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<StickyTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
      "className": "StickyTest"
    },
    "statements": [
      {
        "code": "private Directory<StickyTest> dic;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(StickyTest.class);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "lb",
    "variableType": "LoadBalance",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java"
    },
    "statements": [
      {
        "code": "LoadBalance lb = mock(LoadBalance.class);",
        "line": 276,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(lb.select(same(invokers), eq(tmpUrl), same(invocation))).thenReturn(invoker1);",
        "line": 280,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.LoadBalance.select(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>>, org.apache.dubbo.common.URL, org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker1;",
        "line": 88,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = mock(Invoker.class);",
        "line": 120,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 129,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(IHelloService.class);",
        "line": 130,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(turl.setPort(1).addParameter(\"name\", \"invoker1\"));",
        "line": 131,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 153,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(Collections.singletonList(invoker1), invocation.getInvokedInvokers());",
        "line": 233,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectedInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 239,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker1, invoker);",
        "line": 243,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(lb.select(same(invokers), eq(tmpUrl), same(invocation))).thenReturn(invoker1);",
        "line": 280,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker1, sinvoker);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 516,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker2;",
        "line": 89,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = mock(Invoker.class);",
        "line": 121,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 133,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(IHelloService.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(turl.setPort(2).addParameter(\"name\", \"invoker2\"));",
        "line": 135,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 249,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize2AndselectNotNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());",
        "line": 508,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectBalance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 517,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker3;",
        "line": 90,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = mock(Invoker.class);",
        "line": 122,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(false);",
        "line": 137,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(IHelloService.class);",
        "line": 138,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(turl.setPort(3).addParameter(\"name\", \"invoker3\"));",
        "line": 139,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 518,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker4;",
        "line": 91,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = mock(Invoker.class);",
        "line": 123,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.isAvailable()).willReturn(true);",
        "line": 141,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getInterface()).willReturn(IHelloService.class);",
        "line": 142,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getUrl()).willReturn(turl.setPort(4).addParameter(\"name\", \"invoker4\"));",
        "line": 143,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 250,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize2AndselectNotNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());",
        "line": 508,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectBalance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 519,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker5;",
        "line": 92,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = mock(Invoker.class);",
        "line": 124,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.isAvailable()).willReturn(false);",
        "line": 145,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getInterface()).willReturn(IHelloService.class);",
        "line": 146,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getUrl()).willReturn(turl.setPort(5).addParameter(\"name\", \"invoker5\"));",
        "line": 147,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker5);",
        "line": 520,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mockedInvoker1",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> mockedInvoker1;",
        "line": 93,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockedInvoker1 = mock(Invoker.class);",
        "line": 125,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.isAvailable()).willReturn(false);",
        "line": 149,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.getInterface()).willReturn(IHelloService.class);",
        "line": 150,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.getUrl()).willReturn(turl.setPort(999).setProtocol(\"mock\"));",
        "line": 151,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(mockedInvoker1);",
        "line": 589,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMockedInvokerSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker1;",
        "line": 88,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = mock(Invoker.class);",
        "line": 120,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 129,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(IHelloService.class);",
        "line": 130,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(turl.setPort(1).addParameter(\"name\", \"invoker1\"));",
        "line": 131,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 153,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(Collections.singletonList(invoker1), invocation.getInvokedInvokers());",
        "line": 233,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectedInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 239,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker1, invoker);",
        "line": 243,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(lb.select(same(invokers), eq(tmpUrl), same(invocation))).thenReturn(invoker1);",
        "line": 280,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker1, sinvoker);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCloseAvailablecheck",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 516,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker2;",
        "line": 89,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = mock(Invoker.class);",
        "line": 121,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 133,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(IHelloService.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(turl.setPort(2).addParameter(\"name\", \"invoker2\"));",
        "line": 135,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 249,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize2AndselectNotNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());",
        "line": 508,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectBalance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 517,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker3;",
        "line": 90,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = mock(Invoker.class);",
        "line": 122,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(false);",
        "line": 137,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(IHelloService.class);",
        "line": 138,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(turl.setPort(3).addParameter(\"name\", \"invoker3\"));",
        "line": 139,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 518,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker4;",
        "line": 91,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = mock(Invoker.class);",
        "line": 123,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.isAvailable()).willReturn(true);",
        "line": 141,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getInterface()).willReturn(IHelloService.class);",
        "line": 142,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker4.getUrl()).willReturn(turl.setPort(4).addParameter(\"name\", \"invoker4\"));",
        "line": 143,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 250,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelect_Invokersize2AndselectNotNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(runs, counter.get(invoker2).get() + counter.get(invoker4).get());",
        "line": 508,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSelectBalance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker4);",
        "line": 519,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> invoker5;",
        "line": 92,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = mock(Invoker.class);",
        "line": 124,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.isAvailable()).willReturn(false);",
        "line": 145,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getInterface()).willReturn(IHelloService.class);",
        "line": 146,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker5.getUrl()).willReturn(turl.setPort(5).addParameter(\"name\", \"invoker5\"));",
        "line": 147,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(invoker5);",
        "line": 520,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "initlistsize5",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mockedInvoker1",
    "variableType": "Invoker<IHelloService>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AbstractClusterInvokerTest.java",
      "className": "AbstractClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<IHelloService> mockedInvoker1;",
        "line": 93,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockedInvoker1 = mock(Invoker.class);",
        "line": 125,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.isAvailable()).willReturn(false);",
        "line": 149,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.getInterface()).willReturn(IHelloService.class);",
        "line": 150,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockedInvoker1.getUrl()).willReturn(turl.setPort(999).setProtocol(\"mock\"));",
        "line": 151,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AbstractClusterInvokerTest.IHelloService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokers.add(mockedInvoker1);",
        "line": 589,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMockedInvokerSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<AvailableClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AvailableClusterInvokerTest.java",
      "className": "AvailableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<AvailableClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(AvailableClusterInvokerTest.class);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<AvailableClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AvailableClusterInvokerTest.java",
      "className": "AvailableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<AvailableClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 46,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(AvailableClusterInvokerTest.class);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<AvailableClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AvailableClusterInvokerTest.java",
      "className": "AvailableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<AvailableClusterInvokerTest> invoker3 = mock(Invoker.class);",
        "line": 47,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.invoke(invocation)).willReturn(result);",
        "line": 82,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url);",
        "line": 83,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(true);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(AvailableClusterInvokerTest.class);",
        "line": 85,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<AvailableClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\AvailableClusterInvokerTest.java",
      "className": "AvailableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<AvailableClusterInvokerTest> dic;",
        "line": 51,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 58,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 59,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(AvailableClusterInvokerTest.class);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.AvailableClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// remove invokers for test exception\r\ndic.list(invocation).removeAll(invokers);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<DemoService>",
    "mockedClass": "Directory<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
      "className": "BroadCastClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<DemoService> dic;",
        "line": 44,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(DemoService.class);",
        "line": 66,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNormal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testEx",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailPercent",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailPercent",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<DemoService>",
    "mockedClass": "Directory<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
      "className": "BroadCastClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<DemoService> dic;",
        "line": 44,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(DemoService.class);",
        "line": 66,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNormal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testEx",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailPercent",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailPercent",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker1;",
        "line": 52,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = Mockito.mock(Invoker.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker1);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 109,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 149,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 160,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 197,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 203,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 210,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 212,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 261,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 265,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker2;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = Mockito.mock(Invoker.class);",
        "line": 77,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker2);",
        "line": 93,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 167,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 198,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, clusterInvoker.select(loadBalance, invocation, directory.list(invocation), Collections.singletonList(invoker2)));",
        "line": 204,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 237,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 266,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker3;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = Mockito.mock(Invoker.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker3);",
        "line": 94,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker3);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 183,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 238,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 267,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 284,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker4;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = Mockito.mock(Invoker.class);",
        "line": 79,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker4);",
        "line": 95,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker4);",
        "line": 112,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 184,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 239,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 268,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker5;",
        "line": 56,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = Mockito.mock(Invoker.class);",
        "line": 80,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker5);",
        "line": 96,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker5);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.remove(invoker5);",
        "line": 173,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 240,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(true);",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker5);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker6",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker6;",
        "line": 57,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker6 = Mockito.mock(Invoker.class);",
        "line": 81,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker6);",
        "line": 97,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker6);",
        "line": 222,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(false);",
        "line": 241,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(true);",
        "line": 270,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker6);",
        "line": 287,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker7",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker7;",
        "line": 58,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker7 = Mockito.mock(Invoker.class);",
        "line": 82,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker7);",
        "line": 98,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker7);",
        "line": 223,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(false);",
        "line": 242,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(true);",
        "line": 271,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker7);",
        "line": 288,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker8",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker8;",
        "line": 59,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker8 = Mockito.mock(Invoker.class);",
        "line": 83,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker8);",
        "line": 99,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker8);",
        "line": 224,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(false);",
        "line": 243,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(true);",
        "line": 272,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker8);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker9",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker9;",
        "line": 60,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker9 = Mockito.mock(Invoker.class);",
        "line": 84,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker9);",
        "line": 100,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker9);",
        "line": 225,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(false);",
        "line": 244,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(true);",
        "line": 273,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker9);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker10",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker10;",
        "line": 61,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker10 = Mockito.mock(Invoker.class);",
        "line": 85,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker10);",
        "line": 101,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker10);",
        "line": 226,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(false);",
        "line": 245,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(true);",
        "line": 274,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker10);",
        "line": 291,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker11",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker11;",
        "line": 62,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker11 = Mockito.mock(Invoker.class);",
        "line": 86,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker11);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker11);",
        "line": 227,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(false);",
        "line": 246,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(true);",
        "line": 275,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker11);",
        "line": 292,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker12",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker12;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker12 = Mockito.mock(Invoker.class);",
        "line": 87,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker12);",
        "line": 103,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker12);",
        "line": 228,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(false);",
        "line": 247,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(true);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker12);",
        "line": 293,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker13",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker13;",
        "line": 64,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker13 = Mockito.mock(Invoker.class);",
        "line": 88,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker13);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker13);",
        "line": 229,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(false);",
        "line": 248,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(true);",
        "line": 277,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker13);",
        "line": 294,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker14",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker14;",
        "line": 65,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker14 = Mockito.mock(Invoker.class);",
        "line": 89,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker14);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker14);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(false);",
        "line": 249,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(true);",
        "line": 278,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker14);",
        "line": 295,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker15",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker15;",
        "line": 66,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker15 = Mockito.mock(Invoker.class);",
        "line": 90,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker15);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker15);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(false);",
        "line": 250,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(true);",
        "line": 279,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker15);",
        "line": 296,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker1;",
        "line": 52,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = Mockito.mock(Invoker.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker1);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 109,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 149,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 160,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 197,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 203,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 210,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 212,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 261,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 265,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker2;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = Mockito.mock(Invoker.class);",
        "line": 77,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker2);",
        "line": 93,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 167,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 198,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, clusterInvoker.select(loadBalance, invocation, directory.list(invocation), Collections.singletonList(invoker2)));",
        "line": 204,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 237,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 266,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker3;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = Mockito.mock(Invoker.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker3);",
        "line": 94,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker3);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 183,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 238,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 267,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 284,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker4;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = Mockito.mock(Invoker.class);",
        "line": 79,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker4);",
        "line": 95,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker4);",
        "line": 112,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 184,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 239,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 268,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker5;",
        "line": 56,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = Mockito.mock(Invoker.class);",
        "line": 80,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker5);",
        "line": 96,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker5);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.remove(invoker5);",
        "line": 173,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 240,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(true);",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker5);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker6",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker6;",
        "line": 57,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker6 = Mockito.mock(Invoker.class);",
        "line": 81,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker6);",
        "line": 97,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker6);",
        "line": 222,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(false);",
        "line": 241,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(true);",
        "line": 270,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker6);",
        "line": 287,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker7",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker7;",
        "line": 58,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker7 = Mockito.mock(Invoker.class);",
        "line": 82,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker7);",
        "line": 98,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker7);",
        "line": 223,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(false);",
        "line": 242,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(true);",
        "line": 271,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker7);",
        "line": 288,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker8",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker8;",
        "line": 59,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker8 = Mockito.mock(Invoker.class);",
        "line": 83,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker8);",
        "line": 99,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker8);",
        "line": 224,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(false);",
        "line": 243,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(true);",
        "line": 272,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker8);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker9",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker9;",
        "line": 60,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker9 = Mockito.mock(Invoker.class);",
        "line": 84,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker9);",
        "line": 100,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker9);",
        "line": 225,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(false);",
        "line": 244,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(true);",
        "line": 273,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker9);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker10",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker10;",
        "line": 61,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker10 = Mockito.mock(Invoker.class);",
        "line": 85,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker10);",
        "line": 101,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker10);",
        "line": 226,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(false);",
        "line": 245,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(true);",
        "line": 274,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker10);",
        "line": 291,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker11",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker11;",
        "line": 62,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker11 = Mockito.mock(Invoker.class);",
        "line": 86,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker11);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker11);",
        "line": 227,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(false);",
        "line": 246,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(true);",
        "line": 275,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker11);",
        "line": 292,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker12",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker12;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker12 = Mockito.mock(Invoker.class);",
        "line": 87,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker12);",
        "line": 103,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker12);",
        "line": 228,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(false);",
        "line": 247,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(true);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker12);",
        "line": 293,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker13",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker13;",
        "line": 64,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker13 = Mockito.mock(Invoker.class);",
        "line": 88,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker13);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker13);",
        "line": 229,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(false);",
        "line": 248,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(true);",
        "line": 277,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker13);",
        "line": 294,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker14",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker14;",
        "line": 65,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker14 = Mockito.mock(Invoker.class);",
        "line": 89,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker14);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker14);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(false);",
        "line": 249,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(true);",
        "line": 278,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker14);",
        "line": 295,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker15",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker15;",
        "line": 66,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker15 = Mockito.mock(Invoker.class);",
        "line": 90,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker15);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker15);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(false);",
        "line": 250,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(true);",
        "line": 279,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker15);",
        "line": 296,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker1;",
        "line": 52,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker1 = Mockito.mock(Invoker.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker1);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 109,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 149,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 160,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker1);",
        "line": 197,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 203,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 210,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 212,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(false);",
        "line": 261,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker1.isAvailable()).thenReturn(true);",
        "line": 265,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker1);",
        "line": 282,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker2;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker2 = Mockito.mock(Invoker.class);",
        "line": 77,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker2);",
        "line": 93,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 167,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker2);",
        "line": 198,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, clusterInvoker.select(loadBalance, invocation, directory.list(invocation), Collections.singletonList(invoker2)));",
        "line": 204,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(false);",
        "line": 237,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker2.isAvailable()).thenReturn(true);",
        "line": 266,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker2);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker3;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker3 = Mockito.mock(Invoker.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker3);",
        "line": 94,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker3);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 183,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(false);",
        "line": 238,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker3.isAvailable()).thenReturn(true);",
        "line": 267,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker3);",
        "line": 284,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker4;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker4 = Mockito.mock(Invoker.class);",
        "line": 79,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker4);",
        "line": 95,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker4);",
        "line": 112,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 184,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(false);",
        "line": 239,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker4.isAvailable()).thenReturn(true);",
        "line": 268,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker4);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker5",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker5;",
        "line": 56,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker5 = Mockito.mock(Invoker.class);",
        "line": 80,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker5);",
        "line": 96,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker5);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerList.remove(invoker5);",
        "line": 173,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBasic",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(false);",
        "line": 240,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker5.isAvailable()).thenReturn(true);",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker5);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker6",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker6;",
        "line": 57,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker6 = Mockito.mock(Invoker.class);",
        "line": 81,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker6);",
        "line": 97,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker6);",
        "line": 222,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(false);",
        "line": 241,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker6.isAvailable()).thenReturn(true);",
        "line": 270,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker6);",
        "line": 287,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker7",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker7;",
        "line": 58,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker7 = Mockito.mock(Invoker.class);",
        "line": 82,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker7);",
        "line": 98,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker7);",
        "line": 223,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(false);",
        "line": 242,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker7.isAvailable()).thenReturn(true);",
        "line": 271,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker7);",
        "line": 288,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker8",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker8;",
        "line": 59,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker8 = Mockito.mock(Invoker.class);",
        "line": 83,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker8);",
        "line": 99,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker8);",
        "line": 224,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(false);",
        "line": 243,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker8.isAvailable()).thenReturn(true);",
        "line": 272,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker8);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker9",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker9;",
        "line": 60,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker9 = Mockito.mock(Invoker.class);",
        "line": 84,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker9);",
        "line": 100,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker9);",
        "line": 225,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(false);",
        "line": 244,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker9.isAvailable()).thenReturn(true);",
        "line": 273,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker9);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker10",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker10;",
        "line": 61,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker10 = Mockito.mock(Invoker.class);",
        "line": 85,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker10);",
        "line": 101,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker10);",
        "line": 226,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(false);",
        "line": 245,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker10.isAvailable()).thenReturn(true);",
        "line": 274,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker10);",
        "line": 291,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker11",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker11;",
        "line": 62,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker11 = Mockito.mock(Invoker.class);",
        "line": 86,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker11);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker11);",
        "line": 227,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(false);",
        "line": 246,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker11.isAvailable()).thenReturn(true);",
        "line": 275,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker11);",
        "line": 292,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker12",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker12;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker12 = Mockito.mock(Invoker.class);",
        "line": 87,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker12);",
        "line": 103,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker12);",
        "line": 228,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(false);",
        "line": 247,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker12.isAvailable()).thenReturn(true);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker12);",
        "line": 293,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker13",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker13;",
        "line": 64,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker13 = Mockito.mock(Invoker.class);",
        "line": 88,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker13);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker13);",
        "line": 229,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(false);",
        "line": 248,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker13.isAvailable()).thenReturn(true);",
        "line": 277,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker13);",
        "line": 294,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker14",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker14;",
        "line": 65,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker14 = Mockito.mock(Invoker.class);",
        "line": 89,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker14);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker14);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(false);",
        "line": 249,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker14.isAvailable()).thenReturn(true);",
        "line": 278,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker14);",
        "line": 295,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker15",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
      "className": "ConnectivityValidationTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker15;",
        "line": 66,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker15 = Mockito.mock(Invoker.class);",
        "line": 90,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "configInvoker(invoker15);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "invokerList.add(invoker15);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(false);",
        "line": 250,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker15.isAvailable()).thenReturn(true);",
        "line": 279,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokerSet.add(invoker15);",
        "line": 296,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRandomSelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailbackClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java"
    },
    "statements": [
      {
        "code": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
        "line": 108,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 111,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailbackClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java"
    },
    "statements": [
      {
        "code": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
        "line": 124,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 125,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<FailbackClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
      "className": "FailbackClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);",
        "line": 62,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker);",
        "line": 82,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 94,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 95,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 96,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 100,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 102,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 116,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 132,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 142,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeException",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invokers.add(invoker);",
        "line": 169,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 191,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testARetryFailed",
          "methodAnnotations": [
            "Disabled",
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 192,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testARetryFailed",
          "methodAnnotations": [
            "Disabled",
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 193,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testARetryFailed",
          "methodAnnotations": [
            "Disabled",
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithZeroValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 256,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithTwoValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 280,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithDefaultValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 304,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithIllegalValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailbackClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
      "className": "FailbackClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Directory<FailbackClusterInvokerTest> dic;",
        "line": 64,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 74,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 75,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 76,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 77,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 78,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = null;",
        "line": 88,
        "type": "ASSIGNMENT",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 109,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 112,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalRetriesParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 125,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 126,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 127,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithIllegalFailbacktasksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 161,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 163,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 164,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 165,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));",
        "line": 224,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithZeroValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));",
        "line": 249,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithTwoValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(URL.valueOf(\"test://test:11/test\"));",
        "line": 273,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithDefaultValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, -100));",
        "line": 297,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeRetryTimesWithIllegalValue",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FailfastClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailfastClusterInvokerTest.java",
      "className": "FailfastClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<FailfastClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 49,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailfastClusterInvokerTest.class);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailfastClusterInvokerTest.class);",
        "line": 81,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvoker1ToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> {\r\n    resetInvoker1ToException();\r\n    FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<>(dic);\r\n    invoker.invoke(invocation);\r\n    assertSame(invoker1, RpcContext.getServiceContext().getInvoker());\r\n});",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 96,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 97,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailfastClusterInvokerTest.class);",
        "line": 98,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 131,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailfastClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailfastClusterInvokerTest.java",
      "className": "FailfastClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Directory<FailfastClusterInvokerTest> dic;",
        "line": 51,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 60,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailfastClusterInvokerTest.class);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> {\r\n    resetInvoker1ToException();\r\n    FailfastClusterInvoker<FailfastClusterInvokerTest> invoker = new FailfastClusterInvoker<>(dic);\r\n    invoker.invoke(invocation);\r\n    assertSame(invoker1, RpcContext.getServiceContext().getInvoker());\r\n});",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 122,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 124,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 125,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailfastClusterInvokerTest.class);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailfastClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 179,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 209,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 237,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 262,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setCallable(callable);",
        "line": 306,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 59,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 132,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 156,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 157,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 183,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 184,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 234,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 238,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setCallable(callable);",
        "line": 307,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<FailoverClusterInvokerTest> dic;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 71,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 75,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 76,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 254,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 256,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 257,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 258,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 179,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 209,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 237,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 262,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setCallable(callable);",
        "line": 306,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 59,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 132,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 156,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 157,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 183,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 184,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 234,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 238,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setCallable(callable);",
        "line": 307,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<FailoverClusterInvokerTest> dic;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 71,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 75,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 76,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 254,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 256,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 257,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 258,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 179,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 209,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 237,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 262,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setCallable(callable);",
        "line": 306,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 59,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 132,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 156,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 157,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 183,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 184,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 234,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 238,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setCallable(callable);",
        "line": 307,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<FailoverClusterInvokerTest> dic;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 71,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 75,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 76,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 254,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 256,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 257,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 258,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(false);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 179,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 209,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 231,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 237,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 262,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setException(exception);",
        "line": 283,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 289,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker1.setCallable(callable);",
        "line": 306,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 59,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRuntimeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithRPCException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 132,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 156,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 157,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(false);",
        "line": 182,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 183,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 184,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke_retryTimes_withBizException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_without_retry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 234,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 238,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke_when_retry_illegal",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setException(exception);",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 290,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker2.setCallable(callable);",
        "line": 307,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerDestroyAndReList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<FailoverClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
      "className": "FailoverClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<FailoverClusterInvokerTest> dic;",
        "line": 63,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 71,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 75,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 76,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 254,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 256,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 257,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 258,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailSafeClusterInvokerTest.java",
      "className": "FailSafeClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 48,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 72,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker.invoke(invocation);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeExceptoin",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<DemoService>",
    "mockedClass": "Directory<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Global Init in @Before\n— Local Assignment in Test Case\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailSafeClusterInvokerTest.java",
      "className": "FailSafeClusterInvokerTest"
    },
    "statements": [
      {
        "code": "Directory<DemoService> dic;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 60,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(Directory<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(DemoService.class);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 104,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(null);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(DemoService.class);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<ForkingClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ForkingClusterInvokerTest.java",
      "className": "ForkingClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker<ForkingClusterInvokerTest> invoker1 = mock(Invoker.class);",
        "line": 48,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker1);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 76,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 90,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(result);",
        "line": 160,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 161,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.isAvailable()).willReturn(true);",
        "line": 162,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker1.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 163,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<ForkingClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ForkingClusterInvokerTest.java",
      "className": "ForkingClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker<ForkingClusterInvokerTest> invoker2 = mock(Invoker.class);",
        "line": 49,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker2);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 78,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 81,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(result);",
        "line": 95,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 96,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.isAvailable()).willReturn(true);",
        "line": 97,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 98,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<ForkingClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ForkingClusterInvokerTest.java",
      "className": "ForkingClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker<ForkingClusterInvokerTest> invoker3 = mock(Invoker.class);",
        "line": 50,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invokers.add(invoker3);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invoker3.invoke(invocation)).willThrow(new RuntimeException());",
        "line": 83,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(true);",
        "line": 85,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.invoke(invocation)).willReturn(result);",
        "line": 100,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.isAvailable()).willReturn(true);",
        "line": 102,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 103,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "resetInvokerToNoException",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<ForkingClusterInvokerTest>",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ForkingClusterInvokerTest.java",
      "className": "ForkingClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory<ForkingClusterInvokerTest> dic;",
        "line": 52,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "dic = mock(Directory.class);",
        "line": 58,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.list(invocation)).willReturn(invokers);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getInterface()).willReturn(ForkingClusterInvokerTest.class);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(dic.getUrl()).willReturn(url);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dic.getConsumerUrl()).willReturn(url);",
        "line": 159,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.ForkingClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalForksParam",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "directory",
    "variableType": "Directory",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory directory = mock(Directory.class);",
        "line": 54,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "directory = mock(Directory.class);",
        "line": 97,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 143,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 203,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 210,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 211,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 212,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 213,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 277,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 278,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 279,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 317,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 324,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 325,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 326,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 327,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 372,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 379,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 380,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 381,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 382,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 418,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 425,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 426,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 427,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 428,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 485,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 492,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 493,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 494,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 495,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 523,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 530,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 531,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 532,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(MenuService.class);",
        "line": 533,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "firstInvoker",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker firstInvoker = mock(Invoker.class);",
        "line": 55,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "firstInvoker = mock(Invoker.class);",
        "line": 98,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 115,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 143,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 191,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 193,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 194,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 195,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 196,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 239,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 241,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 269,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 301,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 303,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 304,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 305,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 306,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 307,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 317,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 358,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 360,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 361,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 362,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 363,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 364,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 372,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 406,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 408,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 409,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 410,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.isAvailable()).willReturn(true);",
        "line": 411,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 418,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 452,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 457,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 485,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 513,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
        "line": 515,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 516,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 517,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 523,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(firstInvoker.isAvailable());",
        "line": 538,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "secondInvoker",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker secondInvoker = mock(Invoker.class);",
        "line": 56,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "secondInvoker = mock(Invoker.class);",
        "line": 99,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 129,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 143,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 198,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 199,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 200,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 201,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 255,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 269,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 310,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 311,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 312,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 313,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 314,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 317,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 366,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 367,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 368,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 369,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 370,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 372,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 413,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 414,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 415,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.isAvailable()).willReturn(true);",
        "line": 416,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 418,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
        "line": 471,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 485,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
        "line": 519,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
        "line": 520,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 521,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 523,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(secondInvoker.isAvailable());",
        "line": 539,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n— Global Init in @Before\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invocation invocation = mock(RpcInvocation.class);",
        "line": 57,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 100,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 111,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 143,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 187,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 188,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 190,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 191,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 195,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 200,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 203,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 235,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 236,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 237,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 238,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 239,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 269,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAddMenu1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 297,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 298,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 299,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 300,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 301,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 305,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 307,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 312,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
        "line": 314,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 317,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToNoInvokerAvailableException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
        "line": 354,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
        "line": 355,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
        "line": 356,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 357,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 358,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 362,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 364,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 368,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
        "line": 370,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 372,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerToException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 402,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 403,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 404,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 405,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 406,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 410,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 415,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 418,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 448,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 449,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 450,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 451,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 452,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// mock ApplicationModel\r\ngiven(invocation.getModuleModel()).willReturn(moduleModel);",
        "line": 454,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getModuleModel()).thenReturn(org.apache.dubbo.rpc.model.ModuleModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getModuleModel().getApplicationModel()).willReturn(ApplicationModel.defaultModel());",
        "line": 455,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 485,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
        "line": 509,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 510,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 511,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 512,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
        "line": 513,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 517,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
        "line": 521,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
        "line": 523,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDestroy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
      "className": "MergeableClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private ModuleModel moduleModel = mock(ModuleModel.class);",
        "line": 58,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "// mock ApplicationModel\r\ngiven(invocation.getModuleModel()).willReturn(moduleModel);",
        "line": 454,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetMenuWithMergerDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "directory",
    "variableType": "Directory",
    "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
      "className": "ZoneAwareClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Directory directory = mock(Directory.class);",
        "line": 43,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 83,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 136,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 137,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 167,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getUrl()).willReturn(url);",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getConsumerUrl()).willReturn(url);",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList<>(0));",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.getInterface()).willReturn(ZoneAwareClusterInvokerTest.class);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvokerTest>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "firstInvoker",
    "variableType": "ClusterInvoker",
    "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
      "className": "ZoneAwareClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);",
        "line": 44,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "firstInvoker = newUnexpectedInvoker();",
        "line": 63,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "firstInvoker = newUnexpectedInvoker();",
        "line": 108,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "firstInvoker = newUnexpectedInvoker();",
        "line": 154,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "secondInvoker",
    "variableType": "ClusterInvoker",
    "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
      "className": "ZoneAwareClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(PREFERRED_KEY, true);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});",
        "line": 66,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(ZONE_KEY, zoneKey);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});",
        "line": 111,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "secondInvoker = newUnexpectedInvoker();",
        "line": 155,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "thirdInvoker",
    "variableType": "ClusterInvoker",
    "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
      "className": "ZoneAwareClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);",
        "line": 46,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "thirdInvoker = newUnexpectedInvoker();",
        "line": 64,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "thirdInvoker = newUnexpectedInvoker();",
        "line": 109,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "thirdInvoker = newUnexpectedInvoker();",
        "line": 156,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
      "className": "ZoneAwareClusterInvokerTest"
    },
    "statements": [
      {
        "code": "private Invocation invocation = mock(Invocation.class);",
        "line": 47,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPreferredStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 105,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
        "line": 148,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
        "line": 149,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(IllegalStateException.class, () -> zoneAwareClusterInvoker.invoke(invocation));",
        "line": 170,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegistryZoneForceStrategy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(directory.list(invocation)).willReturn(new ArrayList<>(0));",
        "line": 177,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> zoneAwareClusterInvoker.invoke(invocation));",
        "line": 182,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNoAvailableInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "directory",
    "variableType": "Directory<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\wrapper\\AbstractClusterTest.java"
    },
    "statements": [
      {
        "code": "Directory<?> directory = mock(Directory.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBuildClusterInvokerChain",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(directory.getUrl()).thenReturn(url);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<?>.getUrl()).thenReturn(org.apache.dubbo.common.url.component.ServiceConfigURL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBuildClusterInvokerChain",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(directory.getConsumerUrl()).thenReturn(consumerUrl);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<?>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBuildClusterInvokerChain",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedExecutor",
    "variableType": "Executor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\concurrent\\CompletableFutureTaskTest.java"
    },
    "statements": [
      {
        "code": "Executor mockedExecutor = mock(Executor.class);",
        "line": 100,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustomExecutor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "completableFuture.thenRunAsync(mock(Runnable.class), mockedExecutor).whenComplete((s, e) -> verify(mockedExecutor, times(1)).execute(any(Runnable.class)));",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCustomExecutor",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationEnvironment",
    "variableType": "Environment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\config\\ConfigurationUtilsTest.java"
    },
    "statements": [
      {
        "code": "Environment applicationEnvironment = Mockito.spy(originApplicationEnvironment);",
        "line": 41,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "applicationModel.setEnvironment(applicationEnvironment);",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationEnvironment.getDynamicGlobalConfiguration()).thenReturn(configuration);",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.Environment.getDynamicGlobalConfiguration()).thenReturn(org.apache.dubbo.common.config.Configuration)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configuration",
    "variableType": "Configuration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\config\\ConfigurationUtilsTest.java"
    },
    "statements": [
      {
        "code": "Configuration configuration = Mockito.mock(Configuration.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationEnvironment.getDynamicGlobalConfiguration()).thenReturn(configuration);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(configuration.getString(\"TestKey\", \"\")).thenReturn(\"a\");",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.Configuration.getString(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(configuration.getString(\"TestKey\", \"\")).thenReturn(\"b\");",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.Configuration.getString(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleEnvironment.getDynamicGlobalConfiguration()).thenReturn(configuration);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(configuration.getString(\"TestKey\", \"\")).thenReturn(\"c\");",
        "line": 64,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.Configuration.getString(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleEnvironment",
    "variableType": "ModuleEnvironment",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\config\\ConfigurationUtilsTest.java"
    },
    "statements": [
      {
        "code": "ModuleEnvironment moduleEnvironment = Mockito.spy(originModuleEnvironment);",
        "line": 56,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.setModuleEnvironment(moduleEnvironment);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleEnvironment.getDynamicGlobalConfiguration()).thenReturn(configuration);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.ModuleEnvironment.getDynamicGlobalConfiguration()).thenReturn(org.apache.dubbo.common.config.Configuration)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCachedProperties",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "stream",
    "variableType": "OutputStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\io\\UnsafeByteArrayOutputStreamTest.java"
    },
    "statements": [
      {
        "code": "OutputStream stream = mock(OutputStream.class);",
        "line": 67,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExtendLengthForBuffer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "outputStream.writeTo(stream);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testExtendLengthForBuffer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(stream).write(any(byte[].class), anyInt(), eq(10));",
        "line": 69,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExtendLengthForBuffer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fastjson2Mock",
    "variableType": "MockedStatic<JSON>",
    "mockedClass": "org.mockito.MockedStatic<com.alibaba.fastjson2.JSON>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.json.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\json\\impl\\FastJson2ImplTest.java",
      "className": "FastJson2ImplTest"
    },
    "statements": [
      {
        "code": "private static MockedStatic<JSON> fastjson2Mock;",
        "line": 33,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "fastjson2Mock = Mockito.mockStatic(JSON.class, CALLS_REAL_METHODS);",
        "line": 37,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "fastjson2Mock.close();",
        "line": 42,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "teardown",
          "methodAnnotations": [
            "AfterAll"
          ]
        }
      },
      {
        "code": "fastjson2Mock.when(() -> JSON.toJSONString(Mockito.any(), (JSONWriter.Feature) Mockito.any())).thenThrow(new RuntimeException());",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.reset();",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.when(() -> JSON.toJSONString(Mockito.any(), (JSONWriter.Feature) Mockito.any())).thenReturn(null);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.reset();",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.when(() -> JSON.parseObject((String) Mockito.any(), (Type) Mockito.any())).thenReturn(null);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.reset();",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.when(() -> JSON.parseArray(Mockito.any(), (Class) Mockito.any())).thenReturn(null);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjson2Mock.reset();",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "fastjsonMock",
    "variableType": "MockedStatic<JSON>",
    "mockedClass": "org.mockito.MockedStatic<com.alibaba.fastjson.JSON>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.json.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\json\\impl\\FastJsonImplTest.java",
      "className": "FastJsonImplTest"
    },
    "statements": [
      {
        "code": "private static MockedStatic<JSON> fastjsonMock;",
        "line": 32,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "fastjsonMock = Mockito.mockStatic(JSON.class, CALLS_REAL_METHODS);",
        "line": 36,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "fastjsonMock.close();",
        "line": 41,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "teardown",
          "methodAnnotations": [
            "AfterAll"
          ]
        }
      },
      {
        "code": "fastjsonMock.when(() -> JSON.toJSONString(Mockito.any(), Mockito.any())).thenThrow(new RuntimeException());",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.reset();",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.when(() -> JSON.toJSONString(Mockito.any(), Mockito.any())).thenReturn(null);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.reset();",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.when(() -> JSON.parseObject((String) Mockito.any(), (Type) Mockito.any())).thenReturn(null);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.reset();",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.when(() -> JSON.parseArray(Mockito.any(), (Class) Mockito.any())).thenReturn(null);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "fastjsonMock.reset();",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSupported",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "locationAwareLogger",
    "variableType": "LocationAwareLogger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\slf4j\\Slf4jLoggerTest.java"
    },
    "statements": [
      {
        "code": "LocationAwareLogger locationAwareLogger = mock(LocationAwareLogger.class);",
        "line": 33,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLocationAwareLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(locationAwareLogger, times(5)).log(isNull(), anyString(), anyInt(), anyString(), isNull(), isNull());",
        "line": 43,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLocationAwareLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(locationAwareLogger, times(10)).log(isNull(), anyString(), anyInt(), anyString(), isNull(), any(Throwable.class));",
        "line": 57,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLocationAwareLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "failLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeErrorTypeAwareLoggerTest.java"
    },
    "statements": [
      {
        "code": "Logger failLogger = mock(Logger.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "successLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeErrorTypeAwareLoggerTest.java"
    },
    "statements": [
      {
        "code": "Logger successLogger = mock(Logger.class);",
        "line": 66,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).error(anyString());",
        "line": 72,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).warn(anyString());",
        "line": 73,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "failLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeLoggerTest.java"
    },
    "statements": [
      {
        "code": "Logger failLogger = mock(Logger.class);",
        "line": 33,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
        "line": 36,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
        "line": 37,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
        "line": 38,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
        "line": 39,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
        "line": 40,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFailSafeForLoggingMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "successLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeLoggerTest.java"
    },
    "statements": [
      {
        "code": "Logger successLogger = mock(Logger.class);",
        "line": 69,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).error(anyString());",
        "line": 77,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).warn(anyString());",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).info(anyString());",
        "line": 79,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).debug(anyString());",
        "line": 80,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).trace(anyString());",
        "line": 81,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cert1",
    "variableType": "Cert",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java"
    },
    "statements": [
      {
        "code": "Cert cert1 = Mockito.mock(Cert.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "FirstCertProvider.setCert(cert1);",
        "line": 58,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(cert1, certManager.getConsumerConnectionConfig(url));",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(cert1, certManager.getConsumerConnectionConfig(url));",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(cert1, certManager.getConsumerConnectionConfig(url));",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cert2",
    "variableType": "Cert",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java"
    },
    "statements": [
      {
        "code": "Cert cert2 = Mockito.mock(Cert.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "SecondCertProvider.setCert(cert2);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(cert2, certManager.getConsumerConnectionConfig(url));",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(cert2, certManager.getConsumerConnectionConfig(url));",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "providerCert1",
    "variableType": "ProviderCert",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java"
    },
    "statements": [
      {
        "code": "ProviderCert providerCert1 = Mockito.mock(ProviderCert.class);",
        "line": 85,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "FirstCertProvider.setProviderCert(providerCert1);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(providerCert1, certManager.getProviderConnectionConfig(url, null));",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(providerCert1, certManager.getProviderConnectionConfig(url, null));",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(providerCert1, certManager.getProviderConnectionConfig(url, null));",
        "line": 97,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "providerCert2",
    "variableType": "ProviderCert",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java"
    },
    "statements": [
      {
        "code": "ProviderCert providerCert2 = Mockito.mock(ProviderCert.class);",
        "line": 92,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "SecondCertProvider.setProviderCert(providerCert2);",
        "line": 93,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(providerCert2, certManager.getProviderConnectionConfig(url, null));",
        "line": 100,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(providerCert2, certManager.getProviderConnectionConfig(url, null));",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetProviderConnectionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\status\\reporter\\FrameworkStatusReportServiceTest.java"
    },
    "statements": [
      {
        "code": "// 2. createConsumptionReport\r\nURL consumerURL = Mockito.mock(URL.class);",
        "line": 54,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "reportService.reportConsumptionStatus(reportService.createConsumptionReport(consumerURL.getServiceInterface(), consumerURL.getVersion(), consumerURL.getGroup(), \"status\"));",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// 3. reportMigrationStepStatus\r\nreportService.reportMigrationStepStatus(reportService.createMigrationStepReport(consumerURL.getServiceInterface(), consumerURL.getVersion(), consumerURL.getGroup(), \"FORCE_INTERFACE\", \"FORCE_APPLICATION\", \"ture\"));",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "DataStoreUpdateListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\store\\support\\SimpleDataStoreTest.java"
    },
    "statements": [
      {
        "code": "DataStoreUpdateListener listener = Mockito.mock(DataStoreUpdateListener.class);",
        "line": 67,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "dataStore.addListener(listener);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener).onUpdate(componentNameCaptor.capture(), keyCaptor.capture(), valueCaptor.capture());",
        "line": 75,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener, Mockito.times(2)).onUpdate(componentNameCaptor.capture(), keyCaptor.capture(), valueCaptor.capture());",
        "line": 81,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener, Mockito.times(0)).onUpdate(\"name2\", \"key\", null);",
        "line": 88,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "EagerThreadPoolExecutor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java"
    },
    "statements": [
      {
        "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
        "line": 43,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getActiveCount()).thenReturn(1);",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "queue.setExecutor(executor);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "EagerThreadPoolExecutor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java"
    },
    "statements": [
      {
        "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
        "line": 53,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getActiveCount()).thenReturn(2);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "queue.setExecutor(executor);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOffer3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "EagerThreadPoolExecutor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java"
    },
    "statements": [
      {
        "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer4",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getPoolSize()).thenReturn(4);",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer4",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getActiveCount()).thenReturn(4);",
        "line": 66,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer4",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
        "line": 67,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOffer4",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "queue.setExecutor(executor);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOffer4",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "EagerThreadPoolExecutor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java"
    },
    "statements": [
      {
        "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
        "line": 86,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetryOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(executor.isShutdown()).thenReturn(false);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.isShutdown()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRetryOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "queue.setExecutor(executor);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRetryOffer2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "classLoader",
    "variableType": "ClassLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ClassUtilsTest.java"
    },
    "statements": [
      {
        "code": "ClassLoader classLoader = Mockito.mock(ClassLoader.class);",
        "line": 89,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testForName3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ClassUtils.forName(\"a.b.c.D\", classLoader);",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testForName3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(classLoader).loadClass(\"a.b.c.D\");",
        "line": 91,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testForName3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "event",
    "variableType": "LoggingEvent",
    "mockedClass": "org.apache.log4j.spi.LoggingEvent",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.common.utils",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\DubboAppenderTest.java",
      "className": "DubboAppenderTest"
    },
    "statements": [
      {
        "code": "private LoggingEvent event;",
        "line": 36,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "event = mock(LoggingEvent.class);",
        "line": 40,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(event.getLogger()).thenReturn(mock(Category.class));",
        "line": 41,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.log4j.spi.LoggingEvent.getLogger()).thenReturn(org.apache.log4j.Category)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(event.getLevel()).thenReturn(mock(Level.class));",
        "line": 42,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.log4j.spi.LoggingEvent.getLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(event.getThreadName()).thenReturn(\"thread-name\");",
        "line": 43,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.log4j.spi.LoggingEvent.getThreadName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(event.getMessage()).thenReturn(\"message\");",
        "line": 44,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.log4j.spi.LoggingEvent.getMessage()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "appender.append(event);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAppend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "appender.append(event);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAppend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "appender.append(event);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testClear",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java"
    },
    "statements": [
      {
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsTerminated",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.isTerminated()).thenReturn(true);",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsTerminated",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(ExecutorUtil.isTerminated(executor), is(true));",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsTerminated",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor2",
    "variableType": "Executor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java"
    },
    "statements": [
      {
        "code": "Executor executor2 = Mockito.mock(Executor.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsTerminated",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(ExecutorUtil.isTerminated(executor2), is(false));",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsTerminated",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java"
    },
    "statements": [
      {
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.isTerminated()).thenReturn(false, true);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.awaitTermination(20, TimeUnit.MILLISECONDS)).thenReturn(false);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.awaitTermination(int, java.util.concurrent.TimeUnit)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExecutorUtil.gracefulShutdown(executor, 20);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor).shutdown();",
        "line": 54,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor).shutdownNow();",
        "line": 55,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown1",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java"
    },
    "statements": [
      {
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 60,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.isTerminated()).thenReturn(false, false, false);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean, boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.awaitTermination(20, TimeUnit.MILLISECONDS)).thenReturn(false);",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.awaitTermination(int, java.util.concurrent.TimeUnit)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.awaitTermination(10, TimeUnit.MILLISECONDS)).thenReturn(false, true);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.awaitTermination(int, java.util.concurrent.TimeUnit)).thenReturn(boolean, boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExecutorUtil.gracefulShutdown(executor, 20);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "await().untilAsserted(() -> verify(executor, times(2)).awaitTermination(10, TimeUnit.MILLISECONDS));",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor, times(1)).shutdown();",
        "line": 68,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor, times(3)).shutdownNow();",
        "line": 69,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGracefulShutdown2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "executor",
    "variableType": "ExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java"
    },
    "statements": [
      {
        "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
        "line": 74,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testShutdownNow",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(executor.isTerminated()).thenReturn(false, true);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testShutdownNow",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExecutorUtil.shutdownNow(executor, 20);",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testShutdownNow",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor).shutdownNow();",
        "line": 77,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testShutdownNow",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(executor).awaitTermination(20, TimeUnit.MILLISECONDS);",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testShutdownNow",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "logger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java"
    },
    "statements": [
      {
        "code": "Logger logger = Mockito.mock(Logger.class);",
        "line": 31,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(logger.isTraceEnabled()).thenReturn(true);",
        "line": 32,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isTraceEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.trace(logger, \"trace\");",
        "line": 33,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).trace(\"trace\");",
        "line": 34,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.trace(logger, t);",
        "line": 36,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).trace(t);",
        "line": 37,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.trace(logger, \"trace\", t);",
        "line": 38,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).trace(\"trace\", t);",
        "line": 39,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTrace",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "logger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java"
    },
    "statements": [
      {
        "code": "Logger logger = Mockito.mock(Logger.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(logger.isDebugEnabled()).thenReturn(true);",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.debug(logger, \"debug\");",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).debug(\"debug\");",
        "line": 47,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.debug(logger, t);",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).debug(t);",
        "line": 50,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.debug(logger, \"debug\", t);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).debug(\"debug\", t);",
        "line": 52,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDebug",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "logger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java"
    },
    "statements": [
      {
        "code": "Logger logger = Mockito.mock(Logger.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(logger.isInfoEnabled()).thenReturn(true);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isInfoEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.info(logger, \"info\");",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).info(\"info\");",
        "line": 60,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.info(logger, t);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).info(t);",
        "line": 63,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.info(logger, \"info\", t);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).info(\"info\", t);",
        "line": 65,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInfo",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "logger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java"
    },
    "statements": [
      {
        "code": "Logger logger = Mockito.mock(Logger.class);",
        "line": 70,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(logger.isWarnEnabled()).thenReturn(true);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isWarnEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.warn(logger, \"warn\");",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).warn(\"warn\");",
        "line": 73,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.warn(logger, t);",
        "line": 75,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).warn(t);",
        "line": 76,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.warn(logger, \"warn\", t);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).warn(\"warn\", t);",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWarn",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "logger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java"
    },
    "statements": [
      {
        "code": "Logger logger = Mockito.mock(Logger.class);",
        "line": 83,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(logger.isErrorEnabled()).thenReturn(true);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isErrorEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.error(logger, \"error\");",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).error(\"error\");",
        "line": 86,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.error(logger, t);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).error(t);",
        "line": 89,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "LogHelper.error(logger, \"error\", t);",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(logger).error(\"error\", t);",
        "line": 91,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testError",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.INFO);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckNoError",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 55,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogName()).thenReturn(\"a\");",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindName",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 63,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevel",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindLevel",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevel",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 72,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogThread()).thenReturn(\"thread-1\");",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "log = mock(Log.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogThread()).thenReturn(\"thread-2\");",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindLevelWithThreadName",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 85,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindThread",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindThread",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogThread()).thenReturn(\"thread-1\");",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindThread",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 93,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindMessage1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogMessage()).thenReturn(\"message\");",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage1",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "log",
    "variableType": "Log",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java"
    },
    "statements": [
      {
        "code": "Log log = mock(Log.class);",
        "line": 101,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogMessage()).thenReturn(\"message\");",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "log = mock(Log.class);",
        "line": 105,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "DubboAppender.logList.add(log);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogMessage()).thenReturn(\"message\");",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(log.getLogLevel()).thenReturn(Level.INFO);",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFindMessage2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "address",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\NetUtilsTest.java"
    },
    "statements": [
      {
        "code": "InetAddress address = mock(InetAddress.class);",
        "line": 117,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.isLoopbackAddress()).thenReturn(true);",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(NetUtils.isValidV4Address(address));",
        "line": 119,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "address = mock(InetAddress.class);",
        "line": 120,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"localhost\");",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(NetUtils.isValidV4Address(address));",
        "line": 122,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "address = mock(InetAddress.class);",
        "line": 123,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"0.0.0.0\");",
        "line": 124,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(NetUtils.isValidV4Address(address));",
        "line": 125,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "address = mock(InetAddress.class);",
        "line": 126,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"127.0.0.1\");",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(NetUtils.isValidV4Address(address));",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "address = mock(InetAddress.class);",
        "line": 129,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"1.2.3.4\");",
        "line": 130,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertTrue(NetUtils.isValidV4Address(address));",
        "line": 131,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsValidAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "address",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\NetUtilsTest.java"
    },
    "statements": [
      {
        "code": "InetAddress address = mock(InetAddress.class);",
        "line": 173,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testToAddressString",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"dubbo\");",
        "line": 174,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testToAddressString",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "address",
    "variableType": "Inet6Address",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\NetUtilsTest.java"
    },
    "statements": [
      {
        "code": "Inet6Address address = mock(Inet6Address.class);",
        "line": 219,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNormalizeV6Address",
          "methodAnnotations": [
            "Disabled",
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getHostAddress()).thenReturn(\"fe80:0:0:0:894:aeec:f37d:23e1%en0\");",
        "line": 220,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.Inet6Address.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNormalizeV6Address",
          "methodAnnotations": [
            "Disabled",
            "Test"
          ]
        }
      },
      {
        "code": "when(address.getScopeId()).thenReturn(5);",
        "line": 221,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.Inet6Address.getScopeId()).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNormalizeV6Address",
          "methodAnnotations": [
            "Disabled",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "method",
    "variableType": "MethodDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\rpc\\model\\ReflectionServiceDescriptorTest.java"
    },
    "statements": [
      {
        "code": "MethodDescriptor method = Mockito.mock(MethodDescriptor.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "addMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(method.getMethodName()).thenReturn(\"sayHello2\");",
        "line": 38,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.MethodDescriptor.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "addMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "service2.addMethod(method);",
        "line": 39,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "addMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-compatible\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 55,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "genericImplFilter.onResponse(result, invoker, invocation);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\AbstractReferenceConfigTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 109,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getParameter(ROUTER_KEY)).thenReturn(\"condition\");",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getParameter(ROUTER_KEY)).thenReturn(\"-tag,-app\");",
        "line": 117,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRouter",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\invoker\\DelegateProviderMetaDataInvokerTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 51,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "delegate.invoke(invocation);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "service",
    "variableType": "ServiceConfig",
    "mockedClass": "org.apache.dubbo.config.ServiceConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config.invoker",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\invoker\\DelegateProviderMetaDataInvokerTest.java",
      "className": "DelegateProviderMetaDataInvokerTest"
    },
    "statements": [
      {
        "code": "private ServiceConfig service;",
        "line": 32,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "service = Mockito.mock(ServiceConfig.class);",
        "line": 37,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "assertThat(delegate.getMetadata(), sameInstance(service));",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<Greeting>",
    "mockedClass": "Invoker<Greeting>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.config.invoker",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\invoker\\DelegateProviderMetaDataInvokerTest.java",
      "className": "DelegateProviderMetaDataInvokerTest"
    },
    "statements": [
      {
        "code": "private Invoker<Greeting> invoker;",
        "line": 33,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker = Mockito.mock(Invoker.class);",
        "line": 38,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker).getInterface();",
        "line": 46,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker).getUrl();",
        "line": 48,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker).isAvailable();",
        "line": 50,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker).invoke(invocation);",
        "line": 53,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker).destroy();",
        "line": 55,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDelegate",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "server",
    "variableType": "RemotingServer",
    "mockedClass": "org.apache.dubbo.remoting.RemotingServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config.mock",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\mock\\MockTransporter.java",
      "className": "MockTransporter"
    },
    "statements": [
      {
        "code": "private RemotingServer server = Mockito.mock(RemotingServer.class);",
        "line": 29,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "Client",
    "mockedClass": "org.apache.dubbo.remoting.Client",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config.mock",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\mock\\MockTransporter.java",
      "className": "MockTransporter"
    },
    "statements": [
      {
        "code": "private Client client = Mockito.mock(Client.class);",
        "line": 30,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "scheduledExecutorService",
    "variableType": "ScheduledExecutorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java"
    },
    "statements": [
      {
        "code": "ScheduledExecutorService scheduledExecutorService = Mockito.spy(Executors.newScheduledThreadPool(1));",
        "line": 646,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMappingNoRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceConfig.mapServiceName(URL.valueOf(\"\"), serviceNameMapping, scheduledExecutorService);",
        "line": 693,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMappingNoRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(scheduledExecutorService, times(0)).schedule((Runnable) any(), anyLong(), any());",
        "line": 695,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMappingNoRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "scheduledExecutorService.shutdown();",
        "line": 697,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMappingNoRetry",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocolDelegate",
    "variableType": "Protocol",
    "mockedClass": "org.apache.dubbo.rpc.Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java",
      "className": "ServiceConfigTest"
    },
    "statements": [
      {
        "code": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);",
        "line": 89,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);",
        "line": 108,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));",
        "line": 188,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExport",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));",
        "line": 349,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExportWithoutRegistryConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryDelegate",
    "variableType": "Registry",
    "mockedClass": "org.apache.dubbo.registry.Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java",
      "className": "ServiceConfigTest"
    },
    "statements": [
      {
        "code": "private Registry registryDelegate = Mockito.mock(Registry.class);",
        "line": 90,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "exporter",
    "variableType": "Exporter",
    "mockedClass": "org.apache.dubbo.rpc.Exporter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java",
      "className": "ServiceConfigTest"
    },
    "statements": [
      {
        "code": "private Exporter exporter = Mockito.mock(Exporter.class);",
        "line": 91,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);",
        "line": 108,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mock",
    "variableType": "ConfigValidationUtils",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\utils\\ConfigValidationUtilsTest.java"
    },
    "statements": [
      {
        "code": "ConfigValidationUtils mock = Mockito.mock(ConfigValidationUtils.class);",
        "line": 138,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "injectField(mock.getClass().getDeclaredField(\"logger\"), loggerMock);",
        "line": 140,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "mock.validateApplicationConfig(config);",
        "line": 144,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "mock.validateApplicationConfig(config);",
        "line": 148,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loggerMock",
    "variableType": "ErrorTypeAwareLogger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\utils\\ConfigValidationUtilsTest.java"
    },
    "statements": [
      {
        "code": "ErrorTypeAwareLogger loggerMock = Mockito.mock(ErrorTypeAwareLogger.class);",
        "line": 139,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "injectField(mock.getClass().getDeclaredField(\"logger\"), loggerMock);",
        "line": 140,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(loggerMock, never()).warn(any(), any());",
        "line": 145,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(loggerMock).warn(eq(COMMON_CLASS_NOT_FOUND), eq(\"\"), eq(\"\"), eq(\"No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly.\"), any());",
        "line": 149,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckQosInApplicationConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "service",
    "variableType": "TestService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\ServiceBeanTest.java"
    },
    "statements": [
      {
        "code": "TestService service = mock(TestService.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetService",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dataSource",
    "variableType": "DataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "DataSource dataSource = mock(DataSource.class);",
        "line": 84,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dataSource.getConnection()).willReturn(connection);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "map.put(\"mockDatabase\", dataSource);",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connection",
    "variableType": "Connection",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
        "line": 85,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dataSource.getConnection()).willReturn(connection);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(connection.getMetaData().getTypeInfo().next()).willReturn(true);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.sql.ResultSet.next()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dataSource",
    "variableType": "DataSource",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "DataSource dataSource = mock(DataSource.class);",
        "line": 100,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dataSource.getConnection()).willReturn(connection);",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "map.put(\"mockDatabase\", dataSource);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connection",
    "variableType": "Connection",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
        "line": 101,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(dataSource.getConnection()).willReturn(connection);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(connection.getMetaData().getTypeInfo().next()).willReturn(false);",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.sql.ResultSet.next()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationContext",
    "variableType": "ApplicationContext",
    "mockedClass": "ApplicationContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.config.spring.status",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
      "className": "DataSourceStatusCheckerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate ApplicationContext applicationContext;",
        "line": 48,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.reset(applicationContext);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithoutDatasource",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithDatasourceNotHasNextResult",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationLifeCycle",
    "variableType": "ApplicationLifeCycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\SpringStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
        "line": 59,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithLifeCycleRunning",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(applicationLifeCycle.getConfigLocations()).willReturn(new String[] { \"test1\", \"test2\" });",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.getConfigLocations()).thenReturn(java.lang.String[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithLifeCycleRunning",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(applicationLifeCycle.isRunning()).willReturn(true);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithLifeCycleRunning",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationLifeCycle",
    "variableType": "ApplicationLifeCycle",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\SpringStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
        "line": 72,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithoutLifeCycleRunning",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(applicationLifeCycle.isRunning()).willReturn(false);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithoutLifeCycleRunning",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "GenericWebApplicationContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\SpringStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "GenericWebApplicationContext context = mock(GenericWebApplicationContext.class);",
        "line": 88,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGenericWebApplicationContext",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(context.isRunning()).willReturn(true);",
        "line": 89,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isRunning()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGenericWebApplicationContext",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "ConfigurationListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-configcenter\\dubbo-configcenter-zookeeper\\src\\test\\java\\org\\apache\\dubbo\\configcenter\\support\\zookeeper\\ZookeeperDynamicConfigurationTest.java"
    },
    "statements": [
      {
        "code": "ConfigurationListener listener = Mockito.mock(ConfigurationListener.class);",
        "line": 92,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "mockListener",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.doAnswer(invoke -> {\r\n    ConfigChangedEvent event = invoke.getArgument(0);\r\n    Integer count = countMap.computeIfAbsent(event.getKey(), k -> 0);\r\n    countMap.put(event.getKey(), ++count);\r\n    value[0] = event.getContent();\r\n    latch.countDown();\r\n    return null;\r\n}).when(listener).process(Mockito.any());",
        "line": 93,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "doAnswer(null).when(null).process(T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "mockListener",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.cache.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-cache\\src\\test\\java\\org\\apache\\dubbo\\cache\\filter\\CacheFilterTest.java",
      "className": "CacheFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker = mock(Invoker.class);",
        "line": 43,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(AsyncRpcResult.newDefaultAsyncResult(\"value\", invocation));",
        "line": 63,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 64,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "cacheFilter.invoke(invoker, invocation);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNonArgsMethod",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      },
      {
        "code": "cacheFilter.invoke(invoker, invocation);",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNonArgsMethod",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      },
      {
        "code": "cacheFilter.invoke(invoker, invocation);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMethodWithArgs",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      },
      {
        "code": "cacheFilter.invoke(invoker, invocation);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMethodWithArgs",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.cache.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-cache\\src\\test\\java\\org\\apache\\dubbo\\cache\\filter\\CacheFilterTest.java",
      "className": "CacheFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker1 = mock(Invoker.class);",
        "line": 44,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.invoke(invocation)).willReturn(AsyncRpcResult.newDefaultAsyncResult(\"value1\", invocation));",
        "line": 66,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker1.getUrl()).willReturn(url);",
        "line": 67,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.cache.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-cache\\src\\test\\java\\org\\apache\\dubbo\\cache\\filter\\CacheFilterTest.java",
      "className": "CacheFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker2 = mock(Invoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.invoke(invocation)).willReturn(AsyncRpcResult.newDefaultAsyncResult(\"value2\", invocation));",
        "line": 69,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker2.getUrl()).willReturn(url);",
        "line": 70,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.cache.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-cache\\src\\test\\java\\org\\apache\\dubbo\\cache\\filter\\CacheFilterTest.java",
      "className": "CacheFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker3 = mock(Invoker.class);",
        "line": 46,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.invoke(invocation)).willReturn(AsyncRpcResult.newDefaultAsyncResult(new RuntimeException(), invocation));",
        "line": 72,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker3.getUrl()).willReturn(url);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "cacheFilter.invoke(invoker3, invocation);",
        "line": 120,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testException",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      },
      {
        "code": "cacheFilter.invoke(invoker3, invocation);",
        "line": 121,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testException",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker4",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.cache.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-cache\\src\\test\\java\\org\\apache\\dubbo\\cache\\filter\\CacheFilterTest.java",
      "className": "CacheFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker4 = mock(Invoker.class);",
        "line": 47,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker4.invoke(invocation)).willReturn(AsyncRpcResult.newDefaultAsyncResult(invocation));",
        "line": 76,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker4.getUrl()).willReturn(url);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": []
        }
      },
      {
        "code": "cacheFilter.invoke(invoker4, invocation);",
        "line": 134,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNull",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      },
      {
        "code": "cacheFilter.invoke(invoker4, invocation);",
        "line": 135,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNull",
          "methodAnnotations": [
            "ParameterizedTest",
            "MethodSource"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker = mock(Invoker.class);",
        "line": 38,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 89,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> {\r\n    URL url = URL.valueOf(\"test://test:11/test?validation=true\");\r\n    given(validation.getValidator(url)).willThrow(new RpcException(\"rpc exception\"));\r\n    given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));\r\n    given(invoker.getUrl()).willReturn(url);\r\n    given(invocation.getMethodName()).willReturn(\"echo1\");\r\n    given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });\r\n    given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });\r\n    validationFilter.setValidation(validation);\r\n    validationFilter.invoke(invoker, invocation);\r\n});",
        "line": 120,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "validation",
    "variableType": "Validation",
    "mockedClass": "org.apache.dubbo.validation.Validation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "code": "private Validation validation = mock(Validation.class);",
        "line": 39,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(validation.getValidator(url)).willThrow(new IllegalStateException(\"Not found class test, cause: test\"));",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenThrow(java.lang.IllegalStateException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "validationFilter.setValidation(validation);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "validationFilter.setValidation(validation);",
        "line": 78,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "validationFilter.setValidation(validation);",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 105,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "validationFilter.setValidation(validation);",
        "line": 112,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> {\r\n    URL url = URL.valueOf(\"test://test:11/test?validation=true\");\r\n    given(validation.getValidator(url)).willThrow(new RpcException(\"rpc exception\"));\r\n    given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));\r\n    given(invoker.getUrl()).willReturn(url);\r\n    given(invocation.getMethodName()).willReturn(\"echo1\");\r\n    given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });\r\n    given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });\r\n    validationFilter.setValidation(validation);\r\n    validationFilter.invoke(invoker, invocation);\r\n});",
        "line": 120,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "validator",
    "variableType": "Validator",
    "mockedClass": "org.apache.dubbo.validation.Validator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "code": "private Validator validator = mock(Validator.class);",
        "line": 40,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(validation.getValidator(url)).willReturn(validator);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "RpcInvocation",
    "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.validation.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
      "className": "ValidationFilterTest"
    },
    "statements": [
      {
        "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
        "line": 41,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithNotExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithExistClass",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
        "line": 91,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 92,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWithoutUrlParameters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 106,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"$echo1\");",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testItWhileMethodNameStartWithDollar",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(RpcException.class, () -> {\r\n    URL url = URL.valueOf(\"test://test:11/test?validation=true\");\r\n    given(validation.getValidator(url)).willThrow(new RpcException(\"rpc exception\"));\r\n    given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));\r\n    given(invoker.getUrl()).willReturn(url);\r\n    given(invocation.getMethodName()).willReturn(\"echo1\");\r\n    given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });\r\n    given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });\r\n    validationFilter.setValidation(validation);\r\n    validationFilter.invoke(invoker, invocation);\r\n});",
        "line": 120,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testItWhileThrowoutRpcException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metadata\\dubbo-metadata-api\\src\\test\\java\\org\\apache\\dubbo\\metadata\\report\\MetadataReportInstanceTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 48,
        "type": "METHOD_SPY_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getApplicationModel()).thenReturn(applicationModel);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getScopeModel()).thenReturn(applicationModel);",
        "line": 58,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager().getApplicationOrElseThrow()).thenReturn(new ApplicationConfig(\"test\"));",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getCurrentConfig()).thenReturn(new ApplicationConfig(\"test\"));",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getCurrentConfig()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataReportConfig",
    "variableType": "MetadataReportConfig",
    "mockedClass": "org.apache.dubbo.config.MetadataReportConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metadata.report",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metadata\\dubbo-metadata-api\\src\\test\\java\\org\\apache\\dubbo\\metadata\\report\\MetadataReportInstanceTest.java",
      "className": "MetadataReportInstanceTest"
    },
    "statements": [
      {
        "code": "private MetadataReportConfig metadataReportConfig;",
        "line": 40,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metadataReportConfig = mock(MetadataReportConfig.class);",
        "line": 52,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getUsername()).thenReturn(\"username\");",
        "line": 53,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.getUsername()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getPassword()).thenReturn(\"password\");",
        "line": 54,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.getPassword()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getApplicationModel()).thenReturn(applicationModel);",
        "line": 56,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.getApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.toUrl()).thenReturn(url);",
        "line": 57,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.toUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getScopeModel()).thenReturn(applicationModel);",
        "line": 58,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.getScopeModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReportConfig.getRegistry()).thenReturn(registryId);",
        "line": 59,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.MetadataReportConfig.getRegistry()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "metadataReportInstance.init(Collections.singletonList(metadataReportConfig));",
        "line": 74,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(metadataReportConfig.getUsername(), \"username\");",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(metadataReportConfig.getPassword(), \"password\");",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "mockedClass": "org.apache.dubbo.config.context.ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metadata.report",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metadata\\dubbo-metadata-api\\src\\test\\java\\org\\apache\\dubbo\\metadata\\report\\MetadataReportInstanceTest.java",
      "className": "MetadataReportInstanceTest"
    },
    "statements": [
      {
        "code": "private ConfigManager configManager;",
        "line": 41,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "configManager = mock(ConfigManager.class);",
        "line": 47,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(configManager.getMetadataConfigs()).thenReturn(Collections.emptyList());",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getMetadataConfigs()).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pane",
    "variableType": "Pane<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-api\\src\\test\\java\\org\\apache\\dubbo\\metrics\\aggregate\\PaneTest.java"
    },
    "statements": [
      {
        "code": "Pane<?> pane = mock(Pane.class);",
        "line": 34,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntervalInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(pane.getIntervalInMs()).thenReturn(100L);",
        "line": 35,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metrics.aggregate.Pane<?>.getIntervalInMs()).thenReturn(long)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntervalInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(100L, pane.getIntervalInMs());",
        "line": 36,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIntervalInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pane",
    "variableType": "Pane<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-api\\src\\test\\java\\org\\apache\\dubbo\\metrics\\aggregate\\PaneTest.java"
    },
    "statements": [
      {
        "code": "Pane<?> pane = mock(Pane.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testStartInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(pane.getStartInMs()).thenReturn(startTime);",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metrics.aggregate.Pane<?>.getStartInMs()).thenReturn(long)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testStartInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(startTime, pane.getStartInMs());",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testStartInMs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pane",
    "variableType": "Pane<LongAdder>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-api\\src\\test\\java\\org\\apache\\dubbo\\metrics\\aggregate\\PaneTest.java"
    },
    "statements": [
      {
        "code": "Pane<LongAdder> pane = mock(Pane.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testValue",
          "methodAnnotations": [
            "Test",
            "SuppressWarnings"
          ]
        }
      },
      {
        "code": "when(pane.getValue()).thenReturn(count);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metrics.aggregate.Pane<java.util.concurrent.atomic.LongAdder>.getValue()).thenReturn(java.util.concurrent.atomic.LongAdder)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testValue",
          "methodAnnotations": [
            "Test",
            "SuppressWarnings"
          ]
        }
      },
      {
        "code": "assertEquals(count, pane.getValue());",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testValue",
          "methodAnnotations": [
            "Test",
            "SuppressWarnings"
          ]
        }
      },
      {
        "code": "when(pane.getValue()).thenReturn(null);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metrics.aggregate.Pane<java.util.concurrent.atomic.LongAdder>.getValue()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testValue",
          "methodAnnotations": [
            "Test",
            "SuppressWarnings"
          ]
        }
      },
      {
        "code": "assertNotEquals(count, pane.getValue());",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testValue",
          "methodAnnotations": [
            "Test",
            "SuppressWarnings"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-api\\src\\test\\java\\org\\apache\\dubbo\\metrics\\observation\\utils\\ObservationConventionUtils.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 33,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getMockInvokerWithUrl",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(url);",
        "line": 34,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getMockInvokerWithUrl",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = mock(ApplicationModel.class);",
        "line": 208,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 214,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 215,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 209,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 214,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getMetrics()).thenReturn(Optional.of(metricsConfig));",
        "line": 218,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getMetrics()).thenReturn(java.util.Optional<org.apache.dubbo.config.MetricsConfig>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metricsConfig",
    "variableType": "MetricsConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java"
    },
    "statements": [
      {
        "code": "MetricsConfig metricsConfig = mock(MetricsConfig.class);",
        "line": 210,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getMetrics()).thenReturn(Optional.of(metricsConfig));",
        "line": 218,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(metricsConfig.getAggregation()).thenReturn(aggregationConfig);",
        "line": 219,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "beanFactory",
    "variableType": "ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java"
    },
    "statements": [
      {
        "code": "ScopeBeanFactory beanFactory = mock(ScopeBeanFactory.class);",
        "line": 211,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 215,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBean(DefaultMetricsCollector.class)).thenReturn(defaultMetricsCollector);",
        "line": 217,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBean(java.lang.Class<org.apache.dubbo.metrics.collector.DefaultMetricsCollector>)).thenReturn(org.apache.dubbo.metrics.collector.DefaultMetricsCollector)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "aggregationConfig",
    "variableType": "AggregationConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java"
    },
    "statements": [
      {
        "code": "AggregationConfig aggregationConfig = mock(AggregationConfig.class);",
        "line": 212,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(metricsConfig.getAggregation()).thenReturn(aggregationConfig);",
        "line": 219,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(aggregationConfig.getEnabled()).thenReturn(Boolean.TRUE);",
        "line": 220,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.nested.AggregationConfig.getEnabled()).thenReturn(java.lang.Boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testQPS",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.collector.sample",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\sample\\ThreadPoolMetricsSamplerTest.java",
      "className": "ThreadPoolMetricsSamplerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate ApplicationModel applicationModel;",
        "line": 123,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(scopeBeanFactory);",
        "line": 148,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getExtensionLoader(DataStore.class)).thenReturn(extensionLoader);",
        "line": 149,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.common.store.DataStore>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.common.store.DataStore>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scopeBeanFactory",
    "variableType": "ScopeBeanFactory",
    "mockedClass": "org.apache.dubbo.common.beans.factory.ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.collector.sample",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\sample\\ThreadPoolMetricsSamplerTest.java",
      "className": "ThreadPoolMetricsSamplerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nScopeBeanFactory scopeBeanFactory;",
        "line": 126,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "when(scopeBeanFactory.getBean(FrameworkExecutorRepository.class)).thenReturn(new FrameworkExecutorRepository());",
        "line": 145,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBean(java.lang.Class<org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository>)).thenReturn(org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(scopeBeanFactory);",
        "line": 148,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(scopeBeanFactory.getBean(FrameworkExecutorRepository.class)).thenReturn(frameworkExecutorRepository);",
        "line": 188,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBean(java.lang.Class<org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository>)).thenReturn(org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDataSourceNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dataStore",
    "variableType": "DataStore",
    "mockedClass": "org.apache.dubbo.common.store.DataStore",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.collector.sample",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\sample\\ThreadPoolMetricsSamplerTest.java",
      "className": "ThreadPoolMetricsSamplerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate DataStore dataStore;",
        "line": 129,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "when(extensionLoader.getDefaultExtension()).thenReturn(dataStore);",
        "line": 150,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(dataStore.get(EXECUTOR_SERVICE_COMPONENT_KEY)).thenReturn(serverExecutors);",
        "line": 165,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.store.DataStore.get(java.lang.String)).thenReturn(java.util.Map<java.lang.String, java.lang.Object>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryDefaultSampleThreadPoolExecutor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(dataStore.get(CONSUMER_SHARED_EXECUTOR_SERVICE_COMPONENT_KEY)).thenReturn(clientExecutors);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.store.DataStore.get(java.lang.String)).thenReturn(java.util.Map<java.lang.String, java.lang.Object>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryDefaultSampleThreadPoolExecutor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(dataStore).addListener(captor.capture());",
        "line": 198,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDataSourceNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "frameworkExecutorRepository",
    "variableType": "FrameworkExecutorRepository",
    "mockedClass": "org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.collector.sample",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\sample\\ThreadPoolMetricsSamplerTest.java",
      "className": "ThreadPoolMetricsSamplerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate FrameworkExecutorRepository frameworkExecutorRepository;",
        "line": 132,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "when(frameworkExecutorRepository.getSharedExecutor()).thenReturn(Executors.newFixedThreadPool(5));",
        "line": 168,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository.getSharedExecutor()).thenReturn(java.util.concurrent.ExecutorService)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegistryDefaultSampleThreadPoolExecutor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(scopeBeanFactory.getBean(FrameworkExecutorRepository.class)).thenReturn(frameworkExecutorRepository);",
        "line": 188,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDataSourceNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(frameworkExecutorRepository.getSharedExecutor()).thenReturn(null);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.threadpool.manager.FrameworkExecutorRepository.getSharedExecutor()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDataSourceNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoader",
    "variableType": "ExtensionLoader<DataStore>",
    "mockedClass": "org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.common.store.DataStore>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.collector.sample",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\sample\\ThreadPoolMetricsSamplerTest.java",
      "className": "ThreadPoolMetricsSamplerTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate ExtensionLoader<DataStore> extensionLoader;",
        "line": 135,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "when(applicationModel.getExtensionLoader(DataStore.class)).thenReturn(extensionLoader);",
        "line": 149,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(extensionLoader.getDefaultExtension()).thenReturn(dataStore);",
        "line": 150,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.common.store.DataStore>.getDefaultExtension()).thenReturn(org.apache.dubbo.common.store.DataStore)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp2",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\DefaultMetricsServiceTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = Mockito.mock(ApplicationModel.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 52,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "beanFactory",
    "variableType": "ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\DefaultMetricsServiceTest.java"
    },
    "statements": [
      {
        "code": "ScopeBeanFactory beanFactory = Mockito.mock(ScopeBeanFactory.class);",
        "line": 49,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBeansOfType(MetricsCollector.class)).thenReturn(Collections.singletonList(metricsCollector));",
        "line": 53,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBeansOfType(java.lang.Class<org.apache.dubbo.metrics.collector.MetricsCollector>)).thenReturn(java.util.List<org.apache.dubbo.metrics.collector.MetricsCollector>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metricsCollector",
    "variableType": "MetricsCollector",
    "mockedClass": "org.apache.dubbo.metrics.collector.MetricsCollector",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\DefaultMetricsServiceTest.java",
      "className": "DefaultMetricsServiceTest"
    },
    "statements": [
      {
        "code": "private MetricsCollector metricsCollector;",
        "line": 42,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metricsCollector = Mockito.mock(MetricsCollector.class);",
        "line": 50,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBeansOfType(MetricsCollector.class)).thenReturn(Collections.singletonList(metricsCollector));",
        "line": 53,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metricsCollector.collect()).thenReturn(Collections.singletonList(sample));",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metrics.collector.MetricsCollector.collect()).thenReturn(java.util.List<org.apache.dubbo.metrics.model.sample.MetricSample>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetMetricsByCategories",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
      "className": "MetricsFilterTest"
    },
    "statements": [
      {
        "code": "private final Invoker<?> invoker = mock(Invoker.class);",
        "line": 68,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCollectDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.invoke(invoker, invocation);",
        "line": 108,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCollectDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(\"failed\"));",
        "line": 117,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownFailedRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
        "line": 144,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBusinessFailedRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
        "line": 172,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTimeoutRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION));",
        "line": 201,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLimitRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 225,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSucceedRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.onResponse(result, invoker, invocation);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSucceedRequests",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 248,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMissingGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.onResponse(result, invoker, invocation);",
        "line": 255,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMissingGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
        "line": 279,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testFilterError",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 313,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMissingVersion",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.onResponse(result, invoker, invocation);",
        "line": 320,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMissingVersion",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 336,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMissingGroupAndVersion",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.onResponse(result, invoker, invocation);",
        "line": 343,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMissingGroupAndVersion",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 359,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGenericCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "filter.onResponse(result, invoker, invocation);",
        "line": 370,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGenericCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 404,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testThrowable",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.observation",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\observation\\AbstractObservationFilterTest.java",
      "className": "AbstractObservationFilterTest"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = mock(Invoker.class);",
        "line": 40,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation.addInvokedInvoker(invoker);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setupConfig",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
        "line": 73,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setupConfig",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = spy(new ConfigManager(applicationModel));",
        "line": 333,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "configManager.setApplication(applicationConfig);",
        "line": 336,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "configManager.setMetrics(metricsConfig);",
        "line": 337,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 340,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(configManager.getApplication()).thenReturn(Optional.of(applicationConfig));",
        "line": 342,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplication()).thenReturn(java.util.Optional<org.apache.dubbo.config.ApplicationConfig>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "metricsConfig",
    "variableType": "MetricsConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java"
    },
    "statements": [
      {
        "code": "MetricsConfig metricsConfig = spy(new MetricsConfig());",
        "line": 334,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "configManager.setMetrics(metricsConfig);",
        "line": 337,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(metricsConfig.getAggregation()).thenReturn(new AggregationConfig());",
        "line": 339,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.registry.metrics.collector",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java",
      "className": "RegistryMetricsTest"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 340,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);",
        "line": 341,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.metrics.registry.metrics.collector",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java",
      "className": "RegistryMetricsTest"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 340,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);",
        "line": 341,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getTestCollector",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "mockMonitorFactory",
    "variableType": "MonitorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
        "line": 149,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
        "line": 150,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(mockMonitorFactory, never()).getMonitor(any(URL.class));",
        "line": 160,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 153,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880?\" + APPLICATION_KEY + \"=abc&\" + SIDE_KEY + \"=\" + CONSUMER_SIDE));",
        "line": 154,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "monitorFilter.invoke(invoker, invocation);",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSkipMonitorIfNotHasKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitorFactory",
    "variableType": "MonitorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
        "line": 202,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 207,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitor",
    "variableType": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "Monitor mockMonitor = mock(Monitor.class);",
        "line": 203,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.doThrow(new RuntimeException()).when(mockMonitor).collect(any(URL.class));",
        "line": 204,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).collect(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 207,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSafeFailForMonitorCollectFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitorFactory",
    "variableType": "MonitorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
        "line": 217,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnResponseWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
        "line": 219,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOnResponseWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 220,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnResponseWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitor",
    "variableType": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "Monitor mockMonitor = mock(Monitor.class);",
        "line": 218,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnResponseWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 220,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOnResponseWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitorFactory",
    "variableType": "MonitorFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
        "line": 233,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnErrorWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
        "line": 235,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOnErrorWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 236,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnErrorWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockMonitor",
    "variableType": "Monitor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java"
    },
    "statements": [
      {
        "code": "Monitor mockMonitor = mock(Monitor.class);",
        "line": 234,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOnErrorWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
        "line": 236,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testOnErrorWithoutStartTime",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "proxyFactory",
    "variableType": "ProxyFactory",
    "mockedClass": "org.apache.dubbo.rpc.ProxyFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.monitor.dubbo",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorFactoryTest.java",
      "className": "DubboMonitorFactoryTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate ProxyFactory proxyFactory;",
        "line": 43,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "this.dubboMonitorFactory.setProxyFactory(proxyFactory);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(proxyFactory, atLeastOnce()).getProxy(invokerArgumentCaptor.capture());",
        "line": 65,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCreateMonitor",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 210,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAvailable",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 213,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAvailable",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));",
        "line": 214,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAvailable",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(invoker).isAvailable();",
        "line": 218,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAvailable",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitorService",
    "variableType": "MonitorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "MonitorService monitorService = mock(MonitorService.class);",
        "line": 211,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAvailable",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 235,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));",
        "line": 238,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSum",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitorService",
    "variableType": "MonitorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "MonitorService monitorService = mock(MonitorService.class);",
        "line": 236,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(monitorService, atLeastOnce()).collect(summaryCaptor.capture());",
        "line": 256,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSum",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 272,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLookUp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(queryUrl);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLookUp",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "monitorService",
    "variableType": "MonitorService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java"
    },
    "statements": [
      {
        "code": "MonitorService monitorService = mock(MonitorService.class);",
        "line": 273,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLookUp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(monitorService).lookup(queryUrl);",
        "line": 281,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLookUp",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "helper",
    "variableType": "AccessKeyAuthenticator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
        "line": 52,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doCallRealMethod().when(helper).sign(invocation, url);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doCallRealMethod().when(null).sign(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "helper.sign(invocation, url);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "accessKeyPair",
    "variableType": "AccessKeyPair",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSignForRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "helper",
    "variableType": "AccessKeyAuthenticator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
        "line": 79,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doCallRealMethod().when(helper).authenticate(invocation, url);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doCallRealMethod().when(null).authenticate(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
        "line": 81,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertDoesNotThrow(() -> helper.authenticate(invocation, url));",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "accessKeyPair",
    "variableType": "AccessKeyPair",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
        "line": 84,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthenticateRequest",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 106,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetAccessKeyPairFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThrows(RuntimeException.class, () -> helper.getAccessKeyPair(invocation, url));",
        "line": 107,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetAccessKeyPairFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 112,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureNoParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 113,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureNoParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 122,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, false)).thenReturn(true);",
        "line": 123,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 124,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getArguments()).thenReturn(params);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getArguments()).thenReturn(fakeParams);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetSignatureWithParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "consumerSignFilter.invoke(invoker, invocation);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 42,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "consumerSignFilter.invoke(invoker, invocation);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(invocation, never()).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());",
        "line": 46,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 56,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "consumerSignFilter.invoke(invoker, invocation);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(Invocation.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "consumerSignFilter.invoke(invoker, invocation);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(invocation, times(1)).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());",
        "line": 61,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "URL url = mock(URL.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(url, never()).getParameter(eq(Constants.AUTHENTICATOR), eq(Constants.DEFAULT_AUTHENTICATOR));",
        "line": 51,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "providerAuthFilter.invoke(invoker, invocation);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 47,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "providerAuthFilter.invoke(invoker, invocation);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthDisabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 61,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "providerAuthFilter.invoke(invoker, invocation);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 62,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "providerAuthFilter.invoke(invoker, invocation);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(invocation, atLeastOnce()).getAttachment(anyString());",
        "line": 66,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthEnabled",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 76,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 77,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailed",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 93,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 96,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 94,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoSignature",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 108,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 109,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(\"dubbo\");",
        "line": 110,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 111,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 112,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(System.currentTimeMillis());",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(long)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenNoAccessKeyPair",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 136,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 144,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 137,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 138,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 139,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(currentTimeMillis);",
        "line": 140,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(long)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(method);",
        "line": 141,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getArguments()).thenReturn(fakeParams);",
        "line": 143,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthFailedWhenParameterError",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = mock(Invoker.class);",
        "line": 172,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 178,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 173,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
        "line": 174,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(method);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
        "line": 187,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAuthSuccessfully",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\decoder\\HttpCommandDecoderTest.java"
    },
    "statements": [
      {
        "code": "HttpRequest request = mock(HttpRequest.class);",
        "line": 41,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.uri()).thenReturn(\"localhost:80/test\");",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.method()).thenReturn(HttpMethod.GET);",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.method()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.uri()).thenReturn(\"localhost:80/test?a=b&c=d\");",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodeGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "request",
    "variableType": "FullHttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\decoder\\HttpCommandDecoderTest.java"
    },
    "statements": [
      {
        "code": "FullHttpRequest request = mock(FullHttpRequest.class);",
        "line": 54,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "decodePost",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.uri()).thenReturn(\"localhost:80/test\");",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodePost",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.method()).thenReturn(HttpMethod.POST);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.method()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodePost",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.headers()).thenReturn(HttpHeaders.EMPTY_HEADERS);",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.headers()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodePost",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(request.content()).thenReturn(buf);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.content()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "decodePost",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ChangeTelnetTest.java",
      "className": "ChangeTelnetTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 46,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 66,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 69,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.attr(ChangeTelnet.SERVICE_KEY).set(\"org.apache.dubbo.rpc.protocol.dubbo.support.DemoService\");",
        "line": 71,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockCommandContext, mockChannel, mockInvoker);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "afterEach",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ChangeTelnetTest.java",
      "className": "ChangeTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 65,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 72,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockCommandContext, mockChannel, mockInvoker);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "afterEach",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ChangeTelnetTest.java",
      "className": "ChangeTelnetTest"
    },
    "statements": [
      {
        "code": "private Invoker<DemoService> mockInvoker;",
        "line": 48,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockInvoker = mock(Invoker.class);",
        "line": 67,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:20884/demo?group=g&version=1.0.0\"));",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "beforeEach",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockCommandContext, mockChannel, mockInvoker);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "afterEach",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangeSimpleName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangeName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangePath",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 115,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangeServiceKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\CountTelnetTest.java",
      "className": "CountTelnetTest"
    },
    "statements": [
      {
        "code": "private Invoker<DemoService> mockInvoker;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockInvoker = mock(Invoker.class);",
        "line": 61,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getUrl()).willReturn(url);",
        "line": 66,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockInvoker, mockCommandContext);",
        "line": 74,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCountByServiceKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\CountTelnetTest.java",
      "className": "CountTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 52,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 62,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockInvoker, mockCommandContext);",
        "line": 74,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "count.execute(mockCommandContext, args);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "count.execute(mockCommandContext, args);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCountByServiceKey",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
      "className": "InvokeTelnetTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 58,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeDefaultService",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeDefaultService",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 99,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithSpecifyService",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithSpecifyService",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeByPassingNullValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 116,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeByPassingNullValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeByPassingEnumValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 136,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeByPassingEnumValue",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOverriddenMethodWithSpecifyParamType",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testOverriddenMethodWithSpecifyParamType",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 174,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 176,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_METHOD_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_METHOD_KEY));",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_METHOD_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY));",
        "line": 179,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
        "line": 181,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_MESSAGE_KEY));",
        "line": 183,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeOverriddenMethodBySelect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 211,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeMethodWithMapParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 213,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeMethodWithMapParameter",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 230,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeMultiJsonParamMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 232,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeMultiJsonParamMethod",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 249,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMessageNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 251,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMessageNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 267,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvalidMessage",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvalidMessage",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
      "className": "InvokeTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 48,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 59,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\PortTelnetTest.java",
      "className": "PortTelnetTest"
    },
    "statements": [
      {
        "code": "private Invoker<DemoService> mockInvoker;",
        "line": 45,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockInvoker = mock(Invoker.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 57,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:\" + availablePort + \"/demo\"));",
        "line": 58,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "frameworkModel.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockInvoker, mockCommandContext);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "afterEach",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\PortTelnetTest.java",
      "className": "PortTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 46,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 55,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "before",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockInvoker, mockCommandContext);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "afterEach",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\PwdTelnetTest.java",
      "className": "PwdTelnetTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 37,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 44,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 47,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.close();",
        "line": 54,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\PwdTelnetTest.java",
      "className": "PwdTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 38,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 45,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 46,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "manager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager manager = Mockito.mock(ConfigManager.class);",
        "line": 54,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(manager.getApplication()).thenReturn(Optional.of(new ApplicationConfig(\"ReadyTest\")));",
        "line": 55,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplication()).thenReturn(java.util.Optional<org.apache.dubbo.config.ApplicationConfig>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getApplicationConfigManager()).thenReturn(manager);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = Mockito.mock(ApplicationModel.class);",
        "line": 56,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.newApplication()).thenReturn(applicationModel);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getApplicationModels()).thenReturn(Arrays.asList(applicationModel));",
        "line": 61,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getModuleModels()).thenReturn(java.util.List<org.apache.dubbo.rpc.model.ModuleModel>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getApplicationConfigManager()).thenReturn(manager);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.mock(ModuleModel.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));",
        "line": 63,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getDeployer()).thenReturn(org.apache.dubbo.common.deploy.ModuleDeployer)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loader",
    "variableType": "ExtensionLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader loader = Mockito.mock(ExtensionLoader.class);",
        "line": 68,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getExtensionLoader(ReadinessProbe.class)).thenReturn(loader);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(loader.getActivateExtension(url, CommonConstants.QOS_READY_PROBE_EXTENSION)).thenReturn(readinessProbes);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.qos.probe.ReadinessProbe>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "frameworkModel",
    "variableType": "FrameworkModel",
    "mockedClass": "org.apache.dubbo.rpc.model.FrameworkModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java",
      "className": "ReadyTest"
    },
    "statements": [
      {
        "code": "private FrameworkModel frameworkModel;",
        "line": 46,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "frameworkModel = Mockito.mock(FrameworkModel.class);",
        "line": 52,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.newApplication()).thenReturn(applicationModel);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.newApplication()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getApplicationModels()).thenReturn(Arrays.asList(applicationModel));",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.getApplicationModels()).thenReturn(java.util.List<org.apache.dubbo.rpc.model.ApplicationModel>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getServiceRepository()).thenReturn(frameworkServiceRepository);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.getServiceRepository()).thenReturn(org.apache.dubbo.rpc.model.FrameworkServiceRepository)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getExtensionLoader(ReadinessProbe.class)).thenReturn(loader);",
        "line": 69,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.qos.probe.ReadinessProbe>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleDeployer",
    "variableType": "ModuleDeployer",
    "mockedClass": "org.apache.dubbo.common.deploy.ModuleDeployer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java",
      "className": "ReadyTest"
    },
    "statements": [
      {
        "code": "private ModuleDeployer moduleDeployer;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "moduleDeployer = Mockito.mock(ModuleDeployer.class);",
        "line": 58,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleDeployer.isStarted()).thenReturn(true);",
        "line": 66,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.deploy.ModuleDeployer.isStarted()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleDeployer.isStarted()).thenReturn(false);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.deploy.ModuleDeployer.isStarted()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecute",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "frameworkServiceRepository",
    "variableType": "FrameworkServiceRepository",
    "mockedClass": "org.apache.dubbo.rpc.model.FrameworkServiceRepository",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ReadyTest.java",
      "className": "ReadyTest"
    },
    "statements": [
      {
        "code": "private FrameworkServiceRepository frameworkServiceRepository;",
        "line": 48,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "frameworkServiceRepository = Mockito.mock(FrameworkServiceRepository.class);",
        "line": 53,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkServiceRepository.allProviderModels()).thenReturn(Collections.emptyList());",
        "line": 59,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkServiceRepository.allProviderModels()).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getServiceRepository()).thenReturn(frameworkServiceRepository);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SelectTelnetTest.java",
      "className": "SelectTelnetTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 49,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 69,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutMethodList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutMethodList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalMessage",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
        "line": 106,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithIllegalMessage",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
        "line": 129,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithNull",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SelectTelnetTest.java",
      "className": "SelectTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 50,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 70,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 71,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setup",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "commandContext1",
    "variableType": "CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeCheckStatusTest.java"
    },
    "statements": [
      {
        "code": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext1.isHttp()).thenReturn(false);",
        "line": 37,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext1, null).contains(\"Test1234\"));",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext1, null).contains(\"Test1234\"));",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext1, null).contains(\"Test4321\"));",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext1, null).contains(\"Test4321\"));",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext1, null).contains(\"CheckSerializable: false\"));",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext1, null).contains(\"CheckSerializable: false\"));",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext1, null).contains(\"CheckStatus: DISABLE\"));",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext1, null).contains(\"CheckStatus: DISABLE\"));",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "commandContext2",
    "variableType": "CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeCheckStatusTest.java"
    },
    "statements": [
      {
        "code": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
        "line": 38,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext2.isHttp()).thenReturn(true);",
        "line": 39,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext2, null).contains(\"Test1234\"));",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext2, null).contains(\"Test1234\"));",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext2, null).contains(\"Test4321\"));",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext2, null).contains(\"Test4321\"));",
        "line": 58,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext2, null).contains(\"\\\"checkSerializable\\\":false\"));",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext2, null).contains(\"\\\"checkSerializable\\\":false\"));",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeCheckStatus.execute(commandContext2, null).contains(\"\\\"checkStatus\\\":\\\"DISABLE\\\"\"));",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeCheckStatus.execute(commandContext2, null).contains(\"\\\"checkStatus\\\":\\\"DISABLE\\\"\"));",
        "line": 78,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNotify",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "commandContext1",
    "variableType": "CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeWarnedClassesTest.java"
    },
    "statements": [
      {
        "code": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext1.isHttp()).thenReturn(false);",
        "line": 37,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeWarnedClasses.execute(commandContext1, null).contains(\"Test1234\"));",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeWarnedClasses.execute(commandContext1, null).contains(\"Test1234\"));",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeWarnedClasses.execute(commandContext1, null).contains(\"Test4321\"));",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeWarnedClasses.execute(commandContext1, null).contains(\"Test4321\"));",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "commandContext2",
    "variableType": "CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeWarnedClassesTest.java"
    },
    "statements": [
      {
        "code": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
        "line": 38,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext2.isHttp()).thenReturn(true);",
        "line": 39,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeWarnedClasses.execute(commandContext2, null).contains(\"Test1234\"));",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeWarnedClasses.execute(commandContext2, null).contains(\"Test1234\"));",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(serializeWarnedClasses.execute(commandContext2, null).contains(\"Test4321\"));",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(serializeWarnedClasses.execute(commandContext2, null).contains(\"Test4321\"));",
        "line": 58,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockCommandContext",
    "variableType": "CommandContext",
    "mockedClass": "org.apache.dubbo.qos.api.CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\ShutdownTelnetTest.java",
      "className": "ShutdownTelnetTest"
    },
    "statements": [
      {
        "code": "private CommandContext mockCommandContext;",
        "line": 38,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockCommandContext = mock(CommandContext.class);",
        "line": 43,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
        "line": 45,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(org.apache.dubbo.qos.api.CommandContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockCommandContext);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = Mockito.mock(ApplicationModel.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.newApplication()).thenReturn(applicationModel);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getApplicationModels()).thenReturn(Arrays.asList(applicationModel));",
        "line": 54,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));",
        "line": 55,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getModuleModels()).thenReturn(java.util.List<org.apache.dubbo.rpc.model.ModuleModel>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getApplicationConfigManager()).thenReturn(manager);",
        "line": 56,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.mock(ModuleModel.class);",
        "line": 49,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getModuleModels()).thenReturn(Arrays.asList(moduleModel));",
        "line": 55,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);",
        "line": 57,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getDeployer()).thenReturn(org.apache.dubbo.common.deploy.ModuleDeployer)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "manager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager manager = Mockito.mock(ConfigManager.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(manager.getApplication()).thenReturn(Optional.of(new ApplicationConfig(\"ReadyTest\")));",
        "line": 51,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplication()).thenReturn(java.util.Optional<org.apache.dubbo.config.ApplicationConfig>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(applicationModel.getApplicationConfigManager()).thenReturn(manager);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "loader",
    "variableType": "ExtensionLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader loader = Mockito.mock(ExtensionLoader.class);",
        "line": 60,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getExtensionLoader(StartupProbe.class)).thenReturn(loader);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(loader.getActivateExtension(url, CommonConstants.QOS_STARTUP_PROBE_EXTENSION)).thenReturn(readinessProbes);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.qos.probe.StartupProbe>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "frameworkModel",
    "variableType": "FrameworkModel",
    "mockedClass": "org.apache.dubbo.rpc.model.FrameworkModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java",
      "className": "StartupTest"
    },
    "statements": [
      {
        "code": "private FrameworkModel frameworkModel;",
        "line": 42,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "frameworkModel = Mockito.mock(FrameworkModel.class);",
        "line": 47,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.newApplication()).thenReturn(applicationModel);",
        "line": 53,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.newApplication()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getApplicationModels()).thenReturn(Arrays.asList(applicationModel));",
        "line": 54,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.getApplicationModels()).thenReturn(java.util.List<org.apache.dubbo.rpc.model.ApplicationModel>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(frameworkModel.getExtensionLoader(StartupProbe.class)).thenReturn(loader);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.FrameworkModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.qos.probe.StartupProbe>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleDeployer",
    "variableType": "ModuleDeployer",
    "mockedClass": "org.apache.dubbo.common.deploy.ModuleDeployer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.command.impl",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\StartupTest.java",
      "className": "StartupTest"
    },
    "statements": [
      {
        "code": "private ModuleDeployer moduleDeployer;",
        "line": 43,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "moduleDeployer = Mockito.mock(ModuleDeployer.class);",
        "line": 52,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getDeployer()).thenReturn(moduleDeployer);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleDeployer.isRunning()).thenReturn(true);",
        "line": 58,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.deploy.ModuleDeployer.isRunning()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleDeployer.isRunning()).thenReturn(false);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.deploy.ModuleDeployer.isRunning()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecute",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerModel",
    "variableType": "ConsumerModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\util\\ServiceCheckUtilsTest.java"
    },
    "statements": [
      {
        "code": "ConsumerModel consumerModel = Mockito.mock(ConsumerModel.class);",
        "line": 84,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerModel.getServiceMetadata()).thenReturn(serviceMetadata);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ConsumerModel.getServiceMetadata()).thenReturn(org.apache.dubbo.rpc.model.ServiceMetadata)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(\"zookeeper-A(5)/zookeeper-AF(I-10,A-0)/nacos-I(10)\", ServiceCheckUtils.getConsumerAddressNum(consumerModel));",
        "line": 149,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceMetadata",
    "variableType": "ServiceMetadata",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\util\\ServiceCheckUtilsTest.java"
    },
    "statements": [
      {
        "code": "ServiceMetadata serviceMetadata = Mockito.mock(ServiceMetadata.class);",
        "line": 85,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerModel.getServiceMetadata()).thenReturn(serviceMetadata);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceMetadata.getAttribute(\"currentClusterInvoker\")).thenReturn(invokerMap);",
        "line": 147,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ServiceMetadata.getAttribute(java.lang.String)).thenReturn(java.util.Map<org.apache.dubbo.registry.Registry, org.apache.dubbo.registry.client.migration.MigrationInvoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetConsumerAddressNum",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "org.apache.dubbo.remoting.Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.legacy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\ChangeTelnetHandlerTest.java",
      "className": "ChangeTelnetHandlerTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 46,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 55,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockChannel.getAttribute(\"telnet.service\")).willReturn(\"org.apache.dubbo.rpc.protocol.dubbo.support.DemoService\");",
        "line": 57,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.setAttribute(\"telnet.service\", \"DemoService\");",
        "line": 59,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.setAttribute(\"telnet.service\", \"org.apache.dubbo.rpc.protocol.dubbo.support.DemoService\");",
        "line": 61,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.setAttribute(\"telnet.service\", \"demo\");",
        "line": 63,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "mockChannel.removeAttribute(\"telnet.service\");",
        "line": 65,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockInvoker);",
        "line": 76,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.legacy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\ChangeTelnetHandlerTest.java",
      "className": "ChangeTelnetHandlerTest"
    },
    "statements": [
      {
        "code": "private Invoker<DemoService> mockInvoker;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockInvoker = mock(Invoker.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 67,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:20884/demo\"));",
        "line": 68,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "SuppressWarnings",
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockInvoker);",
        "line": 76,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "after",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 81,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangeSimpleName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangeName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 101,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChangePath",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "org.apache.dubbo.remoting.Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.legacy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\LogTelnetHandlerTest.java",
      "className": "LogTelnetHandlerTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 34,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 38,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testChangeLogLevel",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 48,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPrintLog",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockChannel",
    "variableType": "Channel",
    "mockedClass": "org.apache.dubbo.remoting.Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.legacy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\TraceTelnetHandlerTest.java",
      "className": "TraceTelnetHandlerTest"
    },
    "statements": [
      {
        "code": "private Channel mockChannel;",
        "line": 46,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockChannel = mock(Channel.class);",
        "line": 53,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockInvoker);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "handler.telnet(mockChannel, message);",
        "line": 74,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTraceTelnetAddTracer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(channels.contains(mockChannel));",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTraceTelnetAddTracer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.legacy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\TraceTelnetHandlerTest.java",
      "className": "TraceTelnetHandlerTest"
    },
    "statements": [
      {
        "code": "private Invoker<DemoService> mockInvoker;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockInvoker = mock(Invoker.class);",
        "line": 54,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 55,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getUrl()).willReturn(url);",
        "line": 56,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "reset(mockChannel, mockInvoker);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(DubboProtocol.NAME).export(mockInvoker);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTraceTelnetAddTracer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "socketAddress",
    "variableType": "InetSocketAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java"
    },
    "statements": [
      {
        "code": "InetSocketAddress socketAddress = Mockito.mock(InetSocketAddress.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(socketAddress.getAddress()).thenReturn(inetAddress);",
        "line": 38,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetSocketAddress.getAddress()).thenReturn(java.net.InetAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.remoteAddress()).thenReturn(socketAddress);",
        "line": 40,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(socketAddress.getAddress()).thenReturn(inetAddress);",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetSocketAddress.getAddress()).thenReturn(java.net.InetAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 39,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.remoteAddress()).thenReturn(socketAddress);",
        "line": 40,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getRemote()).thenReturn(channel);",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "commandContext",
    "variableType": "CommandContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java"
    },
    "statements": [
      {
        "code": "CommandContext commandContext = Mockito.mock(CommandContext.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getRemote()).thenReturn(channel);",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getRemote()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getQosConfiguration()).thenReturn(qosConfiguration);",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getQosConfiguration()).thenReturn(org.apache.dubbo.qos.api.QosConfiguration)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 74,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 75,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 79,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 80,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 81,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 82,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getCommandName()).thenReturn(\"test1\");",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getCommandName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 91,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getCommandName()).thenReturn(\"test2\");",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getCommandName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 96,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 97,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getCommandName()).thenReturn(\"test\");",
        "line": 99,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.getCommandName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(checker.access(commandContext, PermissionLevel.NONE));",
        "line": 100,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PUBLIC));",
        "line": 101,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PROTECTED));",
        "line": 102,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(checker.access(commandContext, PermissionLevel.PRIVATE));",
        "line": 103,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "qosConfiguration",
    "variableType": "QosConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java"
    },
    "statements": [
      {
        "code": "QosConfiguration qosConfiguration = Mockito.mock(QosConfiguration.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.PUBLIC);",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(org.apache.dubbo.qos.api.PermissionLevel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> false);",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(java.util.function.Predicate<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(commandContext.getQosConfiguration()).thenReturn(qosConfiguration);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.PROTECTED);",
        "line": 64,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(org.apache.dubbo.qos.api.PermissionLevel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(PermissionLevel.NONE);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAnonymousAccessPermissionLevel()).thenReturn(org.apache.dubbo.qos.api.PermissionLevel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> true);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(java.util.function.Predicate<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(ip -> false);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAcceptForeignIpWhitelistPredicate()).thenReturn(java.util.function.Predicate<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(qosConfiguration.getAnonymousAllowCommands()).thenReturn(\"test1,test2\");",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.qos.api.QosConfiguration.getAnonymousAllowCommands()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPermission",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "mockedClass": "org.apache.dubbo.common.URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private URL url = Mockito.mock(URL.class);",
        "line": 44,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(url.getParameter(QOS_ENABLE, true)).thenReturn(true);",
        "line": 58,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(url.getParameter(QOS_HOST)).thenReturn(\"localhost\");",
        "line": 59,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(url.getParameter(QOS_PORT, 22222)).thenReturn(12345);",
        "line": 60,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, int)).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(url.getParameter(ACCEPT_FOREIGN_IP, \"false\")).thenReturn(\"false\");",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(url.getProtocol()).thenReturn(REGISTRY_PROTOCOL);",
        "line": 62,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getProtocol()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "wrapper.refer(BaseCommand.class, url);",
        "line": 102,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRefer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker = mock(Invoker.class);",
        "line": 45,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "wrapper.export(invoker);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testExport",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// next registry protocol server still acceptForeignIp=true even though wrapper invoker url set false\r\nwrapper.export(invoker);",
        "line": 121,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocol",
    "variableType": "Protocol",
    "mockedClass": "org.apache.dubbo.rpc.Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private Protocol protocol = mock(Protocol.class);",
        "line": 46,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "verify(protocol).export(invoker);",
        "line": 97,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExport",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(protocol).refer(BaseCommand.class, url);",
        "line": 107,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRefer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(protocol).export(invoker);",
        "line": 126,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "triUrl",
    "variableType": "URL",
    "mockedClass": "org.apache.dubbo.common.URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private URL triUrl = Mockito.mock(URL.class);",
        "line": 49,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "// url2 use tri protocol and qos.accept.foreign.ip=true\r\nwhen(triUrl.getParameter(QOS_ENABLE, true)).thenReturn(true);",
        "line": 69,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(triUrl.getParameter(QOS_HOST)).thenReturn(\"localhost\");",
        "line": 70,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(triUrl.getParameter(QOS_PORT, 22222)).thenReturn(12345);",
        "line": 71,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, int)).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(triUrl.getParameter(ACCEPT_FOREIGN_IP, \"false\")).thenReturn(\"true\");",
        "line": 72,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(triUrl.getProtocol()).thenReturn(CommonConstants.TRIPLE);",
        "line": 73,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getProtocol()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(triInvoker.getUrl()).thenReturn(triUrl);",
        "line": 74,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "triInvoker",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private Invoker triInvoker = mock(Invoker.class);",
        "line": 50,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(triInvoker.getUrl()).thenReturn(triUrl);",
        "line": 74,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "// tri protocol start first, acceptForeignIp = true\r\ntriWrapper.export(triInvoker);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "triProtocol",
    "variableType": "Protocol",
    "mockedClass": "org.apache.dubbo.rpc.Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.qos.protocol",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
      "className": "QosProtocolWrapperTest"
    },
    "statements": [
      {
        "code": "private Protocol triProtocol = mock(Protocol.class);",
        "line": 51,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "verify(triProtocol).export(triInvoker);",
        "line": 118,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 45,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.handlerAdded(context);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 61,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 46,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 47,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.remoteAddress()).thenReturn(address);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "addr",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "InetAddress addr = mock(InetAddress.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 52,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 65,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 70,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.handlerAdded(context);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 88,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 71,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.remoteAddress()).thenReturn(address);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "addr",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "InetAddress addr = mock(InetAddress.class);",
        "line": 73,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.getHostAddress()).thenReturn(\"179.23.44.1\");",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 78,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 92,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 97,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 99,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.handlerAdded(context);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context, never()).writeAndFlush(any());",
        "line": 111,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 98,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 99,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.remoteAddress()).thenReturn(address);",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "addr",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "InetAddress addr = mock(InetAddress.class);",
        "line": 100,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.getHostAddress()).thenReturn(\"175.23.44.1\");",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 116,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.handlerAdded(context);",
        "line": 129,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context, never()).writeAndFlush(any());",
        "line": 130,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 117,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 118,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.remoteAddress()).thenReturn(address);",
        "line": 123,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "addr",
    "variableType": "InetAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "InetAddress addr = mock(InetAddress.class);",
        "line": 119,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
        "line": 120,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(addr.getHostAddress()).thenReturn(\"192.168.1.199\");",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 136,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.channel()).thenReturn(channel);",
        "line": 138,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 140,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.handlerAdded(context);",
        "line": 147,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 139,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
        "line": 140,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future, never()).addListener(ChannelFutureListener.CLOSE);",
        "line": 148,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 43,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 53,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 44,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 51,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 46,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(message.uri()).thenReturn(\"test\");",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test1",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 60,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 74,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 61,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 72,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 63,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(message.uri()).thenReturn(\"localhost:80/greeting\");",
        "line": 64,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(message.method()).thenReturn(HttpMethod.GET);",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.method()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 81,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 83,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 95,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 82,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 93,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "message",
    "variableType": "HttpRequest",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
        "line": 84,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(message.uri()).thenReturn(\"localhost:80/test\");",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(message.method()).thenReturn(HttpMethod.GET);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.method()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, message);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
        "line": 44,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.pipeline()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.decode(context, buf, Collections.emptyList());",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pipeline",
    "variableType": "ChannelPipeline",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
        "line": 45,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(HttpServerCodec.class));",
        "line": 55,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(HttpObjectAggregator.class));",
        "line": 56,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(HttpProcessHandler.class));",
        "line": 57,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).remove(handler);",
        "line": 58,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeHttp",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
        "line": 64,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
        "line": 66,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.pipeline()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.decode(context, buf, Collections.emptyList());",
        "line": 74,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "pipeline",
    "variableType": "ChannelPipeline",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
        "line": 65,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(LineBasedFrameDecoder.class));",
        "line": 75,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(StringDecoder.class));",
        "line": 76,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(StringEncoder.class));",
        "line": 77,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).addLast(any(TelnetProcessHandler.class));",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(pipeline).remove(handler);",
        "line": 79,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 40,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPrompt",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, \"\");",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testPrompt",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(QosProcessHandler.PROMPT);",
        "line": 47,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testPrompt",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 52,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(\"BYE!\\n\")).thenReturn(future);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(java.lang.String)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, \"quit\");",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelFuture future = mock(ChannelFuture.class);",
        "line": 55,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(context.writeAndFlush(\"BYE!\\n\")).thenReturn(future);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
        "line": 58,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testBye",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 63,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnknownCommand",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, \"unknown\");",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnknownCommand",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context, Mockito.atLeastOnce()).writeAndFlush(captor.capture());",
        "line": 68,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnknownCommand",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "context",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
        "line": 74,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGreeting",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(context, \"greeting\");",
        "line": 80,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGreeting",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(context).writeAndFlush(captor.capture());",
        "line": 82,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGreeting",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "scheduledFuture",
    "variableType": "ScheduledFuture",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-security\\src\\test\\java\\org\\apache\\dubbo\\security\\cert\\DubboCertManagerTest.java"
    },
    "statements": [
      {
        "code": "ScheduledFuture scheduledFuture = Mockito.mock(ScheduledFuture.class);",
        "line": 154,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDisconnect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(scheduledFuture, Mockito.times(1)).cancel(true);",
        "line": 158,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDisconnect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
        "line": 362,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 363,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener);",
        "line": 366,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
        "line": 374,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());",
        "line": 388,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
        "line": 364,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 365,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener);",
        "line": 367,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
        "line": 378,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());",
        "line": 392,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService3Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
        "line": 397,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
        "line": 398,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
        "line": 399,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
        "line": 400,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
        "line": 410,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 411,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener1);",
        "line": 418,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
        "line": 428,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());",
        "line": 442,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 412,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 413,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener2);",
        "line": 419,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
        "line": 414,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 415,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener1);",
        "line": 420,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
        "line": 432,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());",
        "line": 446,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
        "line": 416,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 417,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener2);",
        "line": 421,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService3Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
        "line": 451,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
        "line": 452,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
        "line": 453,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
        "line": 454,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
        "line": 467,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
        "line": 468,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
        "line": 469,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());",
        "line": 486,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 471,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
        "line": 472,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
        "line": 473,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());",
        "line": 491,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener3",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
        "line": 475,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
        "line": 476,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
        "line": 477,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());",
        "line": 496,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscovery",
    "variableType": "ServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
        "line": 688,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "spyListener",
    "variableType": "ServiceInstancesChangedListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java"
    },
    "statements": [
      {
        "code": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);",
        "line": 690,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "spyListener.onEvent(event);",
        "line": 693,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataService",
    "variableType": "MetadataService",
    "mockedClass": "org.apache.dubbo.metadata.MetadataService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
      "className": "ServiceInstancesChangedListenerTest"
    },
    "statements": [
      {
        "code": "static MetadataService metadataService;",
        "line": 131,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metadataService = Mockito.mock(MetadataService.class);",
        "line": 140,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));",
        "line": 691,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscovery",
    "variableType": "ServiceDiscovery",
    "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
      "className": "ServiceInstancesChangedListenerTest"
    },
    "statements": [
      {
        "code": "static ServiceDiscovery serviceDiscovery;",
        "line": 133,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
        "line": 183,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
        "line": 184,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
        "line": 186,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
        "line": 187,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
        "line": 188,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
        "line": 189,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
        "line": 190,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "serviceDiscovery.destroy();",
        "line": 211,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "destroy",
          "methodAnnotations": [
            "AfterAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});",
        "line": 646,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRevisionFailureOnNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
        "line": 361,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 362,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener);",
        "line": 365,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
        "line": 373,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());",
        "line": 387,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
        "line": 363,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 364,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener);",
        "line": 366,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
        "line": 377,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());",
        "line": 391,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService3Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
        "line": 396,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
        "line": 397,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
        "line": 398,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
        "line": 399,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
        "line": 409,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 410,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener1);",
        "line": 417,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
        "line": 427,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());",
        "line": 441,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 411,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
        "line": 412,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL, demoServiceListener2);",
        "line": 418,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
        "line": 413,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 414,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener1);",
        "line": 419,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
        "line": 431,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());",
        "line": 445,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService2Listener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
        "line": 415,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
        "line": 416,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL2, demoService2Listener2);",
        "line": 420,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoService3Listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
        "line": 450,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
        "line": 451,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
        "line": 452,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
        "line": 453,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMultiServiceListenerNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener1",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
        "line": 466,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
        "line": 467,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
        "line": 468,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());",
        "line": 485,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
        "line": 470,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
        "line": 471,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
        "line": 472,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());",
        "line": 490,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "demoServiceListener3",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
        "line": 474,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
        "line": 475,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
        "line": 476,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());",
        "line": 495,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultipleProtocols",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscovery",
    "variableType": "ServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
        "line": 687,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "spyListener",
    "variableType": "ServiceInstancesChangedListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java"
    },
    "statements": [
      {
        "code": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);",
        "line": 689,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      },
      {
        "code": "spyListener.onEvent(event);",
        "line": 692,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataService",
    "variableType": "MetadataService",
    "mockedClass": "org.apache.dubbo.metadata.MetadataService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
      "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest"
    },
    "statements": [
      {
        "code": "static MetadataService metadataService;",
        "line": 130,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metadataService = Mockito.mock(MetadataService.class);",
        "line": 139,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));",
        "line": 690,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInstanceWithoutRevision",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscovery",
    "variableType": "ServiceDiscovery",
    "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
      "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest"
    },
    "statements": [
      {
        "code": "static ServiceDiscovery serviceDiscovery;",
        "line": 132,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
        "line": 182,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
        "line": 183,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
        "line": 185,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
        "line": 186,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
        "line": 187,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
        "line": 188,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
        "line": 189,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      },
      {
        "code": "serviceDiscovery.destroy();",
        "line": 210,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "destroy",
          "methodAnnotations": [
            "AfterAll"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});",
        "line": 645,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRevisionFailureOnNotification",
          "methodAnnotations": [
            "Test",
            "Order"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\InstanceAddressURLTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.mock(ModuleModel.class);",
        "line": 191,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "RpcServiceContext.getServiceContext().setConsumerUrl(URL.valueOf(\"\").setScopeModel(moduleModel));",
        "line": 192,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(moduleModel, instanceURL.getScopeModel());",
        "line": 193,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedApplicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel mockedApplicationModel = spy(applicationModel);",
        "line": 77,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(mockedApplicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(mockedApplicationModel.getCurrentConfig()).thenReturn(new ApplicationConfig(\"test\"));",
        "line": 81,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getCurrentConfig()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// metadata report config not found\r\nmapping.setApplicationModel(mockedApplicationModel);",
        "line": 84,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "reportInstance",
    "variableType": "MetadataReportInstance",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java"
    },
    "statements": [
      {
        "code": "MetadataReportInstance reportInstance = mock(MetadataReportInstance.class);",
        "line": 89,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(reportInstance.getMetadataReports(true)).thenReturn(metadataReportList);",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReportInstance.getMetadataReports(boolean)).thenReturn(java.util.Map<java.lang.String, org.apache.dubbo.metadata.report.MetadataReport>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "reportInstance",
    "variableType": "MetadataReportInstance",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java"
    },
    "statements": [
      {
        "code": "MetadataReportInstance reportInstance = mock(MetadataReportInstance.class);",
        "line": 131,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(reportInstance.getMetadataReport(any())).thenReturn(metadataReport);",
        "line": 132,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReportInstance.getMetadataReport(T)).thenReturn(org.apache.dubbo.metadata.report.MetadataReport)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "mockedClass": "org.apache.dubbo.config.context.ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.metadata",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java",
      "className": "MetadataServiceNameMappingTest"
    },
    "statements": [
      {
        "code": "private ConfigManager configManager;",
        "line": 54,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "configManager = mock(ConfigManager.class);",
        "line": 62,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(configManager.getMetadataConfigs()).thenReturn(Collections.emptyList());",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getMetadataConfigs()).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(mockedApplicationModel.getApplicationConfigManager()).thenReturn(configManager);",
        "line": 80,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getMetadataConfigs()).thenReturn(Arrays.asList(new MetadataReportConfig()));",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getMetadataConfigs()).thenReturn(java.util.List<org.apache.dubbo.config.MetadataReportConfig>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataReport",
    "variableType": "MetadataReport",
    "mockedClass": "org.apache.dubbo.metadata.report.MetadataReport",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.metadata",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java",
      "className": "MetadataServiceNameMappingTest"
    },
    "statements": [
      {
        "code": "private MetadataReport metadataReport;",
        "line": 55,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metadataReport = mock(MetadataReport.class);",
        "line": 63,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "metadataReportList.put(\"default\", metadataReport);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(metadataReport.registerServiceAppMapping(any(), any(), any())).thenReturn(true);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.registerServiceAppMapping(T, T, T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// metadata report using cas and retry, succeeded after retried 10 times\r\nwhen(metadataReport.registerServiceAppMapping(any(), any(), any())).thenReturn(false);",
        "line": 100,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.registerServiceAppMapping(T, T, T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(metadataReport.getConfigItem(any(), any())).thenReturn(new ConfigItem());",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.getConfigItem(T, T)).thenReturn(org.apache.dubbo.common.config.configcenter.ConfigItem)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(metadataReport.registerServiceAppMapping(any(), any(), any(), any())).thenAnswer(new Answer<Boolean>() {\r\n\r\n    private int counter = 0;\r\n\r\n    @Override\r\n    public Boolean answer(InvocationOnMock invocationOnMock) {\r\n        if (++counter == 10) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n});",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.registerServiceAppMapping(T, T, T, T)).thenAnswer(org.mockito.stubbing.Answer<java.lang.Boolean>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// metadata report using cas and retry, failed after 11 times retry\r\nwhen(metadataReport.registerServiceAppMapping(any(), any(), any(), any())).thenReturn(false);",
        "line": 117,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.registerServiceAppMapping(T, T, T, T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMap",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(reportInstance.getMetadataReport(any())).thenReturn(metadataReport);",
        "line": 132,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(metadataReport.getServiceAppMapping(any(), any())).thenReturn(set);",
        "line": 133,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.report.MetadataReport.getServiceAppMapping(T, T)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockedMetadataService",
    "variableType": "MetadataService",
    "mockedClass": "org.apache.dubbo.metadata.MetadataService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.metadata",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ProtocolPortsMetadataCustomizerTest.java",
      "className": "ProtocolPortsMetadataCustomizerTest"
    },
    "statements": [
      {
        "code": "private MetadataService mockedMetadataService;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "mockedMetadataService = Mockito.mock(MetadataService.class);",
        "line": 76,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "beanFactory",
    "variableType": "ScopeBeanFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceHostPortCustomizerTest.java"
    },
    "statements": [
      {
        "code": "ScopeBeanFactory beanFactory = mock(ScopeBeanFactory.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBean(MetadataService.class)).thenReturn(metadataService);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.beans.factory.ScopeBeanFactory.getBean(java.lang.Class<org.apache.dubbo.metadata.MetadataService>)).thenReturn(org.apache.dubbo.metadata.MetadataService)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataService",
    "variableType": "MetadataService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceHostPortCustomizerTest.java"
    },
    "statements": [
      {
        "code": "MetadataService metadataService = mock(MetadataService.class);",
        "line": 58,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(beanFactory.getBean(MetadataService.class)).thenReturn(metadataService);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceHostPortCustomizerTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 60,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// when(applicationModel.getCurrentConfig()).thenReturn(applicationConfig);\r\ndoReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
        "line": 66,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceInstanceHostPortCustomizer.customize(serviceInstance1, applicationModel);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceInstanceHostPortCustomizer.customize(serviceInstance1, applicationModel);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "customizePreferredProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceMetadataCustomizerTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 52,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustomizeWithIncludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustomizeWithIncludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceInstanceMetadataCustomizer.customize(serviceInstance1, applicationModel);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCustomizeWithIncludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceMetadataCustomizerTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 75,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustomizeWithExcludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustomizeWithExcludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceInstanceMetadataCustomizer.customize(serviceInstance1, applicationModel);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCustomizeWithExcludeFilters",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "newInvoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker newInvoker = Mockito.mock(ClusterInvoker.class);",
        "line": 43,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.getDirectory()).thenReturn(newDirectory);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.getUrl()).thenReturn(url);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(false);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(true);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, null));",
        "line": 84,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "// hasProxyInvokers will check if invokers list is empty\r\n// if hasProxyInvokers return true, comparator will directly because default threshold is 0.0\r\nAssertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, null));",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "oldInvoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker oldInvoker = Mockito.mock(ClusterInvoker.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.getDirectory()).thenReturn(oldDirectory);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.getUrl()).thenReturn(url);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(false);",
        "line": 64,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(true);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, null));",
        "line": 84,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "// hasProxyInvokers will check if invokers list is empty\r\n// if hasProxyInvokers return true, comparator will directly because default threshold is 0.0\r\nAssertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, null));",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "newDirectory",
    "variableType": "Directory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "Directory newDirectory = Mockito.mock(Directory.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.getDirectory()).thenReturn(newDirectory);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(newInvokerList);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "oldDirectory",
    "variableType": "Directory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "Directory oldDirectory = Mockito.mock(Directory.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.getDirectory()).thenReturn(oldDirectory);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(oldInvokerList);",
        "line": 82,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "rule",
    "variableType": "MigrationRule",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "MigrationRule rule = Mockito.mock(MigrationRule.class);",
        "line": 47,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getThreshold(url)).thenReturn(0.5f);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(org.apache.dubbo.common.URL)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertFalse(comparator.shouldMigrate(newInvoker, oldInvoker, rule));",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(newInvoker.getUrl()).thenReturn(url);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(oldInvoker.getUrl()).thenReturn(url);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getThreshold(url)).thenReturn(0.5f);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryProtocol",
    "variableType": "RegistryProtocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
        "line": 60,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
        "line": 62,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
        "line": 68,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
        "line": 86,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
        "line": 100,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);",
        "line": 111,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(2)).invoke(null);",
        "line": 128,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(3)).invoke(null);",
        "line": 135,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(4)).invoke(null);",
        "line": 140,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(5)).invoke(null);",
        "line": 146,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(6)).invoke(null);",
        "line": 170,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(7)).invoke(null);",
        "line": 192,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(27)).invoke(null);",
        "line": 213,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.atLeast(28)).invoke(null);",
        "line": 225,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscoveryInvoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
        "line": 63,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
        "line": 69,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
        "line": 116,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);",
        "line": 122,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(3)).invoke(null);",
        "line": 152,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(4)).invoke(null);",
        "line": 157,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(5)).invoke(null);",
        "line": 163,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(6)).invoke(null);",
        "line": 175,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(7)).invoke(null);",
        "line": 181,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(27)).invoke(null);",
        "line": 204,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(false);",
        "line": 207,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
        "line": 216,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.atMost(1026)).invoke(null);",
        "line": 224,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "directory",
    "variableType": "DynamicDirectory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
        "line": 65,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);",
        "line": 83,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscoveryDirectory",
    "variableType": "DynamicDirectory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
        "line": 66,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryDirectory, Mockito.atLeastOnce()).setInvokersChangedListener(argument.capture());",
        "line": 196,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 92,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 94,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 96,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 97,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 98,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
        "line": 100,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
        "line": 101,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRule",
    "variableType": "MigrationRule",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
        "line": 106,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 108,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
        "line": 119,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
        "line": 124,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
        "line": 125,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
        "line": 130,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
        "line": 131,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 132,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 137,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
        "line": 142,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 143,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
        "line": 148,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 149,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 154,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
        "line": 159,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 160,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
        "line": 165,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 167,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 172,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
        "line": 177,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 178,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
        "line": 184,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
        "line": 185,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
        "line": 188,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 189,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
        "line": 198,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
        "line": 199,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getProportion(Mockito.any())).thenReturn(50);",
        "line": 219,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getProportion(T)).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.setMigrationRule(migrationRule);",
        "line": 220,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getDelay(Mockito.any())).thenReturn(1);",
        "line": 227,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getDelay(T)).thenReturn(int)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
        "line": 229,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryProtocol",
    "variableType": "RegistryProtocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
        "line": 236,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
        "line": 262,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
        "line": 264,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
        "line": 238,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
        "line": 244,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
        "line": 247,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
        "line": 250,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
        "line": 262,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
        "line": 276,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);",
        "line": 291,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscoveryInvoker",
    "variableType": "ClusterInvoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
        "line": 239,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
        "line": 245,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
        "line": 248,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
        "line": 251,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
        "line": 264,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
        "line": 277,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
        "line": 287,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(false);",
        "line": 289,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
        "line": 293,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);",
        "line": 295,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "directory",
    "variableType": "DynamicDirectory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
        "line": 241,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
        "line": 244,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscoveryDirectory",
    "variableType": "DynamicDirectory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
        "line": 242,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
        "line": 245,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);",
        "line": 260,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 268,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
        "line": 269,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
        "line": 270,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
        "line": 271,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
        "line": 272,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
        "line": 273,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 274,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
        "line": 276,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
        "line": 277,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRule",
    "variableType": "MigrationRule",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
        "line": 282,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
        "line": 283,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
        "line": 284,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDecide",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "MigrationClusterInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleHandlerTest.java"
    },
    "statements": [
      {
        "code": "MigrationClusterInvoker<?> invoker = Mockito.mock(MigrationClusterInvoker.class);",
        "line": 31,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.migrateToForceApplicationInvoker(Mockito.any())).thenReturn(true);",
        "line": 38,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.MigrationClusterInvoker<?>.migrateToForceApplicationInvoker(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.migrateToForceInterfaceInvoker(Mockito.any())).thenReturn(true);",
        "line": 39,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.MigrationClusterInvoker<?>.migrateToForceInterfaceInvoker(T)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).migrateToApplicationFirstInvoker(initRule);",
        "line": 43,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).migrateToForceApplicationInvoker(rule);",
        "line": 48,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).migrateToApplicationFirstInvoker(rule);",
        "line": 52,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(invoker, Mockito.times(1)).migrateToForceInterfaceInvoker(rule);",
        "line": 56,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// migration failed, current rule not changed\r\ntestMigrationFailed(rule, url, handler, invoker);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// rule not changed, check migration not actually executed\r\ntestMigrationWithStepUnchanged(rule, url, handler, invoker);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleHandlerTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 32,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
        "line": 33,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i -> i.getArgument(1));",
        "line": 34,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(T, java.lang.String)).thenAnswer(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
        "line": 35,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.FORCE_APPLICATION);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.APPLICATION_FIRST);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.FORCE_INTERFACE);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// migration failed, current rule not changed\r\ntestMigrationFailed(rule, url, handler, invoker);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// rule not changed, check migration not actually executed\r\ntestMigrationWithStepUnchanged(rule, url, handler, invoker);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "rule",
    "variableType": "MigrationRule",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleHandlerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRule rule = Mockito.mock(MigrationRule.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.FORCE_APPLICATION);",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getStep(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.client.migration.model.MigrationStep)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.doMigrate(rule);",
        "line": 47,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.APPLICATION_FIRST);",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getStep(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.client.migration.model.MigrationStep)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.doMigrate(rule);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(rule.getStep(url)).thenReturn(MigrationStep.FORCE_INTERFACE);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getStep(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.client.migration.model.MigrationStep)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.doMigrate(rule);",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// migration failed, current rule not changed\r\ntestMigrationFailed(rule, url, handler, invoker);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// rule not changed, check migration not actually executed\r\ntestMigrationWithStepUnchanged(rule, url, handler, invoker);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dynamicConfiguration",
    "variableType": "DynamicConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "DynamicConfiguration dynamicConfiguration = Mockito.mock(DynamicConfiguration.class);",
        "line": 87,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ApplicationModel.defaultModel().getDefaultModule().modelEnvironment().setDynamicConfiguration(dynamicConfiguration);",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 99,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 100,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "//        Mockito.verify(handler, Mockito.timeout(5000)).doMigrate(Mockito.any());\r\nmigrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 130,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "MigrationRuleHandler<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
        "line": 104,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 122,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "await().untilAsserted(() -> {\r\n    Mockito.verify(handler).doMigrate(Mockito.any());\r\n});",
        "line": 125,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());",
        "line": 131,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationInvoker",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
        "line": 121,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 122,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "//        Mockito.verify(handler, Mockito.timeout(5000)).doMigrate(Mockito.any());\r\nmigrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 130,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 145,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 146,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 147,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 157,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "MigrationRuleHandler<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
        "line": 150,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 156,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// check migration happened after invoker referred\r\nMockito.verify(handler, Mockito.times(1)).doMigrate(MigrationRule.getInitRule());",
        "line": 159,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationInvoker",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
        "line": 155,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 156,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 157,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithInitAndNoLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dynamicConfiguration",
    "variableType": "DynamicConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "DynamicConfiguration dynamicConfiguration = Mockito.mock(DynamicConfiguration.class);",
        "line": 174,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.doReturn(remoteRule).when(dynamicConfiguration).getConfig(Mockito.anyString(), Mockito.anyString());",
        "line": 175,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(java.lang.String).when(null).getConfig(java.lang.String, java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "ApplicationModel.defaultModel().getDefaultModule().modelEnvironment().setDynamicConfiguration(dynamicConfiguration);",
        "line": 177,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL = Mockito.mock(URL.class);",
        "line": 186,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
        "line": 187,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
        "line": 188,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 211,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "consumerURL2",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "URL consumerURL2 = Mockito.mock(URL.class);",
        "line": 190,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL2.getServiceKey()).thenReturn(\"Test2\");",
        "line": 191,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(consumerURL2.getParameter(\"timestamp\")).thenReturn(\"2\");",
        "line": 192,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker2, consumerURL2, null);",
        "line": 225,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "MigrationRuleHandler<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
        "line": 195,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// Remote rule will be applied when onRefer gets executed\r\nmigrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).doMigrate(captor.capture());",
        "line": 215,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).doMigrate(Mockito.any());",
        "line": 221,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "await().untilAsserted(() -> {\r\n    Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());\r\n    Mockito.verify(handler2, Mockito.times(2)).doMigrate(Mockito.any());\r\n});",
        "line": 232,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(2)).doMigrate(captor_event.capture());",
        "line": 239,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler2",
    "variableType": "MigrationRuleHandler<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleHandler<?> handler2 = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
        "line": 197,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker2, handler2);",
        "line": 224,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler2, Mockito.times(1)).doMigrate(captor2.capture());",
        "line": 226,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "await().untilAsserted(() -> {\r\n    Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());\r\n    Mockito.verify(handler2, Mockito.times(2)).doMigrate(Mockito.any());\r\n});",
        "line": 232,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler2, Mockito.times(2)).doMigrate(captor_event.capture());",
        "line": 242,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationInvoker",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
        "line": 206,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// Remote rule will be applied when onRefer gets executed\r\nmigrationRuleListener.getHandlers().put(migrationInvoker, handler);",
        "line": 210,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker, consumerURL, null);",
        "line": 211,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationInvoker2",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> migrationInvoker2 = Mockito.mock(MigrationInvoker.class);",
        "line": 207,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.getHandlers().put(migrationInvoker2, handler2);",
        "line": 224,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "migrationRuleListener.onRefer(null, migrationInvoker2, consumerURL2, null);",
        "line": 225,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testWithConfigurationListenerAndLocalRule",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\model\\MigrationRuleTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 77,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getScopeModel()).thenReturn(defaultModel);",
        "line": 81,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getScopeModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"DemoService:1.0.0\");",
        "line": 82,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
        "line": 83,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(0.5f, migrationRule.getThreshold(url));",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(30, migrationRule.getProportion(url));",
        "line": 91,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(30, migrationRule.getDelay(url));",
        "line": 92,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertTrue(migrationRule.getForce(url));",
        "line": 93,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(MigrationStep.APPLICATION_FIRST, migrationRule.getStep(url));",
        "line": 94,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.0\");",
        "line": 96,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(1.0f, migrationRule.getThreshold(url));",
        "line": 97,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(60, migrationRule.getProportion(url));",
        "line": 98,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(60, migrationRule.getDelay(url));",
        "line": 99,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(migrationRule.getForce(url));",
        "line": 100,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(MigrationStep.FORCE_APPLICATION, migrationRule.getStep(url));",
        "line": 101,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.1\");",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getServiceInterface()).thenReturn(\"GreetingService\");",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(0.3f, migrationRule.getThreshold(url));",
        "line": 110,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(20, migrationRule.getProportion(url));",
        "line": 111,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(10, migrationRule.getDelay(url));",
        "line": 112,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertFalse(migrationRule.getForce(url));",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(MigrationStep.FORCE_INTERFACE, migrationRule.getStep(url));",
        "line": 114,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "defaultModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\model\\MigrationRuleTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel defaultModel = Mockito.spy(ApplicationModel.defaultModel());",
        "line": 78,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(defaultModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getDefaultExtension(java.lang.Class<org.apache.dubbo.metadata.ServiceNameMapping>)).thenReturn(org.apache.dubbo.metadata.ServiceNameMapping)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(url.getScopeModel()).thenReturn(defaultModel);",
        "line": 81,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mapping",
    "variableType": "ServiceNameMapping",
    "mockedClass": "org.apache.dubbo.metadata.ServiceNameMapping",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client.migration.model",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\model\\MigrationRuleTest.java",
      "className": "MigrationRuleTest"
    },
    "statements": [
      {
        "code": "private static final ServiceNameMapping mapping = mock(ServiceNameMapping.class);",
        "line": 41,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(mapping.getMapping(any(URL.class))).thenReturn(Collections.emptySet());",
        "line": 45,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.ServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(defaultModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 79,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(mapping.getRemoteMapping(any(URL.class))).thenReturn(Collections.singleton(\"TestApplication\"));",
        "line": 105,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.ServiceNameMapping.getRemoteMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(mapping.getMapping(any(URL.class))).thenReturn(services);",
        "line": 109,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.ServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(mapping.getMapping(any(URL.class))).thenReturn(Collections.emptySet());",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.ServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test_parse",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockServiceDiscovery",
    "variableType": "MockServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryCacheTest.java"
    },
    "statements": [
      {
        "code": "MockServiceDiscovery mockServiceDiscovery = Mockito.spy(new MockServiceDiscovery(applicationModel, registryUrl));",
        "line": 104,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUpdateWhenFirstDoRegisterFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "mockServiceDiscovery.register(URL.valueOf(\"mock://127.0.0.1:12345\").setServiceInterface(\"org.apache.dubbo.registry.service.DemoService\"));",
        "line": 107,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUpdateWhenFirstDoRegisterFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.doThrow(new RuntimeException()).when(mockServiceDiscovery).doRegister(Mockito.any(ServiceInstance.class));",
        "line": 111,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).doRegister(org.apache.dubbo.registry.client.ServiceInstance)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUpdateWhenFirstDoRegisterFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.doNothing().when(mockServiceDiscovery).doRegister(Mockito.any(ServiceInstance.class));",
        "line": 117,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doNothing().when(null).doRegister(org.apache.dubbo.registry.client.ServiceInstance)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUpdateWhenFirstDoRegisterFail",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 109,
        "type": "METHOD_SPY_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 110,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getDefaultExtension(java.lang.Class<org.apache.dubbo.metadata.ServiceNameMapping>)).thenReturn(org.apache.dubbo.metadata.AbstractServiceNameMapping)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "applicationModel",
    "variableType": "ApplicationModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java"
    },
    "statements": [
      {
        "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
        "line": 127,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getDefaultExtension(java.lang.Class<org.apache.dubbo.metadata.ServiceNameMapping>)).thenReturn(org.apache.dubbo.metadata.AbstractServiceNameMapping)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "multiAppsInstanceListener",
    "variableType": "MockServiceInstancesChangedListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java"
    },
    "statements": [
      {
        "code": "MockServiceInstancesChangedListener multiAppsInstanceListener = spy(new MockServiceInstancesChangedListener(multiApps, serviceDiscovery));",
        "line": 200,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doNothing().when(multiAppsInstanceListener).onEvent(any());",
        "line": 202,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doNothing().when(null).onEvent(T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doReturn(urls).when(multiAppsInstanceListener).getAddresses(any(), any());",
        "line": 205,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(java.util.List<org.apache.dubbo.common.URL>).when(null).getAddresses(T, T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.createListener(multiApps)).thenReturn(multiAppsInstanceListener);",
        "line": 206,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(multiAppsInstanceListener, serviceDiscoveryRegistry.getServiceListeners().get(toStringKeys(multiApps)));",
        "line": 214,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(multiAppsInstanceListener, times(2)).onEvent(any());",
        "line": 218,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(multiAppsInstanceListener, times(1)).addListenerAndNotify(any(), eq(testServiceListener));",
        "line": 219,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(multiAppsInstanceListener, serviceDiscoveryRegistry.getServiceListeners().get(toStringKeys(multiApps)));",
        "line": 232,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(multiAppsInstanceListener, times(1)).addListenerAndNotify(any(), eq(testServiceListener));",
        "line": 235,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java"
    },
    "statements": [
      {
        "code": "// different interface mapping to the same apps\r\nNotifyListener testServiceListener2 = mock(NotifyListener.class);",
        "line": 226,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
        "line": 228,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.subscribeURLs(url2, testServiceListener2, multiApps);",
        "line": 229,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertTrue(serviceListeners.get(url2.getServiceKey()).contains(new ServiceInstancesChangedListener.NotifyListenerWithKey(protocolServiceKey, testServiceListener2)));",
        "line": 246,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testServiceListener2",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener testServiceListener2 = mock(NotifyListener.class);",
        "line": 266,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
        "line": 268,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.subscribeURLs(url2, testServiceListener2, multiApps);",
        "line": 270,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.doUnsubscribe(url2, testServiceListener2);",
        "line": 275,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mapping",
    "variableType": "AbstractServiceNameMapping",
    "mockedClass": "org.apache.dubbo.metadata.AbstractServiceNameMapping",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "code": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
        "line": 69,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 110,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(mapping.getMappingLock(any())).thenReturn(lock);",
        "line": 114,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// Exceptional case, no interface-app mapping found\r\nwhen(mapping.getAndListen(any(), any(), any())).thenReturn(Collections.emptySet());",
        "line": 130,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(mapping.getAndListen(any(), any(), any())).thenReturn(singleApp);",
        "line": 158,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// do unsubscribe\r\nwhen(mapping.getMapping(url2)).thenReturn(multiApps);",
        "line": 274,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(mapping.getMapping(url)).thenReturn(multiApps);",
        "line": 284,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "testServiceListener",
    "variableType": "NotifyListener",
    "mockedClass": "org.apache.dubbo.registry.NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "code": "private static NotifyListener testServiceListener = mock(NotifyListener.class);",
        "line": 76,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(testServiceListener.getConsumerUrl()).thenReturn(url);",
        "line": 115,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.subscribeURLs(url, testServiceListener, singleApp);",
        "line": 189,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(testServiceListener, times(1)).addServiceListener(instanceListener);",
        "line": 192,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.subscribeURLs(url, testServiceListener, multiApps);",
        "line": 209,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(testServiceListener, times(1)).addServiceListener(multiAppsInstanceListener);",
        "line": 217,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(testServiceListener).notify(captor.capture());",
        "line": 222,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.subscribeURLs(url, testServiceListener, multiApps);",
        "line": 269,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "serviceDiscoveryRegistry.doUnsubscribe(url, testServiceListener);",
        "line": 285,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnsubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDiscovery",
    "variableType": "ServiceDiscovery",
    "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "code": "private ServiceDiscovery serviceDiscovery;",
        "line": 82,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "serviceDiscovery = mock(ServiceDiscovery.class);",
        "line": 103,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.createListener(any())).thenReturn(instanceListener);",
        "line": 106,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.createListener(T)).thenReturn(org.apache.dubbo.registry.client.ServiceDiscovery)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getInstances(any())).thenReturn(Collections.emptyList());",
        "line": 107,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getInstances(T)).thenReturn(java.util.List<T>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getUrl()).thenReturn(url);",
        "line": 108,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(serviceDiscovery, times(1)).addServiceInstancesChangedListener(instanceListener);",
        "line": 194,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.createListener(multiApps)).thenReturn(multiAppsInstanceListener);",
        "line": 206,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.createListener(java.util.Set<java.lang.String>)).thenReturn(org.apache.dubbo.registry.client.ServiceDiscovery)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getInstances(APP_NAME1)).thenReturn(instanceList1);",
        "line": 207,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getInstances(java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.client.ServiceInstance>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.getInstances(APP_NAME2)).thenReturn(instanceList2);",
        "line": 208,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getInstances(java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.client.ServiceInstance>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(serviceDiscovery, times(1)).addServiceInstancesChangedListener(multiAppsInstanceListener);",
        "line": 220,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// still called once, not executed this time\r\nverify(serviceDiscovery, times(2)).addServiceInstancesChangedListener(multiAppsInstanceListener);",
        "line": 237,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "instanceListener",
    "variableType": "MockServiceInstancesChangedListener",
    "mockedClass": "MockServiceInstancesChangedListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.client",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
      "className": "ServiceDiscoveryRegistryTest"
    },
    "statements": [
      {
        "code": "private MockServiceInstancesChangedListener instanceListener;",
        "line": 83,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "instanceListener = spy(new MockServiceInstancesChangedListener(Collections.emptySet(), serviceDiscovery));",
        "line": 104,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "doNothing().when(instanceListener).onEvent(any());",
        "line": 105,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "doNothing().when(MockServiceInstancesChangedListener).onEvent(T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(serviceDiscovery.createListener(any())).thenReturn(instanceListener);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(instanceListener, never()).onEvent(any());",
        "line": 193,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertEquals(instanceListener, serviceDiscoveryRegistry.getServiceListeners().get(toStringKeys(singleApp)));",
        "line": 212,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeURLs",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\DynamicDirectoryTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 118,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "demoDynamicDirectory.setRegistry(registry);",
        "line": 119,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(registry, times(1)).subscribe(subscribeUrl, demoDynamicDirectory);",
        "line": 123,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 83,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 86,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 104,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 125,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 105,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 125,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRuleListener",
    "variableType": "MigrationRuleListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
        "line": 109,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocolListeners.add(migrationRuleListener);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 113,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 114,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 119,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader<RegistryProtocolListener>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 118,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 119,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cluster",
    "variableType": "Cluster",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Cluster cluster = mock(Cluster.class);",
        "line": 127,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithoutProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 151,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 154,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 172,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 193,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 175,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 193,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRuleListener",
    "variableType": "MigrationRuleListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
        "line": 177,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocolListeners.add(migrationRuleListener);",
        "line": 179,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 181,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 182,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 187,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader<RegistryProtocolListener>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 186,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 187,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cluster",
    "variableType": "Cluster",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Cluster cluster = mock(Cluster.class);",
        "line": 195,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConsumerUrlWithProtocol",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 222,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 223,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 225,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 226,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 241,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 260,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 263,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 242,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 263,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRuleListener",
    "variableType": "MigrationRuleListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
        "line": 244,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocolListeners.add(migrationRuleListener);",
        "line": 246,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 249,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 250,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 255,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 259,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 254,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 255,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 257,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 259,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 260,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithoutGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 288,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 289,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 291,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 292,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 308,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 327,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 330,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 309,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 330,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRuleListener",
    "variableType": "MigrationRuleListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
        "line": 311,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocolListeners.add(migrationRuleListener);",
        "line": 313,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 316,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 317,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 322,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 326,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 321,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 322,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 324,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 326,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 327,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testReferWithGroup",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 357,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 358,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 360,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 361,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clusterInvoker",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);",
        "line": 377,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl);",
        "line": 408,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "migrationRuleListener",
    "variableType": "MigrationRuleListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
        "line": 391,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocolListeners.add(migrationRuleListener);",
        "line": 393,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(migrationRuleListener, times(1)).onRefer(registryProtocol, clusterInvoker, consumerUrl, url);",
        "line": 409,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 396,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 397,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 402,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader<RegistryProtocolListener>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 401,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 402,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 404,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForMigrationRuleListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 423,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 424,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 426,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 427,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "clusterInvoker",
    "variableType": "MigrationInvoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);",
        "line": 445,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryProtocol.interceptInvoker(clusterInvoker, url, consumerUrl);",
        "line": 475,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 463,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 464,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 469,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader<RegistryProtocolListener>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 468,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
        "line": 469,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
        "line": 471,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "configManager",
    "variableType": "ConfigManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ConfigManager configManager = mock(ConfigManager.class);",
        "line": 489,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
        "line": 490,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "compositeConfiguration",
    "variableType": "CompositeConfiguration",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
        "line": 492,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
        "line": 493,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 510,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 520,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 525,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 511,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
        "line": 525,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(registry, times(1)).register(registeredConsumerUrl);",
        "line": 548,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "moduleModel",
    "variableType": "ModuleModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
        "line": 513,
        "type": "METHOD_SPY_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
        "line": 514,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 519,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "extensionLoaderMock",
    "variableType": "ExtensionLoader",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
        "line": 518,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
        "line": 519,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
        "line": 520,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "cluster",
    "variableType": "Cluster",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java"
    },
    "statements": [
      {
        "code": "Cluster cluster = mock(Cluster.class);",
        "line": 527,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterConsumerUrl",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registryFactory",
    "variableType": "RegistryFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java"
    },
    "statements": [
      {
        "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
        "line": 58,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(url)).thenReturn(registry);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java"
    },
    "statements": [
      {
        "code": "Registry registry = mock(Registry.class);",
        "line": 59,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(registryFactory.getRegistry(url)).thenReturn(registry);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "notifyListener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener notifyListener = mock(NotifyListener.class);",
        "line": 60,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "registryWrapper.subscribe(subscribeUrl, notifyListener);",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "RegistryServiceListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java"
    },
    "statements": [
      {
        "code": "RegistryServiceListener listener = Mockito.mock(RegistryServiceListener.class);",
        "line": 70,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(listener, times(1)).onSubscribe(subscribeUrl, registry);",
        "line": 74,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener1",
    "variableType": "RegistryServiceListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\RegistryFactoryWrapperTest.java"
    },
    "statements": [
      {
        "code": "RegistryServiceListener listener1 = Mockito.mock(RegistryServiceListener.class);",
        "line": 31,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener1, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
        "line": 41,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener1, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
        "line": 45,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener1, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
        "line": 49,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener1, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);",
        "line": 53,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener2",
    "variableType": "RegistryServiceListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\RegistryFactoryWrapperTest.java"
    },
    "statements": [
      {
        "code": "RegistryServiceListener listener2 = Mockito.mock(RegistryServiceListener.class);",
        "line": 33,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener2, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
        "line": 42,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener2, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
        "line": 46,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener2, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
        "line": 50,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(listener2, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);",
        "line": 54,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "registry",
    "variableType": "Registry",
    "mockedClass": "org.apache.dubbo.registry.Registry",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\SimpleRegistryFactory.java",
      "className": "SimpleRegistryFactory"
    },
    "statements": [
      {
        "code": "static Registry registry = Mockito.mock(Registry.class);",
        "line": 24,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "connectionManager",
    "variableType": "NacosConnectionManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingService",
    "variableType": "NamingService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NamingService namingService = Mockito.mock(NamingService.class);",
        "line": 41,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
        "line": 48,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
        "line": 51,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
        "line": 54,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
        "line": 57,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
        "line": 60,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connectionManager",
    "variableType": "NacosConnectionManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
        "line": 65,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService1);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService2);",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingService1",
    "variableType": "NamingService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NamingService namingService1 = Mockito.mock(NamingService.class);",
        "line": 66,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService1);",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService1, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
        "line": 74,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService1, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
        "line": 81,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
        "line": 84,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService1, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
        "line": 87,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingService2",
    "variableType": "NamingService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NamingService namingService2 = Mockito.mock(NamingService.class);",
        "line": 67,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService2);",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingService2, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
        "line": 88,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribeMultiManager",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceList",
    "variableType": "List<NamingService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "List<NamingService> namingServiceList = new LinkedList<>();",
        "line": 93,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 103,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 112,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(2, namingServiceList.size());",
        "line": 118,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 119,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
        "line": 120,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(3, namingServiceList.size());",
        "line": 126,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 127,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
        "line": 128,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
        "line": 129,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
        "line": 132,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
        "line": 136,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 140,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_0_x",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceList",
    "variableType": "List<NamingService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "List<NamingService> namingServiceList = new LinkedList<>();",
        "line": 146,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 163,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 172,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(2, namingServiceList.size());",
        "line": 178,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 179,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
        "line": 180,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(3, namingServiceList.size());",
        "line": 186,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 187,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
        "line": 188,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
        "line": 189,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
        "line": 192,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
        "line": 196,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
        "line": 201,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
        "line": 203,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
        "line": 208,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
        "line": 210,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 214,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceList",
    "variableType": "List<NamingService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "List<NamingService> namingServiceList = new LinkedList<>();",
        "line": 220,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 239,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 245,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
        "line": 246,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 256,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
        "line": 257,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
        "line": 264,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 271,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 278,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
        "line": 279,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 286,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
        "line": 287,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
        "line": 294,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 301,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 308,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 312,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 317,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 320,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
        "line": 321,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 328,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
        "line": 329,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
        "line": 336,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 343,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 350,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
        "line": 351,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 358,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
        "line": 359,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
        "line": 366,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 373,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 380,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 384,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceList",
    "variableType": "List<NamingService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "List<NamingService> namingServiceList = new LinkedList<>();",
        "line": 390,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 400,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 409,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 415,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
        "line": 416,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 426,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
        "line": 427,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
        "line": 435,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 443,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 450,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
        "line": 451,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 458,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
        "line": 459,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
        "line": 468,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 476,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 484,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
        "line": 489,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 492,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
        "line": 493,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 500,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
        "line": 501,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
        "line": 508,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 515,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 522,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
        "line": 523,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, namingServiceList.size());",
        "line": 530,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
        "line": 531,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
        "line": 538,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
        "line": 545,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
        "line": 552,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnregister",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connectionManager",
    "variableType": "NacosConnectionManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java"
    },
    "statements": [
      {
        "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
        "line": 558,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConcurrency",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
        "line": 563,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConcurrency",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener listener = mock(NotifyListener.class);",
        "line": 189,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nacosRegistry.subscribe(serviceUrl, listener);",
        "line": 190,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener listener = mock(NotifyListener.class);",
        "line": 229,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nacosRegistry.subscribe(serviceUrl, listener);",
        "line": 230,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nacosRegistry.unsubscribe(serviceUrl, listener);",
        "line": 236,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener listener = mock(NotifyListener.class);",
        "line": 300,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsConformRules",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nacosRegistry.subscribe(serviceUrlWithWildcard, listener);",
        "line": 301,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsConformRules",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nacosRegistry.subscribe(serviceUrlWithOutWildcard, listener);",
        "line": 302,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsConformRules",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceWrapper",
    "variableType": "NacosNamingServiceWrapper",
    "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.nacos",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
      "className": "NacosServiceDiscoveryTest"
    },
    "statements": [
      {
        "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
        "line": 70,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
        "line": 127,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 144,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 164,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoUnRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
        "line": 180,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceWrapper",
    "variableType": "NacosNamingServiceWrapper",
    "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.nacos",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
      "className": "NacosServiceDiscoveryTest"
    },
    "statements": [
      {
        "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
        "line": 70,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
        "line": 127,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 144,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 164,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoUnRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
        "line": 180,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceWrapper",
    "variableType": "NacosNamingServiceWrapper",
    "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.nacos",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
      "className": "NacosServiceDiscoveryTest"
    },
    "statements": [
      {
        "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
        "line": 70,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
        "line": 127,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 144,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 164,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoUnRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
        "line": 180,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "namingServiceWrapper",
    "variableType": "NacosNamingServiceWrapper",
    "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.nacos",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
      "className": "NacosServiceDiscoveryTest"
    },
    "statements": [
      {
        "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
        "line": 70,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
        "line": 127,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 144,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
        "line": 164,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDoUnRegister",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
        "line": 180,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
        "line": 189,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testGetServices",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceInstance",
    "variableType": "ServiceInstance",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\util\\NacosNamingServiceUtilsTest.java"
    },
    "statements": [
      {
        "code": "ServiceInstance serviceInstance = mock(ServiceInstance.class);",
        "line": 53,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testToInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "metadataReport",
    "variableType": "MetadataReport",
    "mockedClass": "org.apache.dubbo.metadata.report.MetadataReport",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.nacos.util",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\util\\NacosNamingServiceUtilsTest.java",
      "className": "NacosNamingServiceUtilsTest"
    },
    "statements": [
      {
        "code": "private static MetadataReport metadataReport = Mockito.mock(MetadataReport.class);",
        "line": 49,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "metadataReport",
    "variableType": "MetadataReport",
    "mockedClass": "org.apache.dubbo.metadata.report.MetadataReport",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.registry.zookeeper.util",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-zookeeper\\src\\test\\java\\org\\apache\\dubbo\\registry\\zookeeper\\util\\CuratorFrameworkUtilsTest.java",
      "className": "CuratorFrameworkUtilsTest"
    },
    "statements": [
      {
        "code": "private static MetadataReport metadataReport;",
        "line": 47,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "metadataReport = Mockito.mock(MetadataReport.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeAll"
          ]
        }
      }
    ]
  },
  {
    "variableName": "listener",
    "variableType": "NotifyListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-zookeeper\\src\\test\\java\\org\\apache\\dubbo\\registry\\zookeeper\\ZookeeperRegistryTest.java"
    },
    "statements": [
      {
        "code": "NotifyListener listener = mock(NotifyListener.class);",
        "line": 92,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "zookeeperRegistry.subscribe(serviceUrl, listener);",
        "line": 93,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "zookeeperRegistry.unsubscribe(serviceUrl, listener);",
        "line": 99,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSubscribe",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "exchangeServer",
    "variableType": "ExchangeServer",
    "mockedClass": "org.apache.dubbo.remoting.exchange.ExchangeServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.exchange",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\MockExchanger.java",
      "className": "MockExchanger"
    },
    "statements": [
      {
        "code": "private ExchangeServer exchangeServer = Mockito.mock(ExchangeServer.class);",
        "line": 25,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "exchangeClient",
    "variableType": "ExchangeClient",
    "mockedClass": "org.apache.dubbo.remoting.exchange.ExchangeClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.exchange",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\MockExchanger.java",
      "className": "MockExchanger"
    },
    "statements": [
      {
        "code": "private ExchangeClient exchangeClient = Mockito.mock(ExchangeClient.class);",
        "line": 26,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "channelHandler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
        "line": 35,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.addChannelHandler(channelHandler);",
        "line": 38,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelHandler, Mockito.times(1)).connected(channel);",
        "line": 55,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelHandler, Mockito.times(1)).disconnected(channel);",
        "line": 56,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelHandler, Mockito.times(1)).sent(channel, null);",
        "line": 57,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelHandler, Mockito.times(1)).received(channel, null);",
        "line": 58,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelHandler, Mockito.times(1)).caught(channel, null);",
        "line": 59,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.removeChannelHandler(channelHandler);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "replier",
    "variableType": "Replier",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "Replier replier = Mockito.mock(Replier.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.addReplier(ExchangeHandlerDispatcherTest.class, replier);",
        "line": 39,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(replier, Mockito.times(1)).reply(exchangeChannel, obj);",
        "line": 60,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "telnetHandlerAdapter",
    "variableType": "TelnetHandlerAdapter",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "TelnetHandlerAdapter telnetHandlerAdapter = Mockito.mock(TelnetHandlerAdapter.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "telnetHandlerField.set(exchangeHandlerDispatcher, telnetHandlerAdapter);",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(telnetHandlerAdapter, Mockito.times(1)).telnet(channel, null);",
        "line": 61,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.connected(channel);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.disconnected(channel);",
        "line": 47,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.sent(channel, null);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.received(channel, null);",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.caught(channel, null);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.telnet(channel, null);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "exchangeChannel",
    "variableType": "ExchangeChannel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "ExchangeChannel exchangeChannel = Mockito.mock(ExchangeChannel.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exchangeHandlerDispatcher.reply(exchangeChannel, obj);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeChannelTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(MockChannel.class);",
        "line": 150,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "requestTest02",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.getUrl()).thenReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "requestTest02",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channel, times(1)).send(argumentCaptor.capture());",
        "line": 156,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "requestTest02",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "server",
    "variableType": "RemotingServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "RemotingServer server = Mockito.mock(RemotingServer.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getUrl()).thenReturn(url);",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.canHandleIdle()).thenReturn(false);",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.canHandleIdle()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getServer(), server);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannels()).thenReturn(Arrays.asList(channel1, channel2));",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getChannels()).thenReturn(java.util.List<org.apache.dubbo.remoting.Channel>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address1))).thenReturn(channel1);",
        "line": 66,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getChannel(java.net.InetSocketAddress)).thenReturn(org.apache.dubbo.remoting.Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address2))).thenReturn(channel2);",
        "line": 67,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getChannel(java.net.InetSocketAddress)).thenReturn(org.apache.dubbo.remoting.Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(server, Mockito.times(1)).send(\"test\");",
        "line": 75,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(server, Mockito.times(1)).send(\"test\", true);",
        "line": 77,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(server, Mockito.times(1)).startClose();",
        "line": 86,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(server, Mockito.times(1)).close(1000);",
        "line": 88,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel1",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "// test getChannels() and getExchangeChannels()\r\nChannel channel1 = Mockito.mock(Channel.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel1.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel1);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannels()).thenReturn(Arrays.asList(channel1, channel2));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address1))).thenReturn(channel1);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel2",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel2 = Mockito.mock(Channel.class);",
        "line": 51,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel2.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel2);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannels()).thenReturn(Arrays.asList(channel1, channel2));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address2))).thenReturn(channel2);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "exchangeChannel1",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "Channel exchangeChannel1 = new HeaderExchangeChannel(channel1);",
        "line": 52,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel1.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel1);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getChannel(address1), exchangeChannel1);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getExchangeChannel(address1), exchangeChannel1);",
        "line": 70,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// test close(int timeout)\r\nMockito.when(exchangeChannel1.isConnected()).thenReturn(true);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.isConnected()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "address1",
    "variableType": "InetSocketAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "// test getChannel(InetSocketAddress) and getExchangeChannel(InetSocketAddress)\r\nInetSocketAddress address1 = Mockito.mock(InetSocketAddress.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address1))).thenReturn(channel1);",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getChannel(address1), exchangeChannel1);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getExchangeChannel(address1), exchangeChannel1);",
        "line": 70,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "address2",
    "variableType": "InetSocketAddress",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java"
    },
    "statements": [
      {
        "code": "InetSocketAddress address2 = Mockito.mock(InetSocketAddress.class);",
        "line": 65,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(server.getChannel(Mockito.eq(address2))).thenReturn(channel2);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getChannel(address2), exchangeChannel2);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(headerExchangeServer.getExchangeChannel(address2), exchangeChannel2);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "server",
    "variableType": "RemotingServer",
    "mockedClass": "org.apache.dubbo.remoting.RemotingServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\MockTransporter.java",
      "className": "MockTransporter"
    },
    "statements": [
      {
        "code": "private RemotingServer server = Mockito.mock(RemotingServer.class);",
        "line": 24,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "client",
    "variableType": "Client",
    "mockedClass": "org.apache.dubbo.remoting.Client",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\MockTransporter.java",
      "className": "MockTransporter"
    },
    "statements": [
      {
        "code": "private Client client = Mockito.mock(Client.class);",
        "line": 25,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\ExitTelnetHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 31,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "exitTelnetHandler.telnet(channel, null);",
        "line": 34,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channel, times(1)).close();",
        "line": 36,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\HelpTelnetHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 31,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));",
        "line": 32,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(helpTelnetHandler.telnet(channel, \"\").contains(prompt));",
        "line": 37,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(helpTelnetHandler.telnet(channel, \"help\"), demoOutput);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\StatusTelnetHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 30,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));",
        "line": 31,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"\"));",
        "line": 34,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"-l\"));",
        "line": 35,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertTrue(statusTelnetHandler.telnet(channel, \"other\").contains(errorPrompt));",
        "line": 38,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345?status=load,memory\"));",
        "line": 40,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"\"));",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"-l\"));",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\TelnetHandlerAdapterTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.getUrl()).thenReturn(url);",
        "line": 41,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(expectedResult, telnetHandlerAdapter.telnet(channel, message));",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testTelnet",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckPayloadDefault8M",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckPayloadDefault8M",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "AbstractCodec.checkPayload(channel, 1 * 1024 * 1024);",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckPayloadDefault8M",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
        "line": 56,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckPayloadDefault8M",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 61,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckProviderPayload",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckProviderPayload",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "AbstractCodec.checkPayload(channel, 1024 * 1024 + 1, 1024 * 1024);",
        "line": 64,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testCheckProviderPayload",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
        "line": 84,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCheckProviderPayload",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 89,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tesCheckPayloadMinusPayloadNoLimit",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1?payload=-1\"));",
        "line": 90,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tesCheckPayloadMinusPayloadNoLimit",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "AbstractCodec.checkPayload(channel, 15 * 1024 * 1024);",
        "line": 92,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tesCheckPayloadMinusPayloadNoLimit",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
        "line": 94,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "tesCheckPayloadMinusPayloadNoLimit",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = mock(Channel.class);",
        "line": 101,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.13\", 9103));",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(codec.isClientSide(channel), is(true));",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(codec.isServerSide(channel), is(false));",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.14\", 9103));",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
        "line": 108,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(codec.isClientSide(channel), is(false));",
        "line": 109,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "assertThat(codec.isServerSide(channel), is(true));",
        "line": 110,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIsClientSide",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\ChannelHandlerDispatcherTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "channelHandlerDispatcher.sent(channel, \"test\");",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "channelHandlerDispatcher.connected(channel);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "channelHandlerDispatcher.disconnected(channel);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "channelHandlerDispatcher.caught(channel, null);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "channelHandlerDispatcher.received(channel, \"test\");",
        "line": 55,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\DecodeHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\DecodeHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "decodeHandler.received(channel, mockData);",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "decodeHandler.received(channel, request);",
        "line": 47,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "decodeHandler.received(channel, response);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "decodeHandler.received(channel, mockData);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\dispatcher\\ChannelEventRunnableTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 39,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\dispatcher\\ChannelEventRunnableTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).connected(channelArgumentCaptor.capture());",
        "line": 61,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).disconnected(channelArgumentCaptor.capture());",
        "line": 62,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).sent(channelArgumentCaptor.capture(), Mockito.any());",
        "line": 63,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).received(channelArgumentCaptor.capture(), objectArgumentCaptor.capture());",
        "line": 64,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).caught(channelArgumentCaptor.capture(), throwableArgumentCaptor.capture());",
        "line": 66,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\MultiMessageHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 35,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(2)).received(channelArgumentCaptor.capture(), objectArgumentCaptor.capture());",
        "line": 44,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// verify\r\nMockito.verify(handler, Mockito.times(3)).received(channelArgumentCaptor.capture(), objectArgumentCaptor.capture());",
        "line": 53,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.doThrow(runtimeException).when(handler).received(Mockito.any(), Mockito.any());",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).received(T, T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(2)).caught(channelArgumentCaptor.capture(), throwableArgumentCaptor.capture());",
        "line": 63,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\MultiMessageHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "multiMessageHandler.received(channel, multiMessage);",
        "line": 40,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(channelArgumentCaptor.getValue(), channel);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "multiMessageHandler.received(channel, obj);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(channelArgumentCaptor.getValue(), channel);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "multiMessageHandler.received(channel, multiMessage);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(channelArgumentCaptor.getValue(), channel);",
        "line": 67,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "ChannelHandler",
    "mockedClass": "org.apache.dubbo.remoting.ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\TransportersTest.java",
      "className": "TransportersTest"
    },
    "statements": [
      {
        "code": "private ChannelHandler channel = Mockito.mock(ChannelHandler.class);",
        "line": 27,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertNotNull(Transporters.bind(url, channel));",
        "line": 34,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBind",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(Transporters.bind(url, channel, channel));",
        "line": 35,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testBind",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(Transporters.connect(url, channel));",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConnect",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertNotNull(Transporters.connect(url, channel, channel));",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConnect",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "successLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-http\\src\\test\\java\\org\\apache\\dubbo\\remoting\\http\\jetty\\JettyLoggerAdapterTest.java"
    },
    "statements": [
      {
        "code": "Logger successLogger = mock(Logger.class);",
        "line": 68,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "loggerField.set(jettyLoggerAdapter, new FailsafeErrorTypeAwareLogger(successLogger));",
        "line": 75,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(successLogger.isDebugEnabled()).thenReturn(true);",
        "line": 78,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(successLogger.isWarnEnabled()).thenReturn(true);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isWarnEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(successLogger.isInfoEnabled()).thenReturn(true);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isInfoEnabled()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).warn(anyString());",
        "line": 86,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).info(anyString());",
        "line": 87,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(successLogger).debug(anyString());",
        "line": 88,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSuccessLogger",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 43,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(true);",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "NettyChannel.removeChannel(channel);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(false);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "NettyChannel.removeChannelIfDisconnected(channel);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channelHandler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(nettyChannel.getChannelHandler(), channelHandler);",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelPromise",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java"
    },
    "statements": [
      {
        "code": "ChannelPromise future = Mockito.mock(ChannelPromise.class);",
        "line": 84,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.await(1000)).thenReturn(true);",
        "line": 85,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.cause()).thenReturn(null);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.cause()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.writeAndFlush(Mockito.any())).thenReturn(future);",
        "line": 87,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.newPromise()).thenReturn(future);",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.addListener(Mockito.any())).thenReturn(future);",
        "line": 89,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.cause()).thenReturn(exception);",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.cause()).thenReturn(java.lang.Exception)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.await(1000)).thenReturn(false);",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.cause()).thenReturn(null);",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.cause()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "exception",
    "variableType": "Exception",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java"
    },
    "statements": [
      {
        "code": "Exception exception = Mockito.mock(Exception.class);",
        "line": 93,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(exception.getMessage()).thenReturn(\"future cause\");",
        "line": 94,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(java.lang.Exception.getMessage()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(future.cause()).thenReturn(exception);",
        "line": 95,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channelPromise",
    "variableType": "ChannelPromise",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java"
    },
    "statements": [
      {
        "code": "ChannelPromise channelPromise = Mockito.mock(ChannelPromise.class);",
        "line": 112,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.newPromise()).thenReturn(channelPromise);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channelPromise.await(1000)).thenReturn(true);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channelPromise.cause()).thenReturn(null);",
        "line": 115,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.cause()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channelPromise.addListener(Mockito.any())).thenReturn(channelPromise);",
        "line": 116,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channelPromise, Mockito.times(1)).addListener(listenerArgumentCaptor.capture());",
        "line": 120,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.transport.netty4",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java",
      "className": "NettyChannelTest"
    },
    "statements": [
      {
        "code": "private Channel channel = Mockito.mock(Channel.class);",
        "line": 37,
        "type": "FIELD_INITIALIZATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(true);",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "NettyChannel.removeChannel(channel);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(false);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "NettyChannel.removeChannelIfDisconnected(channel);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.localAddress()).thenReturn(localAddress);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.localAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.remoteAddress()).thenReturn(remoteAddress);",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testAddress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.eventLoop()).thenReturn(Mockito.mock(EventLoop.class));",
        "line": 81,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.eventLoop()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.alloc()).thenReturn(PooledByteBufAllocator.DEFAULT);",
        "line": 82,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.alloc()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.writeAndFlush(Mockito.any())).thenReturn(future);",
        "line": 87,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.writeAndFlush(T)).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.newPromise()).thenReturn(future);",
        "line": 88,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.newPromise()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.newPromise()).thenReturn(channelPromise);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Channel.newPromise()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSend",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channelHandler",
    "variableType": "ChannelHandler",
    "mockedClass": "org.apache.dubbo.remoting.ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.remoting.transport.netty4",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java",
      "className": "NettyChannelTest"
    },
    "statements": [
      {
        "code": "private ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
        "line": 39,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertEquals(nettyChannel.getChannelHandler(), channelHandler);",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 43,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).connected(captor.capture());",
        "line": 61,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).disconnected(captor.capture());",
        "line": 65,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).caught(captor.capture(), throwableArgumentCaptor.capture());",
        "line": 71,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(1)).received(captor.capture(), objectArgumentCaptor.capture());",
        "line": 76,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ctx",
    "variableType": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);",
        "line": 44,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
        "line": 46,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.channel()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.channelActive(ctx);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.channelInactive(ctx);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.exceptionCaught(ctx, throwable);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.channelRead(ctx, \"test\");",
        "line": 73,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.userEventTriggered(ctx, IdleStateEvent.READER_IDLE_STATE_EVENT);",
        "line": 78,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java"
    },
    "statements": [
      {
        "code": "Channel channel = Mockito.mock(Channel.class);",
        "line": 45,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(true);",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.eventLoop()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.alloc()).thenReturn(PooledByteBufAllocator.DEFAULT);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.alloc()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.writeAndFlush(any())).thenReturn(future);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.writeAndFlush(T)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.newPromise()).thenReturn(future);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.newPromise()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(channel, Mockito.times(1)).writeAndFlush(requestArgumentCaptor.capture());",
        "line": 81,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "future",
    "variableType": "ChannelPromise",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java"
    },
    "statements": [
      {
        "code": "ChannelPromise future = mock(ChannelPromise.class);",
        "line": 51,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.writeAndFlush(any())).thenReturn(future);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(future.cause()).thenReturn(null);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.cause()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(channel.newPromise()).thenReturn(future);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(future.addListener(Mockito.any())).thenReturn(future);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "throwable",
    "variableType": "Throwable",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java"
    },
    "statements": [
      {
        "code": "Throwable throwable = Mockito.mock(Throwable.class);",
        "line": 67,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "nettyClientHandler.exceptionCaught(ctx, throwable);",
        "line": 68,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "codec2",
    "variableType": "Codec2",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "Codec2 codec2 = Mockito.mock(Codec2.class);",
        "line": 49,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 51,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "codec2",
    "variableType": "Codec2",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "Codec2 codec2 = Mockito.mock(Codec2.class);",
        "line": 61,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new IOException(\"testDecodeIllegalPacket\")).when(codec2).decode(any(), any());",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(java.io.IOException).when(null).decode(T, T)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doReturn(\"default\").when(url).getParameter(eq(Constants.CODEC_KEY));",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doReturn(java.lang.String).when(null).getParameter(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
        "line": 67,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testDecodeException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "childListener",
    "variableType": "ChildListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-zookeeper\\src\\test\\java\\org\\apache\\dubbo\\remoting\\zookeeper\\curator\\CuratorZookeeperClientTest.java"
    },
    "statements": [
      {
        "code": "ChildListener childListener = mock(ChildListener.class);",
        "line": 129,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "curatorClient.addChildListener(\"/children\", childListener);",
        "line": 130,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "curatorClient.removeChildListener(\"/children\", childListener);",
        "line": 131,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "childListener",
    "variableType": "ChildListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-zookeeper-curator5\\src\\test\\java\\org\\apache\\dubbo\\remoting\\zookeeper\\curator5\\Curator5ZookeeperClientTest.java"
    },
    "statements": [
      {
        "code": "ChildListener childListener = mock(ChildListener.class);",
        "line": 112,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "curatorClient.addChildListener(\"/children\", childListener);",
        "line": 113,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "curatorClient.removeChildListener(\"/children\", childListener);",
        "line": 114,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testRemoveChildrenListener",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "appender",
    "variableType": "Appender",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\AccessLogFilterTest.java"
    },
    "statements": [
      {
        "code": "Appender appender = mock(Appender.class);",
        "line": 91,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustom",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "appender2",
    "variableType": "Appender",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\AccessLogFilterTest.java"
    },
    "statements": [
      {
        "code": "Appender appender2 = mock(Appender.class);",
        "line": 116,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testCustom",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ClassLoaderFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 66,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 69,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "classLoaderFilter.invoke(invoker, invocation);",
        "line": 71,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceModel",
    "variableType": "ServiceModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ClassLoaderFilterTest.java"
    },
    "statements": [
      {
        "code": "ServiceModel serviceModel = Mockito.mock(ServiceModel.class);",
        "line": 67,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(serviceModel.getClassLoader()).thenReturn(cl);",
        "line": 68,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ServiceModel.getClassLoader()).thenReturn(java.net.URLClassLoader)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
      "className": "CompatibleFilterFilterTest"
    },
    "statements": [
      {
        "code": "private Invocation invocation;",
        "line": 43,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.reset(invocation, invoker);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 53,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 73,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 84,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 94,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
        "line": 96,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 97,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 105,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "compatibleFilter.onResponse(appResponse, invoker, invocation);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 117,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
        "line": 118,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
        "line": 119,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 120,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 128,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "compatibleFilter.onResponse(appResponse, invoker, invocation);",
        "line": 134,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 140,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
        "line": 141,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 142,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 143,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 150,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation = mock(RpcInvocation.class);",
        "line": 160,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
        "line": 161,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
        "line": 162,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 163,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 170,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "mockedClass": "org.apache.dubbo.rpc.Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
      "className": "CompatibleFilterFilterTest"
    },
    "statements": [
      {
        "code": "private Invoker invoker;",
        "line": 44,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Mockito.reset(invocation, invoker);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "@After",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "tearDown",
          "methodAnnotations": [
            "AfterEach"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 58,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerGeneric",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 78,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 84,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 86,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testResultHasException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 99,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 100,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 105,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 107,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "compatibleFilter.onResponse(appResponse, invoker, invocation);",
        "line": 111,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 122,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 123,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 124,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 130,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "compatibleFilter.onResponse(appResponse, invoker, invocation);",
        "line": 134,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokerNonJsonEnumSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 145,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 146,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 147,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 150,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonNonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 165,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 166,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 167,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 170,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 172,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokerNonJsonPojoSerialization",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "mockedClass": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ContextFilterTest.java",
      "className": "ContextFilterTest"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker;",
        "line": 44,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker = mock(Invoker.class);",
        "line": 56,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<DemoService>.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<DemoService>.getInterface()).thenReturn(Invoker<DemoService>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<DemoService>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "contextFilter.invoke(invoker, invocation);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "mockedClass": "org.apache.dubbo.rpc.Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.filter",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ContextFilterTest.java",
      "className": "ContextFilterTest"
    },
    "statements": [
      {
        "code": "Invocation invocation;",
        "line": 45,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invocation = mock(Invocation.class);",
        "line": 50,
        "type": "ASSIGNMENT_MOCK",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(null);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "contextFilter.invoke(invoker, invocation);",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testSetContext",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = createMockRpcInvocation();",
        "line": 41,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testEcho",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"$echo\");",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testEcho",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = createMockRpcInvocation();",
        "line": 52,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNonEcho",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNonEcho",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = mock(RpcInvocation.class);",
        "line": 61,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockRpcInvocation",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
        "line": 62,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockRpcInvocation",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
        "line": 63,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockRpcInvocation",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invocation.getObjectAttachments()).willReturn(null);",
        "line": 64,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockRpcInvocation",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 69,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 70,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 71,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "failLogger",
    "variableType": "Logger",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java"
    },
    "statements": [
      {
        "code": "Logger failLogger = mock(Logger.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRpcException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 58,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRpcException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 59,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRpcException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(eq(invocation))).willThrow(exception);",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRpcException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 92,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testJavaException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
        "line": 93,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testJavaException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 94,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testJavaException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 112,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRuntimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
        "line": 113,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRuntimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 114,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRuntimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
        "line": 133,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConvertToRunTimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(invocation)).thenReturn(mockAsyncResult);",
        "line": 134,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConvertToRunTimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 135,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConvertToRunTimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      },
      {
        "code": "exceptionFilter.onResponse(appResponse, invoker, invocation);",
        "line": 140,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConvertToRunTimeException",
          "methodAnnotations": [
            "SuppressWarnings",
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1\"));",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testNoExecuteLimitInvoke\");",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNoExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 59,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
        "line": 60,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&executes=10\"));",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvoke\");",
        "line": 65,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 73,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doThrow(new RpcException()).when(invoker).invoke(any(Invocation.class));",
        "line": 74,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doThrow(org.apache.dubbo.rpc.RpcException).when(null).invoke(org.apache.dubbo.rpc.Invocation)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 79,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvokeWitException\");",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(1, RpcStatus.getStatus(url, invocation.getMethodName()).getFailed());",
        "line": 88,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "RpcStatus.removeStatus(url, invocation.getMethodName());",
        "line": 90,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testExecuteLimitInvokeWithException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java"
    },
    "statements": [
      {
        "code": "final Invocation invocation = Mockito.mock(RpcInvocation.class);",
        "line": 99,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMoreThanExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testMoreThanExecuteLimitInvoke\");",
        "line": 100,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testMoreThanExecuteLimitInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 65,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(new Person(\"person\", 10), invocation));",
        "line": 66,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 68,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 69,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "genericFilter.onResponse(appResponse, invoker, invocation);",
        "line": 74,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithDefault",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 124,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodNamtNot$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
        "line": 125,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodNamtNot$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 126,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodNamtNot$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodNamtNot$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 150,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
        "line": 151,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 152,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 153,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 63,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
        "line": 70,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "genericImplFilter.onResponse(result, invoker, invocation);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 96,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException1",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
        "line": 99,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException1",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException1",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException1",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "genericImplFilter.onResponse(result, invoker, invocation);",
        "line": 106,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithException1",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 122,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
        "line": 125,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 127,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 128,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithException2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "genericImplFilter.onResponse(result, invoker, invocation);",
        "line": 132,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWithException2",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 154,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWith$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
        "line": 155,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWith$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 156,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWith$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "genericImplFilter.invoke(invoker, invocation);",
        "line": 158,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokeWith$Invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 42,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=\" + timeout));",
        "line": 44,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithoutTimeout\");",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithoutTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(RpcInvocation.class);",
        "line": 62,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithTimeout\");",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithTimeout",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TokenFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = Mockito.mock(Invoker.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 47,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TokenFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation invocation = Mockito.mock(Invocation.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invocation.getObjectAttachmentWithoutConvert(TOKEN_KEY)).thenReturn(token);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachmentWithoutConvert(java.lang.String)).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeWithToken",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocolWithoutListener",
    "variableType": "Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java"
    },
    "statements": [
      {
        "code": "Protocol protocolWithoutListener = mock(Protocol.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForLocalReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForLocalReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocol",
    "variableType": "Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java"
    },
    "statements": [
      {
        "code": "Protocol protocol = mock(Protocol.class);",
        "line": 74,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForLocalReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForLocalReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocolWithoutListener",
    "variableType": "Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java"
    },
    "statements": [
      {
        "code": "Protocol protocolWithoutListener = mock(Protocol.class);",
        "line": 97,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForRemoteReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);",
        "line": 98,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForRemoteReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocol",
    "variableType": "Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java"
    },
    "statements": [
      {
        "code": "Protocol protocol = mock(Protocol.class);",
        "line": 121,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForRemoteReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);",
        "line": 122,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testLoadingListenerForRemoteReference",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "InvocationHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java"
    },
    "statements": [
      {
        "code": "InvocationHandler handler = Mockito.mock(InvocationHandler.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// 'intercept' method will call 'invoke' method directly\r\nMockito.verify(handler, Mockito.times(1)).invoke(proxy, method, args);",
        "line": 43,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "method",
    "variableType": "Method",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java"
    },
    "statements": [
      {
        "code": "Method method = Mockito.mock(Method.class);",
        "line": 38,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "interceptor.intercept(proxy, args, method);",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "proxy",
    "variableType": "Proxy",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java"
    },
    "statements": [
      {
        "code": "Proxy proxy = Mockito.mock(Proxy.class);",
        "line": 39,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "interceptor.intercept(proxy, args, method);",
        "line": 41,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testIntercept",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "proxy",
    "variableType": "RemoteService",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyProxyInvokerTest.java"
    },
    "statements": [
      {
        "code": "RemoteService proxy = Mockito.mock(RemoteService.class);",
        "line": 31,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker.doInvoke(proxy, \"sayHello\", new Class[] { String.class }, new Object[] { \"test\" });",
        "line": 34,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(proxy, Mockito.times(1)).sayHello(\"test\");",
        "line": 35,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertThrows(IllegalArgumentException.class, () -> invoker.doInvoke(proxy, \"equals\", new Class[] { String.class }, new Object[] { \"test\", \"test2\" }));",
        "line": 37,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "handler",
    "variableType": "InvokerInvocationHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyProxyTest.java"
    },
    "statements": [
      {
        "code": "InvokerInvocationHandler handler = Mockito.mock(InvokerInvocationHandler.class);",
        "line": 35,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(handler, Mockito.times(2)).invoke(any(), any(), any());",
        "line": 42,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— @Before\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.proxy",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\InvokerInvocationHandlerTest.java",
      "className": "InvokerInvocationHandlerTest"
    },
    "statements": [
      {
        "code": "private Invoker<?> invoker;",
        "line": 33,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker = Mockito.mock(Invoker.class);",
        "line": 39,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 40,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "setUp",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker.toString()).thenReturn(methodName);",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.toString()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokeToString",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "remoteService",
    "variableType": "RemoteServiceImpl",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\MethodInvokerTest.java"
    },
    "statements": [
      {
        "code": "RemoteServiceImpl remoteService = Mockito.mock(RemoteServiceImpl.class);",
        "line": 43,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// invoke success, SingleMethodInvoker does not check parameter types\r\nmethodInvoker.invoke(remoteService, singleMethodName, new Class[0], new Object[0]);",
        "line": 45,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "methodInvoker.invoke(remoteService, singleMethodName, new Class[] { Object.class, Object.class, Object.class }, new Object[0]);",
        "line": 46,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(remoteService, Mockito.times(2)).getThreadName();",
        "line": 48,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "methodInvoker.invoke(remoteService, overloadMethodName, new Class[] { String.class }, new Object[] { \"Hello arg1\" });",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(remoteService, Mockito.times(1)).sayHello(\"Hello arg1\");",
        "line": 52,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "methodInvoker.invoke(remoteService, overloadMethodName, new Class[] { String.class, String.class }, new Object[] { \"Hello arg1\", \"Hello arg2\" });",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(remoteService, Mockito.times(1)).sayHello(\"Hello arg1\", \"Hello arg2\");",
        "line": 56,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewInstance",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "proxyFactory",
    "variableType": "ProxyFactory",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java"
    },
    "statements": [
      {
        "code": "ProxyFactory proxyFactory = Mockito.mock(ProxyFactory.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocol",
    "variableType": "Protocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java"
    },
    "statements": [
      {
        "code": "Protocol protocol = Mockito.mock(Protocol.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "stubProxyFactoryWrapper.setProtocol(protocol);",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(protocol, Mockito.times(1)).export(Mockito.any());",
        "line": 54,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> invoker = Mockito.mock(Invoker.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getInterface()).thenReturn(DemoService.class);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(invoker.getUrl()).thenReturn(url);",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker1",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker1 = Mockito.mock(Invoker.class);",
        "line": 53,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "rpcInvocation.addInvokedInvoker(invoker1);",
        "line": 57,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(Arrays.asList(invoker1, invoker2, invoker3, invoker3), rpcInvocation.getInvokedInvokers());",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker2 = Mockito.mock(Invoker.class);",
        "line": 54,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "rpcInvocation.addInvokedInvoker(invoker2);",
        "line": 58,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(Arrays.asList(invoker1, invoker2, invoker3, invoker3), rpcInvocation.getInvokedInvokers());",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker3",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker3 = Mockito.mock(Invoker.class);",
        "line": 55,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "rpcInvocation.addInvokedInvoker(invoker3);",
        "line": 59,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "rpcInvocation.addInvokedInvoker(invoker3);",
        "line": 60,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(Arrays.asList(invoker1, invoker2, invoker3, invoker3), rpcInvocation.getInvokedInvokers());",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvokers",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "responseObserver",
    "variableType": "StreamObserver<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\BiStreamMethodHandlerTest.java"
    },
    "statements": [
      {
        "code": "StreamObserver<String> responseObserver = Mockito.mock(StreamObserver.class);",
        "line": 34,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(responseObserver, future.get(1, TimeUnit.SECONDS));",
        "line": 37,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "responseObserver",
    "variableType": "StreamObserver<String>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\ServerStreamMethodHandlerTest.java"
    },
    "statements": [
      {
        "code": "StreamObserver<String> responseObserver = Mockito.mock(StreamObserver.class);",
        "line": 40,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doAnswer(o -> nextCounter.incrementAndGet()).when(responseObserver).onNext(anyString());",
        "line": 41,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doAnswer(org.mockito.stubbing.Answer).when(null).onNext(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doAnswer(o -> completeCounter.incrementAndGet()).when(responseObserver).onCompleted();",
        "line": 42,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doAnswer(org.mockito.stubbing.Answer).when(null).onCompleted()",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "doAnswer(o -> errorCounter.incrementAndGet()).when(responseObserver).onError(any(Throwable.class));",
        "line": 43,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "doAnswer(org.mockito.stubbing.Answer).when(null).onError(java.lang.Throwable)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "invoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 37,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 39,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "StubSuppliers.addSupplier(service, i -> invoker);",
        "line": 42,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker, factory.getProxy(invoker));",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker, factory.getProxy(invoker, false));",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 38,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 39,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getServiceInterface()).thenReturn(service);",
        "line": 41,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getProxy",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 64,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, factory.getInvoker(new MockStub(), MockInterface.class, url));",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<MockInterface>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.stub.StubProxyFactoryTest.MockInterface>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
      "className": "StubProxyFactoryTest"
    },
    "statements": [
      {
        "code": "private final Invoker<MockInterface> invoker2 = Mockito.mock(Invoker.class);",
        "line": 33,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, factory.getInvoker(new MockStub(), MockInterface.class, url));",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<MockInterface>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.stub.StubProxyFactoryTest.MockInterface>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
      "className": "StubProxyFactoryTest"
    },
    "statements": [
      {
        "code": "private final Invoker<MockInterface> invoker2 = Mockito.mock(Invoker.class);",
        "line": 33,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, factory.getInvoker(new MockStub(), MockInterface.class, url));",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker2",
    "variableType": "Invoker<MockInterface>",
    "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.stub.StubProxyFactoryTest.MockInterface>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
      "className": "StubProxyFactoryTest"
    },
    "statements": [
      {
        "code": "private final Invoker<MockInterface> invoker2 = Mockito.mock(Invoker.class);",
        "line": 33,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "Assertions.assertEquals(invoker2, factory.getInvoker(new MockStub(), MockInterface.class, url));",
        "line": 65,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "getInvoker",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "descriptor",
    "variableType": "ServiceDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java"
    },
    "statements": [
      {
        "code": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);",
        "line": 34,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "addDescriptor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "StubSuppliers.addDescriptor(serviceName, descriptor);",
        "line": 35,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "addDescriptor",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(descriptor, StubSuppliers.getServiceDescriptor(serviceName));",
        "line": 36,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "addDescriptor",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 41,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "addSupplier",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "StubSuppliers.addSupplier(serviceName, i -> invoker);",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "addSupplier",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(invoker, StubSuppliers.createStub(serviceName, invoker));",
        "line": 44,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "addSupplier",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "descriptor",
    "variableType": "ServiceDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java"
    },
    "statements": [
      {
        "code": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);",
        "line": 42,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "addSupplier",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 49,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createStub",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\support\\RpcUtilsTest.java"
    },
    "statements": [
      {
        "code": "Invoker invoker = createMockInvoker();",
        "line": 54,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "dic",
    "variableType": "Directory<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\DubboProtocolTest.java"
    },
    "statements": [
      {
        "code": "Directory<DemoService> dic = Mockito.mock(Directory.class);",
        "line": 296,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoteApplicationName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(dic.list(invocation)).thenReturn(invokers);",
        "line": 297,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.list(org.apache.dubbo.rpc.Invocation)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoteApplicationName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(dic.getUrl()).thenReturn(url);",
        "line": 298,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoteApplicationName",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(dic.getConsumerUrl()).thenReturn(url);",
        "line": 299,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testRemoteApplicationName",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java"
    },
    "statements": [
      {
        "code": "Invoker<DemoService> mockInvoker = mock(Invoker.class);",
        "line": 96,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
        "line": 101,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);",
        "line": 104,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// test invoke\r\nfilter.invoke(mockInvoker, mockInvocation);",
        "line": 108,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// test remove channel when count >= max - 1\r\nfilter.invoke(mockInvoker, mockInvocation);",
        "line": 118,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockInvocation",
    "variableType": "Invocation",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java"
    },
    "statements": [
      {
        "code": "Invocation mockInvocation = mock(Invocation.class);",
        "line": 97,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvocation.getMethodName()).willReturn(method);",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvocation.getArguments()).willReturn(new Object[0]);",
        "line": 103,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// test invoke\r\nfilter.invoke(mockInvoker, mockInvocation);",
        "line": 108,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// test remove channel when count >= max - 1\r\nfilter.invoke(mockInvoker, mockInvocation);",
        "line": 118,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "mockResult",
    "variableType": "Result",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java"
    },
    "statements": [
      {
        "code": "Result mockResult = mock(Result.class);",
        "line": 98,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);",
        "line": 104,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(mockResult.getValue()).willReturn(\"result\");",
        "line": 105,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Result.getValue()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testInvoke",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<DemoService>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\FutureFilterTest.java"
    },
    "statements": [
      {
        "code": "@SuppressWarnings(\"unchecked\")\r\nInvoker<DemoService> invoker = mock(Invoker.class);",
        "line": 55,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSyncCallback",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.isAvailable()).willReturn(true);",
        "line": 57,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isAvailable()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSyncCallback",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSyncCallback",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.invoke(invocation)).willReturn(result);",
        "line": 61,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSyncCallback",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(invoker.getUrl()).willReturn(url);",
        "line": 63,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testSyncCallback",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channelHandler",
    "variableType": "ChannelHandler",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\managemode\\ChannelHandlersTest.java"
    },
    "statements": [
      {
        "code": "ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
        "line": 36,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Assertions.assertEquals(channelHandler, handler);",
        "line": 43,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channelOperator",
    "variableType": "ChannelOperator",
    "mockedClass": "org.apache.dubbo.remoting.api.pu.ChannelOperator",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.dubbo.pu",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\pu\\DubboWireProtocolTest.java",
      "className": "DubboWireProtocolTest"
    },
    "statements": [
      {
        "code": "@Mock\r\nprivate ChannelOperator channelOperator;",
        "line": 38,
        "type": "FIELD_MOCK_CREATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": [
            "Mock"
          ]
        }
      },
      {
        "code": "dubboWireProtocol.configServerProtocolHandler(url, channelOperator);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConfigServerProtocolHandler",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(channelOperator).configChannelHandler(handlers);",
        "line": 53,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConfigServerProtocolHandler",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "dubboProtocol",
    "variableType": "DubboProtocol",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\status\\ServerStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "DubboProtocol dubboProtocol = Mockito.mock(DubboProtocol.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(dubboProtocol.getServers()).thenReturn(servers);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.getServers()).thenReturn(java.util.List<org.apache.dubbo.rpc.ProtocolServer>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "protocolServer",
    "variableType": "ProtocolServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\status\\ServerStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "ProtocolServer protocolServer = Mockito.mock(ProtocolServer.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(protocolServer.getRemotingServer()).thenReturn(remotingServer);",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.ProtocolServer.getRemotingServer()).thenReturn(org.apache.dubbo.remoting.RemotingServer)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "remotingServer",
    "variableType": "RemotingServer",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\status\\ServerStatusCheckerTest.java"
    },
    "statements": [
      {
        "code": "RemotingServer remotingServer = Mockito.mock(RemotingServer.class);",
        "line": 47,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(protocolServer.getRemotingServer()).thenReturn(remotingServer);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(remotingServer.isBound()).thenReturn(true);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.isBound()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(remotingServer.getLocalAddress()).thenReturn(InetSocketAddress.createUnresolved(\"127.0.0.1\", 9999));",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getLocalAddress()).thenReturn(java.net.InetSocketAddress)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.when(remotingServer.getChannels()).thenReturn(Arrays.asList(new MockChannel()));",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.RemotingServer.getChannels()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "app",
    "variableType": "Application",
    "mockedClass": "Application",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.rest.integration.swagger",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-rest\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\rest\\integration\\swagger\\DubboSwaggerApiListingResourceTest.java",
      "className": "DubboSwaggerApiListingResourceTest"
    },
    "statements": [
      {
        "code": "private Application app;",
        "line": 38,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "app = mock(Application.class);",
        "line": 46,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(app.getClasses()).thenReturn(sets);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Application.getClasses()).thenReturn(java.util.Set<java.lang.Class<?>>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "sc",
    "variableType": "ServletConfig",
    "mockedClass": "ServletConfig",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.rest.integration.swagger",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-rest\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\rest\\integration\\swagger\\DubboSwaggerApiListingResourceTest.java",
      "className": "DubboSwaggerApiListingResourceTest"
    },
    "statements": [
      {
        "code": "private ServletConfig sc;",
        "line": 39,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "sc = mock(ServletConfig.class);",
        "line": 47,
        "type": "ASSIGNMENT",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(sc.getServletContext()).thenReturn(mock(ServletContext.class));",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(ServletConfig.getServletContext()).thenReturn(ServletConfig)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "violationException",
    "variableType": "ConstraintViolationException",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-rest\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\rest\\RpcExceptionMapperTest.java"
    },
    "statements": [
      {
        "code": "ConstraintViolationException violationException = mock(ConstraintViolationException.class);",
        "line": 51,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testConstraintViolationException",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "given(violationException.getConstraintViolations()).willReturn(Sets.newSet(violation));",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.getConstraintViolations()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testConstraintViolationException",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serverStream",
    "variableType": "TripleServerStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java"
    },
    "statements": [
      {
        "code": "TripleServerStream serverStream = Mockito.mock(TripleServerStream.class);",
        "line": 47,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "providerModel",
    "variableType": "ProviderModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java"
    },
    "statements": [
      {
        "code": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
        "line": 48,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 54,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(providerModel.getServiceMetadata()).thenReturn(serviceMetadata);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceMetadata()).thenReturn(org.apache.dubbo.rpc.model.ServiceMetadata)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 52,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 54,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDescriptor",
    "variableType": "ServiceDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java"
    },
    "statements": [
      {
        "code": "ServiceDescriptor serviceDescriptor = Mockito.mock(ServiceDescriptor.class);",
        "line": 74,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDescriptor.getMethods(anyString())).thenReturn(Collections.singletonList(methodDescriptor));",
        "line": 75,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ServiceDescriptor.getMethods(java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.rpc.model.MethodDescriptor>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
        "line": 77,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<?>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
        "line": 42,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 48,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "tripleServerStream",
    "variableType": "TripleServerStream",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "TripleServerStream tripleServerStream = Mockito.mock(TripleServerStream.class);",
        "line": 43,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "providerModel",
    "variableType": "ProviderModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
        "line": 44,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 49,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
        "line": 50,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "serviceDescriptor",
    "variableType": "ServiceDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "ServiceDescriptor serviceDescriptor = Mockito.mock(ServiceDescriptor.class);",
        "line": 45,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
        "line": 50,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDescriptor.getMethods(anyString())).thenReturn(Collections.singletonList(methodDescriptor));",
        "line": 51,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ServiceDescriptor.getMethods(java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.rpc.model.StubMethodDescriptor>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "methodDescriptor",
    "variableType": "StubMethodDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "StubMethodDescriptor methodDescriptor = Mockito.mock(StubMethodDescriptor.class);",
        "line": 46,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(serviceDescriptor.getMethods(anyString())).thenReturn(Collections.singletonList(methodDescriptor));",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(methodDescriptor.getRpcType()).thenReturn(RpcType.UNARY);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.StubMethodDescriptor.getRpcType()).thenReturn(org.apache.dubbo.rpc.model.MethodDescriptor.RpcType)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(methodDescriptor.parseRequest(any(byte[].class))).thenReturn(\"test\");",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.StubMethodDescriptor.parseRequest(byte[])).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 47,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 48,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(url.getServiceModel()).thenReturn(providerModel);",
        "line": 49,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "doStartCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "writeQueue",
    "variableType": "TripleWriteQueue",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— Test Case",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\stream\\TripleClientStreamTest.java"
    },
    "statements": [
      {
        "code": "TripleWriteQueue writeQueue = mock(TripleWriteQueue.class);",
        "line": 71,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(writeQueue.enqueueFuture(any(QueuedCommand.class), any(Executor.class))).thenReturn(channel.newPromise());",
        "line": 73,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.protocol.tri.transport.TripleWriteQueue.enqueueFuture(org.apache.dubbo.rpc.protocol.tri.command.QueuedCommand, java.util.concurrent.Executor)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue).enqueue(any(CreateStreamQueueCommand.class));",
        "line": 87,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue).enqueueFuture(any(HeaderQueueCommand.class), any(Executor.class));",
        "line": 99,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "// no other commands\r\nverify(writeQueue).enqueue(any(QueuedCommand.class));",
        "line": 101,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue).enqueueFuture(any(DataQueueCommand.class), any(Executor.class));",
        "line": 103,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue, times(2)).enqueueFuture(any(QueuedCommand.class), any(Executor.class));",
        "line": 104,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue).enqueueFuture(any(EndStreamQueueCommand.class), any(Executor.class));",
        "line": 106,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue, times(3)).enqueueFuture(any(QueuedCommand.class), any(Executor.class));",
        "line": 107,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue, times(1)).enqueue(any(CancelQueueCommand.class));",
        "line": 110,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "verify(writeQueue, times(3)).enqueueFuture(any(QueuedCommand.class), any(Executor.class));",
        "line": 111,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "http2StreamChannel",
    "variableType": "Http2StreamChannel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\stream\\TripleClientStreamTest.java"
    },
    "statements": [
      {
        "code": "Http2StreamChannel http2StreamChannel = mock(Http2StreamChannel.class);",
        "line": 75,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(http2StreamChannel.isActive()).thenReturn(true);",
        "line": 76,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(http2StreamChannel.newSucceededFuture()).thenReturn(channel.newSucceededFuture());",
        "line": 77,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.newSucceededFuture()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(http2StreamChannel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
        "line": 78,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.eventLoop()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(http2StreamChannel.newPromise()).thenReturn(channel.newPromise());",
        "line": 79,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.newPromise()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(http2StreamChannel.parent()).thenReturn(channel);",
        "line": 80,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(null.parent()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "progress",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "ctx",
    "variableType": "ChannelHandlerContext",
    "mockedClass": "ChannelHandlerContext",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
      "className": "TripleHttp2ClientResponseHandlerTest"
    },
    "statements": [
      {
        "code": "private ChannelHandlerContext ctx;",
        "line": 39,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "ctx = Mockito.mock(ChannelHandlerContext.class);",
        "line": 46,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
        "line": 48,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "handler.userEventTriggered(ctx, goAwayFrame);",
        "line": 56,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUserEventTriggered",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(ctx, Mockito.times(1)).close();",
        "line": 57,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUserEventTriggered",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.userEventTriggered(ctx, resetFrame);",
        "line": 61,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUserEventTriggered",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(ctx, Mockito.times(2)).close();",
        "line": 62,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUserEventTriggered",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.channelRead0(ctx, headersFrame);",
        "line": 69,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChannelRead0",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "handler.exceptionCaught(ctx, exception);",
        "line": 76,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testExceptionCaught",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(ctx).close();",
        "line": 77,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExceptionCaught",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "transportListener",
    "variableType": "AbstractH2TransportListener",
    "mockedClass": "org.apache.dubbo.rpc.protocol.tri.transport.AbstractH2TransportListener",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Attribute Mock Creation\n\nStubbing:\n— None\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
      "className": "TripleHttp2ClientResponseHandlerTest"
    },
    "statements": [
      {
        "code": "private AbstractH2TransportListener transportListener;",
        "line": 40,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "transportListener = Mockito.mock(AbstractH2TransportListener.class);",
        "line": 44,
        "type": "ASSIGNMENT_MOCK",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.verify(transportListener, Mockito.times(1)).onHeader(headers, true);",
        "line": 70,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testChannelRead0",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "Mockito.verify(transportListener).cancelByRemote(Http2Error.INTERNAL_ERROR.code());",
        "line": 78,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testExceptionCaught",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "parent",
    "variableType": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— None\n\nStubbing:\n— @Before\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\WriteQueueTest.java"
    },
    "statements": [
      {
        "code": "Channel parent = Mockito.mock(Channel.class);",
        "line": 58,
        "type": "METHOD_VARIABLE_INITIALIZATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(parent.eventLoop()).thenReturn(eventLoop);",
        "line": 61,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(null.eventLoop()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.parent()).thenReturn(parent);",
        "line": 63,
        "type": "REFERENCE",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "channel",
    "variableType": "Channel",
    "mockedClass": "Channel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— @Before\n\nVerification:\n— Test Case",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\WriteQueueTest.java",
      "className": "WriteQueueTest"
    },
    "statements": [
      {
        "code": "private Channel channel;",
        "line": 53,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "channel = Mockito.mock(Channel.class);",
        "line": 57,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.parent()).thenReturn(parent);",
        "line": 63,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.parent()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
        "line": 64,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.eventLoop()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.isActive()).thenReturn(true);",
        "line": 65,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.isActive()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.newPromise()).thenReturn(promise);",
        "line": 66,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.newPromise()).thenReturn(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});",
        "line": 67,
        "type": "STUBBING",
        "locate": "@Before",
        "abstractedStatement": "when(Channel.write(T, T)).thenAnswer(Channel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "writeQueue.enqueue(HeaderQueueCommand.createHeaders(tripleStreamChannelFuture, new DefaultHttp2Headers()).channel(channel));",
        "line": 83,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "writeQueue.enqueue(DataQueueCommand.create(tripleStreamChannelFuture, new byte[0], false, 0).channel(channel));",
        "line": 85,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "writeQueue.enqueue(CancelQueueCommand.createCommand(tripleStreamChannelFuture, Http2Error.CANCEL).channel(channel));",
        "line": 89,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "writeQueue.enqueue(TextDataQueueCommand.createCommand(tripleStreamChannelFuture, status.description, true).channel(channel));",
        "line": 91,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "Mockito.verify(channel, Mockito.times(4)).write(commandArgumentCaptor.capture(), promiseArgumentCaptor.capture());",
        "line": 100,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "test",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "writeQueue.enqueue(HeaderQueueCommand.createHeaders(tripleStreamChannelFuture, new DefaultHttp2Headers()).channel(channel));",
        "line": 122,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testChunk",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      },
      {
        "code": "Mockito.verify(channel, Mockito.times(DEQUE_CHUNK_SIZE + 1)).write(Mockito.any(), Mockito.any());",
        "line": 127,
        "type": "VERIFICATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testChunk",
          "methodAnnotations": [
            "Test",
            "Disabled"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connectionClient",
    "variableType": "AbstractConnectionClient",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\TripleInvokerTest.java"
    },
    "statements": [
      {
        "code": "AbstractConnectionClient connectionClient = Mockito.mock(AbstractConnectionClient.class);",
        "line": 51,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(connectionManager.connect(any(URL.class), any(ChannelHandler.class))).thenReturn(connectionClient);",
        "line": 53,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(connectionClient.getChannel(true)).thenReturn(channel);",
        "line": 55,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.api.connection.AbstractConnectionClient.getChannel(boolean)).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(connectionClient.isConnected()).thenReturn(true);",
        "line": 56,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.api.connection.AbstractConnectionClient.isConnected()).thenReturn(boolean)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "connectionManager",
    "variableType": "ConnectionManager",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\TripleInvokerTest.java"
    },
    "statements": [
      {
        "code": "ConnectionManager connectionManager = Mockito.mock(ConnectionManager.class);",
        "line": 52,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(connectionManager.connect(any(URL.class), any(ChannelHandler.class))).thenReturn(connectionClient);",
        "line": 53,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.remoting.api.connection.ConnectionManager.connect(org.apache.dubbo.common.URL, org.apache.dubbo.remoting.ChannelHandler)).thenReturn(org.apache.dubbo.remoting.api.connection.AbstractConnectionClient)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "call",
    "variableType": "TripleClientCall",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\TripleInvokerTest.java"
    },
    "statements": [
      {
        "code": "TripleClientCall call = Mockito.mock(TripleClientCall.class);",
        "line": 60,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(call.start(any(RequestMetadata.class), any(ClientCall.Listener.class))).thenReturn(streamObserver);",
        "line": 62,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(org.apache.dubbo.rpc.protocol.tri.call.TripleClientCall.start(org.apache.dubbo.rpc.protocol.tri.RequestMetadata, org.apache.dubbo.rpc.protocol.tri.call.ClientCall.Listener)).thenReturn(org.apache.dubbo.common.stream.StreamObserver)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invoker.invokeUnary(echoMethod, invocation, call, new ThreadlessExecutor());",
        "line": 72,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "streamObserver",
    "variableType": "StreamObserver",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Test Case\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\TripleInvokerTest.java"
    },
    "statements": [
      {
        "code": "StreamObserver streamObserver = Mockito.mock(StreamObserver.class);",
        "line": 61,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(call.start(any(RequestMetadata.class), any(ClientCall.Listener.class))).thenReturn(streamObserver);",
        "line": 62,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "invocation.setArguments(new Object[] { streamObserver, streamObserver });",
        "line": 66,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testNewCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<IGreeter>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "Invoker<IGreeter> invoker = Mockito.mock(Invoker.class);",
        "line": 50,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 51,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
        "line": 52,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "url",
    "variableType": "URL",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "URL url = Mockito.mock(URL.class);",
        "line": 57,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockURL",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(url.getServiceModel()).thenReturn(consumerModel);",
        "line": 58,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ConsumerModel)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockURL",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(url.getServiceInterface()).thenReturn(IGreeter.class.getName());",
        "line": 59,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockURL",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(url.getProtocolServiceKey()).thenReturn(IGreeter.class.getName());",
        "line": 60,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.common.URL.getProtocolServiceKey()).thenReturn(null)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockURL",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "consumerModel",
    "variableType": "ConsumerModel",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "ConsumerModel consumerModel = Mockito.mock(ConsumerModel.class);",
        "line": 65,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockConsumerModel",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(consumerModel.getServiceModel()).thenReturn(serviceDescriptor);",
        "line": 66,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.ConsumerModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockConsumerModel",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "result",
    "variableType": "Result",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "Result result = Mockito.mock(Result.class);",
        "line": 71,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockResult",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(result.recreate()).thenReturn(response);",
        "line": 72,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.Result.recreate()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockResult",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "method",
    "variableType": "MethodDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Local Assignment in Helper Method\n\nStubbing:\n— Helper Method\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "MethodDescriptor method = Mockito.mock(MethodDescriptor.class);",
        "line": 77,
        "type": "METHOD_MOCK_CREATION",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockMethodDescriptor",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(method.getParameterClasses()).thenReturn(new Class[] { String.class });",
        "line": 78,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.MethodDescriptor.getParameterClasses()).thenReturn(java.lang.Class[])",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockMethodDescriptor",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(method.getMethodName()).thenReturn(\"sayHello\");",
        "line": 79,
        "type": "STUBBING",
        "locate": "Helper Method",
        "abstractedStatement": "when(org.apache.dubbo.rpc.model.MethodDescriptor.getMethodName()).thenReturn(java.lang.String)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "createMockMethodDescriptor",
          "methodAnnotations": []
        }
      }
    ]
  },
  {
    "variableName": "serviceDescriptor",
    "variableType": "ServiceDescriptor",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Global Init in @Before\n\nStubbing:\n— None\n\nVerification:\n— None",
    "classContext": {
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java"
    },
    "statements": [
      {
        "code": "ServiceDescriptor serviceDescriptor = Mockito.mock(ServiceDescriptor.class);",
        "line": 85,
        "type": "METHOD_MOCK_CREATION",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      }
    ]
  },
  {
    "variableName": "invoker",
    "variableType": "Invoker<IGreeter>",
    "mockedClass": "Invoker<IGreeter>",
    "isReuseableMock": false,
    "mockPattern": "Creation:\n— Declaration Attribute\n\nStubbing:\n— Test Case\n\nVerification:\n— None",
    "classContext": {
      "packageName": "org.apache.dubbo.rpc.stub",
      "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java",
      "className": "StubInvocationUtilTest"
    },
    "statements": [
      {
        "code": "private Invoker<IGreeter> invoker;",
        "line": 43,
        "type": "FIELD_DECLARATION",
        "locate": "Attribute",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "FieldDeclaration",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getUrl()).thenReturn(url);",
        "line": 51,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
        "line": 52,
        "type": "REFERENCE",
        "locate": "Helper Method",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "createMockInvoker",
          "methodAnnotations": []
        }
      },
      {
        "code": "invoker = createMockInvoker(url);",
        "line": 88,
        "type": "ASSIGNMENT",
        "locate": "@Before",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "init",
          "methodAnnotations": [
            "BeforeEach"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(result);",
        "line": 95,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "unaryCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).thenThrow(new RuntimeException(\"a\")).thenThrow(new Error(\"b\"));",
        "line": 102,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(java.lang.RuntimeException).thenThrow(java.lang.Error)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "unaryCall2",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> result);",
        "line": 121,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "testUnaryCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "StubInvocationUtil.unaryCall(invoker, method, request, responseObserver);",
        "line": 138,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "testUnaryCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[0];\r\n    observer.onNext(response);\r\n    observer.onCompleted();\r\n    when(result.recreate()).then(invocationOnMock1 -> new StreamObserver<Object>() {\r\n\r\n        @Override\r\n        public void onNext(Object data) {\r\n            observer.onNext(data);\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable throwable) {\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            observer.onCompleted();\r\n        }\r\n    });\r\n    return result;\r\n});",
        "line": 145,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "biOrClientStreamCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[1];\r\n    for (int i = 0; i < 10; i++) {\r\n        observer.onNext(response);\r\n    }\r\n    observer.onCompleted();\r\n    return result;\r\n});",
        "line": 192,
        "type": "STUBBING",
        "locate": "Test Case",
        "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
        "isMockRelated": true,
        "locationContext": {
          "methodName": "serverStreamCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      },
      {
        "code": "StubInvocationUtil.serverStreamCall(invoker, method, request, responseObserver);",
        "line": 217,
        "type": "REFERENCE",
        "locate": "Test Case",
        "abstractedStatement": "",
        "isMockRelated": false,
        "locationContext": {
          "methodName": "serverStreamCall",
          "methodAnnotations": [
            "Test"
          ]
        }
      }
    ]
  }
]