{
  "org.apache.dubbo.metadata.AbstractServiceNameMapping": [
    {
      "mockedClass": "org.apache.dubbo.metadata.AbstractServiceNameMapping",
      "packageName": "org.apache.dubbo.registry.client",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)"
      ],
      "sequences": [
        {
          "variableName": "mapping",
          "variableType": "AbstractServiceNameMapping",
          "mockedClass": "org.apache.dubbo.metadata.AbstractServiceNameMapping",
          "packageName": "org.apache.dubbo.registry.client",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
          "className": "ServiceDiscoveryRegistryTest",
          "testMethodName": "testDoSubscribe",
          "overlapLines": [],
          "shareableMockLines": {
            "69": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
            "110": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
            "114": "when(mapping.getMappingLock(any())).thenReturn(lock);"
          },
          "testMockLines": {
            "130": "// Exceptional case, no interface-app mapping found\r\nwhen(mapping.getAndListen(any(), any(), any())).thenReturn(Collections.emptySet());",
            "158": "when(mapping.getAndListen(any(), any(), any())).thenReturn(singleApp);"
          },
          "abstractedStatement": {
            "114": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)",
            "130": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<T>)",
            "158": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<java.lang.String>)"
          },
          "rawStatementInfo": {
            "69": {
              "code": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
              "line": 69,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "110": {
              "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "114": {
              "code": "when(mapping.getMappingLock(any())).thenReturn(lock);",
              "line": 114,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "130": {
              "code": "// Exceptional case, no interface-app mapping found\r\nwhen(mapping.getAndListen(any(), any(), any())).thenReturn(Collections.emptySet());",
              "line": 130,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<T>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "when(mapping.getAndListen(any(), any(), any())).thenReturn(singleApp);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getAndListen(T, T, T)).thenReturn(java.util.Set<java.lang.String>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mapping",
          "variableType": "AbstractServiceNameMapping",
          "mockedClass": "org.apache.dubbo.metadata.AbstractServiceNameMapping",
          "packageName": "org.apache.dubbo.registry.client",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
          "className": "ServiceDiscoveryRegistryTest",
          "testMethodName": "testUnsubscribe",
          "overlapLines": [],
          "shareableMockLines": {
            "69": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
            "110": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
            "114": "when(mapping.getMappingLock(any())).thenReturn(lock);"
          },
          "testMockLines": {
            "274": "// do unsubscribe\r\nwhen(mapping.getMapping(url2)).thenReturn(multiApps);",
            "284": "when(mapping.getMapping(url)).thenReturn(multiApps);"
          },
          "abstractedStatement": {
            "114": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)",
            "274": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
            "284": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)"
          },
          "rawStatementInfo": {
            "69": {
              "code": "private static AbstractServiceNameMapping mapping = mock(AbstractServiceNameMapping.class);",
              "line": 69,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "110": {
              "code": "when(applicationModel.getDefaultExtension(ServiceNameMapping.class)).thenReturn(mapping);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "114": {
              "code": "when(mapping.getMappingLock(any())).thenReturn(lock);",
              "line": 114,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMappingLock(T)).thenReturn(java.util.concurrent.locks.Lock)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "274": {
              "code": "// do unsubscribe\r\nwhen(mapping.getMapping(url2)).thenReturn(multiApps);",
              "line": 274,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnsubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "284": {
              "code": "when(mapping.getMapping(url)).thenReturn(multiApps);",
              "line": 284,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.metadata.AbstractServiceNameMapping.getMapping(org.apache.dubbo.common.URL)).thenReturn(java.util.Set<java.lang.String>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnsubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "Directory<DemoService>": [
    {
      "mockedClass": "Directory<DemoService>",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 3,
      "sequenceCount": 6,
      "sharedStatementLineCount": 4,
      "locReduced": 20,
      "sharedStatements": [
        "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
        "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)"
      ],
      "sequences": [
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testNormal",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "76": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "76": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNormal",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testEx",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "87": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "87": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "87": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testEx",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testFailPercent",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "102": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
            "106": "given(dic.getConsumerUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "102": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
            "106": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "102": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailPercent",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "106": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailPercent",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testNormal",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "76": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "76": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNormal",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testEx",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "87": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "87": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "87": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testEx",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<DemoService>",
          "mockedClass": "Directory<DemoService>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\BroadCastClusterInvokerTest.java",
          "className": "BroadCastClusterInvokerTest",
          "testMethodName": "testFailPercent",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Directory<DemoService> dic;",
            "56": "dic = mock(Directory.class);",
            "64": "given(dic.getUrl()).willReturn(url);",
            "65": "given(dic.getConsumerUrl()).willReturn(url);",
            "66": "given(dic.getInterface()).willReturn(DemoService.class);"
          },
          "testMockLines": {
            "102": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
            "106": "given(dic.getConsumerUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "64": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "65": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "66": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
            "102": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
            "106": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Directory<DemoService> dic;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "56": {
              "code": "dic = mock(Directory.class);",
              "line": 56,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "given(dic.getInterface()).willReturn(DemoService.class);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Directory<DemoService>.getInterface()).thenReturn(Directory<DemoService>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "102": {
              "code": "given(dic.list(invocation)).willReturn(Arrays.asList(invoker1, invoker2, invoker3, invoker4));",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.cluster.support.MockInvoker>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailPercent",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "106": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Directory<DemoService>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailPercent",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invoker<?>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
      "packageName": "org.apache.dubbo.rpc.cluster.filter",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.rpc.cluster.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
          "className": "MetricsClusterFilterTest",
          "testMethodName": "testClusterFilterError",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "109": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));"
          },
          "abstractedStatement": {
            "109": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "109": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testClusterFilterError",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.rpc.cluster.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\filter\\MetricsClusterFilterTest.java",
          "className": "MetricsClusterFilterTest",
          "testMethodName": "testClusterFilterError",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "109": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));"
          },
          "abstractedStatement": {
            "109": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "109": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testClusterFilterError",
                "methodAnnotations": []
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
      "packageName": "org.apache.dubbo.metrics.filter",
      "testCaseCount": 7,
      "sequenceCount": 7,
      "sharedStatementLineCount": 1,
      "locReduced": 6,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testCollectDisabled",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "106": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "106": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "106": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCollectDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testSucceedRequests",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "225": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "225": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "225": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 225,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSucceedRequests",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testMissingGroup",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "248": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "248": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "248": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 248,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMissingGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testMissingVersion",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "313": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "313": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "313": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 313,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMissingVersion",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testMissingGroupAndVersion",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "336": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "336": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "336": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 336,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMissingGroupAndVersion",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testGenericCall",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "359": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "359": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "359": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 359,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGenericCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testThrowable",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "404": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));"
          },
          "abstractedStatement": {
            "404": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "404": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 404,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testThrowable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
      "packageName": "org.apache.dubbo.metrics.filter",
      "testCaseCount": 5,
      "sequenceCount": 5,
      "sharedStatementLineCount": 1,
      "locReduced": 4,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testUnknownFailedRequests",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "117": "given(invoker.invoke(invocation)).willThrow(new RpcException(\"failed\"));"
          },
          "abstractedStatement": {
            "117": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "117": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(\"failed\"));",
              "line": 117,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownFailedRequests",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testBusinessFailedRequests",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "144": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));"
          },
          "abstractedStatement": {
            "144": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "144": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 144,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBusinessFailedRequests",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testTimeoutRequests",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "172": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));"
          },
          "abstractedStatement": {
            "172": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "172": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 172,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testTimeoutRequests",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testLimitRequests",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "201": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION));"
          },
          "abstractedStatement": {
            "201": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "201": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION));",
              "line": 201,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLimitRequests",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.metrics.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\filter\\MetricsFilterTest.java",
          "className": "MetricsFilterTest",
          "testMethodName": "testFilterError",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private final Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "279": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));"
          },
          "abstractedStatement": {
            "279": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "private final Invoker<?> invoker = mock(Invoker.class);",
              "line": 68,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "279": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RpcException(errorCode));",
              "line": 279,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFilterError",
                "methodAnnotations": []
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
      "packageName": "org.apache.dubbo.validation.filter",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 2,
      "locReduced": 6,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithNotExistClass",
          "overlapLines": [],
          "shareableMockLines": {
            "38": "private Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "55": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
            "56": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "55": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "56": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "private Invoker<?> invoker = mock(Invoker.class);",
              "line": 38,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "55": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithNotExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithNotExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithExistClass",
          "overlapLines": [],
          "shareableMockLines": {
            "38": "private Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "72": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
            "73": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "72": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "73": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "private Invoker<?> invoker = mock(Invoker.class);",
              "line": 38,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "72": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "73": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 73,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithoutUrlParameters",
          "overlapLines": [],
          "shareableMockLines": {
            "38": "private Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "89": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
            "90": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "89": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "90": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "private Invoker<?> invoker = mock(Invoker.class);",
              "line": 38,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "89": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 89,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "90": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<?>",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWhileMethodNameStartWithDollar",
          "overlapLines": [],
          "shareableMockLines": {
            "38": "private Invoker<?> invoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "106": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
            "107": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "106": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "107": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "private Invoker<?> invoker = mock(Invoker.class);",
              "line": 38,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "106": {
              "code": "given(invoker.invoke(invocation)).willReturn(new AppResponse(\"success\"));",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "107": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 1,
      "sequenceCount": 4,
      "sharedStatementLineCount": 5,
      "locReduced": 15,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "dic",
          "variableType": "Directory<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testNoInvoke",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Directory<FailoverClusterInvokerTest> dic;",
            "71": "dic = mock(Directory.class);",
            "73": "given(dic.getUrl()).willReturn(url);",
            "74": "given(dic.getConsumerUrl()).willReturn(url);",
            "75": "given(dic.list(invocation)).willReturn(invokers);",
            "76": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "testMockLines": {
            "254": "dic = mock(Directory.class);",
            "256": "given(dic.getUrl()).willReturn(url);",
            "257": "given(dic.getConsumerUrl()).willReturn(url);",
            "258": "given(dic.list(invocation)).willReturn(null);",
            "259": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "73": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "74": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
            "256": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "257": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "258": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
            "259": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Directory<FailoverClusterInvokerTest> dic;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "71": {
              "code": "dic = mock(Directory.class);",
              "line": 71,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "73": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 73,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "74": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 74,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "254": {
              "code": "dic = mock(Directory.class);",
              "line": 254,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 256,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 257,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "258": {
              "code": "given(dic.list(invocation)).willReturn(null);",
              "line": 258,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testNoInvoke",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Directory<FailoverClusterInvokerTest> dic;",
            "71": "dic = mock(Directory.class);",
            "73": "given(dic.getUrl()).willReturn(url);",
            "74": "given(dic.getConsumerUrl()).willReturn(url);",
            "75": "given(dic.list(invocation)).willReturn(invokers);",
            "76": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "testMockLines": {
            "254": "dic = mock(Directory.class);",
            "256": "given(dic.getUrl()).willReturn(url);",
            "257": "given(dic.getConsumerUrl()).willReturn(url);",
            "258": "given(dic.list(invocation)).willReturn(null);",
            "259": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "73": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "74": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
            "256": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "257": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "258": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
            "259": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Directory<FailoverClusterInvokerTest> dic;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "71": {
              "code": "dic = mock(Directory.class);",
              "line": 71,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "73": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 73,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "74": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 74,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "254": {
              "code": "dic = mock(Directory.class);",
              "line": 254,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 256,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 257,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "258": {
              "code": "given(dic.list(invocation)).willReturn(null);",
              "line": 258,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testNoInvoke",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Directory<FailoverClusterInvokerTest> dic;",
            "71": "dic = mock(Directory.class);",
            "73": "given(dic.getUrl()).willReturn(url);",
            "74": "given(dic.getConsumerUrl()).willReturn(url);",
            "75": "given(dic.list(invocation)).willReturn(invokers);",
            "76": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "testMockLines": {
            "254": "dic = mock(Directory.class);",
            "256": "given(dic.getUrl()).willReturn(url);",
            "257": "given(dic.getConsumerUrl()).willReturn(url);",
            "258": "given(dic.list(invocation)).willReturn(null);",
            "259": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "73": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "74": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
            "256": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "257": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "258": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
            "259": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Directory<FailoverClusterInvokerTest> dic;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "71": {
              "code": "dic = mock(Directory.class);",
              "line": 71,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "73": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 73,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "74": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 74,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "254": {
              "code": "dic = mock(Directory.class);",
              "line": 254,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 256,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 257,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "258": {
              "code": "given(dic.list(invocation)).willReturn(null);",
              "line": 258,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testNoInvoke",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Directory<FailoverClusterInvokerTest> dic;",
            "71": "dic = mock(Directory.class);",
            "73": "given(dic.getUrl()).willReturn(url);",
            "74": "given(dic.getConsumerUrl()).willReturn(url);",
            "75": "given(dic.list(invocation)).willReturn(invokers);",
            "76": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "testMockLines": {
            "254": "dic = mock(Directory.class);",
            "256": "given(dic.getUrl()).willReturn(url);",
            "257": "given(dic.getConsumerUrl()).willReturn(url);",
            "258": "given(dic.list(invocation)).willReturn(null);",
            "259": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "73": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "74": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
            "256": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "257": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "258": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
            "259": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Directory<FailoverClusterInvokerTest> dic;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "71": {
              "code": "dic = mock(Directory.class);",
              "line": 71,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "73": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 73,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "74": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 74,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "254": {
              "code": "dic = mock(Directory.class);",
              "line": 254,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 256,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 257,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "258": {
              "code": "given(dic.list(invocation)).willReturn(null);",
              "line": 258,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "given(dic.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invocation": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invocation",
      "packageName": "org.apache.dubbo.rpc.filter",
      "testCaseCount": 7,
      "sequenceCount": 7,
      "sharedStatementLineCount": 3,
      "locReduced": 18,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerGeneric",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "53": "invocation = mock(RpcInvocation.class);",
            "54": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
            "55": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
            "56": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "54": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "55": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "56": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "53": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 53,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "73": "invocation = mock(RpcInvocation.class);",
            "74": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
            "75": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
            "76": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "74": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "75": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "76": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "73": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 73,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerJsonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "94": "invocation = mock(RpcInvocation.class);",
            "95": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
            "96": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
            "97": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "95": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "96": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "97": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "94": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 94,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "95": {
              "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
              "line": 95,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "96": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
              "line": 96,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "97": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 97,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonEnumSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "117": "invocation = mock(RpcInvocation.class);",
            "118": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
            "119": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
            "120": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "118": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "119": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "120": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "117": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 117,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "118": {
              "code": "given(invocation.getMethodName()).willReturn(\"enumlength\");",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "119": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Type[].class });",
              "line": 119,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "120": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 120,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonNonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "140": "invocation = mock(RpcInvocation.class);",
            "141": "given(invocation.getMethodName()).willReturn(\"echo\");",
            "142": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "143": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "141": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "142": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "143": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "140": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 140,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "141": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
              "line": 141,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "142": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 142,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "143": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 143,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invocation invocation;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "160": "invocation = mock(RpcInvocation.class);",
            "161": "given(invocation.getMethodName()).willReturn(\"echo\");",
            "162": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "163": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });"
          },
          "abstractedStatement": {
            "161": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "162": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "163": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invocation invocation;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "160": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 160,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "161": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
              "line": 161,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "162": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 162,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "163": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 163,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ContextFilterTest.java",
          "className": "ContextFilterTest",
          "testMethodName": "testSetContext",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "Invocation invocation;"
          },
          "testMockLines": {
            "50": "invocation = mock(Invocation.class);",
            "51": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
            "52": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
            "53": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
            "54": "given(invocation.getObjectAttachments()).willReturn(null);"
          },
          "abstractedStatement": {
            "51": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "52": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "53": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "54": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Invocation invocation;",
              "line": 45,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "50": {
              "code": "invocation = mock(Invocation.class);",
              "line": 50,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSetContext",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "51": {
              "code": "given(invocation.getMethodName()).willReturn(\"$enumlength\");",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSetContext",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "52": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { Enum.class });",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSetContext",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "53": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"hello\" });",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSetContext",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "54": {
              "code": "given(invocation.getObjectAttachments()).willReturn(null);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSetContext",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invocation",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 8,
      "sequenceCount": 8,
      "sharedStatementLineCount": 5,
      "locReduced": 35,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "109": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
            "110": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "111": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "112": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "113": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "109": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "110": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "111": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "112": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "113": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "111": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 111,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "112": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "187": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
            "188": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
            "189": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
            "190": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "191": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "187": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "188": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "189": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "190": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "191": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "187": {
              "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
              "line": 187,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "188": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
              "line": 188,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "190": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 190,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "191": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 191,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu1",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "235": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
            "236": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
            "237": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
            "238": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "239": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "235": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "236": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "237": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "238": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "239": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "235": {
              "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
              "line": 235,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "236": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
              "line": 236,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "237": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
              "line": 237,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "238": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 238,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "239": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 239,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToNoInvokerAvailableException",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "297": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
            "298": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
            "299": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
            "300": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "301": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "297": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "298": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "299": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "300": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "301": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "297": {
              "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
              "line": 297,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "298": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
              "line": 298,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "299": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
              "line": 299,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "300": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 300,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "301": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 301,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToException",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "354": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
            "355": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
            "356": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
            "357": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "358": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "354": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "355": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "356": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "357": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "358": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "354": {
              "code": "given(invocation.getMethodName()).willReturn(\"addMenu\");",
              "line": 354,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "355": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class, List.class });",
              "line": 355,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "356": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { menu, menuItems });",
              "line": 356,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "357": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 357,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "358": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 358,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "402": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
            "403": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "404": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "405": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "406": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "402": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "403": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "404": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "405": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "406": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "402": {
              "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
              "line": 402,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "403": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 403,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "404": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 404,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "405": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 405,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "406": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 406,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuWithMergerDefault",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "448": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
            "449": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "450": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "451": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "452": "given(invocation.getInvoker()).willReturn(firstInvoker);",
            "454": "// mock ApplicationModel\r\ngiven(invocation.getModuleModel()).willReturn(moduleModel);",
            "455": "given(invocation.getModuleModel().getApplicationModel()).willReturn(ApplicationModel.defaultModel());"
          },
          "abstractedStatement": {
            "448": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "449": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "450": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "451": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "452": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "454": "when(org.apache.dubbo.rpc.Invocation.getModuleModel()).thenReturn(org.apache.dubbo.rpc.model.ModuleModel)",
            "455": "when(org.apache.dubbo.rpc.model.ModuleModel.getApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "448": {
              "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
              "line": 448,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "449": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 449,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "450": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 450,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "451": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 451,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "452": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 452,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "454": {
              "code": "// mock ApplicationModel\r\ngiven(invocation.getModuleModel()).willReturn(moduleModel);",
              "line": 454,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getModuleModel()).thenReturn(org.apache.dubbo.rpc.model.ModuleModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "455": {
              "code": "given(invocation.getModuleModel().getApplicationModel()).willReturn(ApplicationModel.defaultModel());",
              "line": 455,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testDestroy",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invocation invocation = mock(RpcInvocation.class);",
            "100": "invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "509": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
            "510": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "511": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "512": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
            "513": "given(invocation.getInvoker()).willReturn(firstInvoker);"
          },
          "abstractedStatement": {
            "509": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "510": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "511": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "512": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
            "513": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invocation invocation = mock(RpcInvocation.class);",
              "line": 57,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "invocation = mock(RpcInvocation.class);",
              "line": 100,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "509": {
              "code": "given(invocation.getMethodName()).willReturn(\"getMenu\");",
              "line": 509,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "510": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 510,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "511": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 511,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "512": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 512,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "513": {
              "code": "given(invocation.getInvoker()).willReturn(firstInvoker);",
              "line": 513,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getInvoker()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invocation",
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 3,
      "locReduced": 6,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
        "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
        "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testPreferredStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Invocation invocation = mock(Invocation.class);"
          },
          "testMockLines": {
            "59": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "60": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "61": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());"
          },
          "abstractedStatement": {
            "59": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "60": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "61": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Invocation invocation = mock(Invocation.class);",
              "line": 47,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "59": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Invocation invocation = mock(Invocation.class);"
          },
          "testMockLines": {
            "103": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "104": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "105": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());"
          },
          "abstractedStatement": {
            "103": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "104": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "105": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Invocation invocation = mock(Invocation.class);",
              "line": 47,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "103": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "105": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 105,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "mockedClass": "org.apache.dubbo.rpc.Invocation",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneForceStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Invocation invocation = mock(Invocation.class);"
          },
          "testMockLines": {
            "148": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
            "149": "given(invocation.getArguments()).willReturn(new Object[] {});",
            "150": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());"
          },
          "abstractedStatement": {
            "148": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "149": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "150": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Invocation invocation = mock(Invocation.class);",
              "line": 47,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "148": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] {});",
              "line": 148,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "149": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] {});",
              "line": 149,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "150": {
              "code": "given(invocation.getObjectAttachments()).willReturn(new HashMap<>());",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachments()).thenReturn(java.util.HashMap)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "ChannelHandlerContext": [
    {
      "mockedClass": "ChannelHandlerContext",
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)"
      ],
      "sequences": [
        {
          "variableName": "ctx",
          "variableType": "ChannelHandlerContext",
          "mockedClass": "ChannelHandlerContext",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
          "className": "TripleHttp2ClientResponseHandlerTest",
          "testMethodName": "testUserEventTriggered",
          "overlapLines": [],
          "shareableMockLines": {
            "39": "private ChannelHandlerContext ctx;",
            "46": "ctx = Mockito.mock(ChannelHandlerContext.class);",
            "48": "Mockito.when(ctx.channel()).thenReturn(channel);"
          },
          "testMockLines": {
            "56": "handler.userEventTriggered(ctx, goAwayFrame);",
            "57": "Mockito.verify(ctx, Mockito.times(1)).close();",
            "61": "handler.userEventTriggered(ctx, resetFrame);",
            "62": "Mockito.verify(ctx, Mockito.times(2)).close();"
          },
          "abstractedStatement": {
            "48": "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "private ChannelHandlerContext ctx;",
              "line": 39,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "46": {
              "code": "ctx = Mockito.mock(ChannelHandlerContext.class);",
              "line": 46,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "48": {
              "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
              "line": 48,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "56": {
              "code": "handler.userEventTriggered(ctx, goAwayFrame);",
              "line": 56,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUserEventTriggered",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "Mockito.verify(ctx, Mockito.times(1)).close();",
              "line": 57,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUserEventTriggered",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "handler.userEventTriggered(ctx, resetFrame);",
              "line": 61,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUserEventTriggered",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "Mockito.verify(ctx, Mockito.times(2)).close();",
              "line": 62,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUserEventTriggered",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "ctx",
          "variableType": "ChannelHandlerContext",
          "mockedClass": "ChannelHandlerContext",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
          "className": "TripleHttp2ClientResponseHandlerTest",
          "testMethodName": "testExceptionCaught",
          "overlapLines": [],
          "shareableMockLines": {
            "39": "private ChannelHandlerContext ctx;",
            "46": "ctx = Mockito.mock(ChannelHandlerContext.class);",
            "48": "Mockito.when(ctx.channel()).thenReturn(channel);"
          },
          "testMockLines": {
            "76": "handler.exceptionCaught(ctx, exception);",
            "77": "Mockito.verify(ctx).close();"
          },
          "abstractedStatement": {
            "48": "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "private ChannelHandlerContext ctx;",
              "line": 39,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "46": {
              "code": "ctx = Mockito.mock(ChannelHandlerContext.class);",
              "line": 46,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "48": {
              "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
              "line": 48,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(ChannelHandlerContext.channel()).thenReturn(ChannelHandlerContext)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "handler.exceptionCaught(ctx, exception);",
              "line": 76,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testExceptionCaught",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "Mockito.verify(ctx).close();",
              "line": 77,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExceptionCaught",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invoker": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker",
      "packageName": "org.apache.dubbo.rpc.filter",
      "testCaseCount": 6,
      "sequenceCount": 6,
      "sharedStatementLineCount": 3,
      "locReduced": 15,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerGeneric",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "58": "invoker = mock(Invoker.class);",
            "59": "given(invoker.isAvailable()).willReturn(true);",
            "60": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "63": "given(invoker.invoke(invocation)).willReturn(result);",
            "65": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "59": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "60": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "63": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "65": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "58": {
              "code": "invoker = mock(Invoker.class);",
              "line": 58,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "63": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 63,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerGeneric",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "78": "invoker = mock(Invoker.class);",
            "79": "given(invoker.isAvailable()).willReturn(true);",
            "80": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "84": "given(invoker.invoke(invocation)).willReturn(result);",
            "86": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "79": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "80": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "84": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "86": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "78": {
              "code": "invoker = mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "84": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 84,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerJsonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "99": "invoker = mock(Invoker.class);",
            "100": "given(invoker.isAvailable()).willReturn(true);",
            "101": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "105": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
            "107": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "100": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "101": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "105": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "107": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "99": {
              "code": "invoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "100": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 100,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "101": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "105": {
              "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
              "line": 105,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "107": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonEnumSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "122": "invoker = mock(Invoker.class);",
            "123": "given(invoker.isAvailable()).willReturn(true);",
            "124": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "128": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
            "130": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "123": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "124": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "128": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "130": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "122": {
              "code": "invoker = mock(Invoker.class);",
              "line": 122,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "123": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 123,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "124": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 124,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(invoker.invoke(invocation)).willReturn(defaultAsyncResult);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "130": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 130,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonEnumSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonNonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "145": "invoker = mock(Invoker.class);",
            "146": "given(invoker.isAvailable()).willReturn(true);",
            "147": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "150": "given(invoker.invoke(invocation)).willReturn(result);",
            "152": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "146": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "147": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "150": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "152": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "145": {
              "code": "invoker = mock(Invoker.class);",
              "line": 145,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "146": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 146,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "147": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 147,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "150": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonNonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\CompatibleFilterFilterTest.java",
          "className": "CompatibleFilterFilterTest",
          "testMethodName": "testInvokerNonJsonPojoSerialization",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker invoker;",
            "48": "Mockito.reset(invocation, invoker);"
          },
          "testMockLines": {
            "165": "invoker = mock(Invoker.class);",
            "166": "given(invoker.isAvailable()).willReturn(true);",
            "167": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "170": "given(invoker.invoke(invocation)).willReturn(result);",
            "172": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "166": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "167": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "170": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "172": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker invoker;",
              "line": 44,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "Mockito.reset(invocation, invoker);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "165": {
              "code": "invoker = mock(Invoker.class);",
              "line": 165,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "167": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 167,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "170": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 170,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "172": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 172,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerNonJsonPojoSerialization",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 7,
      "sequenceCount": 71,
      "sharedStatementLineCount": 1,
      "locReduced": 70,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "149": "when(invoker1.isAvailable()).thenReturn(false);",
            "158": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "149": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "158": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "149": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 149,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRetry",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "203": "when(invoker1.isAvailable()).thenReturn(false);",
            "210": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "203": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "210": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "203": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 203,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "210": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 210,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "261": "when(invoker1.isAvailable()).thenReturn(false);",
            "265": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "261": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "265": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "261": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 261,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "265": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 265,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "150": "when(invoker2.isAvailable()).thenReturn(false);",
            "166": "when(invoker2.isAvailable()).thenReturn(true);",
            "167": "invokerSet.add(invoker2);",
            "175": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "166": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "175": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "167": {
              "code": "invokerSet.add(invoker2);",
              "line": 167,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "175": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 175,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "237": "when(invoker2.isAvailable()).thenReturn(false);",
            "266": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "237": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "266": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "237": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 237,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "266": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 266,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "151": "when(invoker3.isAvailable()).thenReturn(false);",
            "181": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "151": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "181": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "151": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "181": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "238": "when(invoker3.isAvailable()).thenReturn(false);",
            "267": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "238": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "267": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "238": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 238,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "267": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 267,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "152": "when(invoker4.isAvailable()).thenReturn(false);",
            "182": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "152": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "182": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "152": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "239": "when(invoker4.isAvailable()).thenReturn(false);",
            "268": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "239": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "268": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "239": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 239,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "268": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 268,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "153": "when(invoker5.isAvailable()).thenReturn(false);"
          },
          "abstractedStatement": {
            "153": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "153": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "240": "when(invoker5.isAvailable()).thenReturn(false);",
            "269": "when(invoker5.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "240": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "269": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "240": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 240,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "269": {
              "code": "when(invoker5.isAvailable()).thenReturn(true);",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker6",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invoker invoker6;",
            "81": "invoker6 = Mockito.mock(Invoker.class);",
            "97": "configInvoker(invoker6);"
          },
          "testMockLines": {
            "241": "when(invoker6.isAvailable()).thenReturn(false);",
            "270": "when(invoker6.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "241": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "270": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invoker invoker6;",
              "line": 57,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "81": {
              "code": "invoker6 = Mockito.mock(Invoker.class);",
              "line": 81,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "97": {
              "code": "configInvoker(invoker6);",
              "line": 97,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "241": {
              "code": "when(invoker6.isAvailable()).thenReturn(false);",
              "line": 241,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "270": {
              "code": "when(invoker6.isAvailable()).thenReturn(true);",
              "line": 270,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker7",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private Invoker invoker7;",
            "82": "invoker7 = Mockito.mock(Invoker.class);",
            "98": "configInvoker(invoker7);"
          },
          "testMockLines": {
            "242": "when(invoker7.isAvailable()).thenReturn(false);",
            "271": "when(invoker7.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "242": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "271": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private Invoker invoker7;",
              "line": 58,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "82": {
              "code": "invoker7 = Mockito.mock(Invoker.class);",
              "line": 82,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "98": {
              "code": "configInvoker(invoker7);",
              "line": 98,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "242": {
              "code": "when(invoker7.isAvailable()).thenReturn(false);",
              "line": 242,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "271": {
              "code": "when(invoker7.isAvailable()).thenReturn(true);",
              "line": 271,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker8",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private Invoker invoker8;",
            "83": "invoker8 = Mockito.mock(Invoker.class);",
            "99": "configInvoker(invoker8);"
          },
          "testMockLines": {
            "243": "when(invoker8.isAvailable()).thenReturn(false);",
            "272": "when(invoker8.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "243": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "272": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private Invoker invoker8;",
              "line": 59,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "83": {
              "code": "invoker8 = Mockito.mock(Invoker.class);",
              "line": 83,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "99": {
              "code": "configInvoker(invoker8);",
              "line": 99,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "243": {
              "code": "when(invoker8.isAvailable()).thenReturn(false);",
              "line": 243,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "272": {
              "code": "when(invoker8.isAvailable()).thenReturn(true);",
              "line": 272,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker9",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "60": "private Invoker invoker9;",
            "84": "invoker9 = Mockito.mock(Invoker.class);",
            "100": "configInvoker(invoker9);"
          },
          "testMockLines": {
            "244": "when(invoker9.isAvailable()).thenReturn(false);",
            "273": "when(invoker9.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "244": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "273": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "60": {
              "code": "private Invoker invoker9;",
              "line": 60,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "84": {
              "code": "invoker9 = Mockito.mock(Invoker.class);",
              "line": 84,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "100": {
              "code": "configInvoker(invoker9);",
              "line": 100,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "244": {
              "code": "when(invoker9.isAvailable()).thenReturn(false);",
              "line": 244,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "273": {
              "code": "when(invoker9.isAvailable()).thenReturn(true);",
              "line": 273,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker10",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "61": "private Invoker invoker10;",
            "85": "invoker10 = Mockito.mock(Invoker.class);",
            "101": "configInvoker(invoker10);"
          },
          "testMockLines": {
            "245": "when(invoker10.isAvailable()).thenReturn(false);",
            "274": "when(invoker10.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "245": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "274": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "61": {
              "code": "private Invoker invoker10;",
              "line": 61,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "85": {
              "code": "invoker10 = Mockito.mock(Invoker.class);",
              "line": 85,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "101": {
              "code": "configInvoker(invoker10);",
              "line": 101,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "245": {
              "code": "when(invoker10.isAvailable()).thenReturn(false);",
              "line": 245,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "274": {
              "code": "when(invoker10.isAvailable()).thenReturn(true);",
              "line": 274,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker11",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "62": "private Invoker invoker11;",
            "86": "invoker11 = Mockito.mock(Invoker.class);",
            "102": "configInvoker(invoker11);"
          },
          "testMockLines": {
            "246": "when(invoker11.isAvailable()).thenReturn(false);",
            "275": "when(invoker11.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "246": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "275": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "private Invoker invoker11;",
              "line": 62,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "86": {
              "code": "invoker11 = Mockito.mock(Invoker.class);",
              "line": 86,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "102": {
              "code": "configInvoker(invoker11);",
              "line": 102,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "246": {
              "code": "when(invoker11.isAvailable()).thenReturn(false);",
              "line": 246,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "275": {
              "code": "when(invoker11.isAvailable()).thenReturn(true);",
              "line": 275,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker12",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Invoker invoker12;",
            "87": "invoker12 = Mockito.mock(Invoker.class);",
            "103": "configInvoker(invoker12);"
          },
          "testMockLines": {
            "247": "when(invoker12.isAvailable()).thenReturn(false);",
            "276": "when(invoker12.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "247": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "276": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Invoker invoker12;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "87": {
              "code": "invoker12 = Mockito.mock(Invoker.class);",
              "line": 87,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "103": {
              "code": "configInvoker(invoker12);",
              "line": 103,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "247": {
              "code": "when(invoker12.isAvailable()).thenReturn(false);",
              "line": 247,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "276": {
              "code": "when(invoker12.isAvailable()).thenReturn(true);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker13",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "private Invoker invoker13;",
            "88": "invoker13 = Mockito.mock(Invoker.class);",
            "104": "configInvoker(invoker13);"
          },
          "testMockLines": {
            "248": "when(invoker13.isAvailable()).thenReturn(false);",
            "277": "when(invoker13.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "248": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "277": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "private Invoker invoker13;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker13 = Mockito.mock(Invoker.class);",
              "line": 88,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "104": {
              "code": "configInvoker(invoker13);",
              "line": 104,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "248": {
              "code": "when(invoker13.isAvailable()).thenReturn(false);",
              "line": 248,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "277": {
              "code": "when(invoker13.isAvailable()).thenReturn(true);",
              "line": 277,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker14",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "65": "private Invoker invoker14;",
            "89": "invoker14 = Mockito.mock(Invoker.class);",
            "105": "configInvoker(invoker14);"
          },
          "testMockLines": {
            "249": "when(invoker14.isAvailable()).thenReturn(false);",
            "278": "when(invoker14.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "249": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "278": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "private Invoker invoker14;",
              "line": 65,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "89": {
              "code": "invoker14 = Mockito.mock(Invoker.class);",
              "line": 89,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "105": {
              "code": "configInvoker(invoker14);",
              "line": 105,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "249": {
              "code": "when(invoker14.isAvailable()).thenReturn(false);",
              "line": 249,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "278": {
              "code": "when(invoker14.isAvailable()).thenReturn(true);",
              "line": 278,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker15",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "66": "private Invoker invoker15;",
            "90": "invoker15 = Mockito.mock(Invoker.class);",
            "106": "configInvoker(invoker15);"
          },
          "testMockLines": {
            "250": "when(invoker15.isAvailable()).thenReturn(false);",
            "279": "when(invoker15.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "250": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "279": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "66": {
              "code": "private Invoker invoker15;",
              "line": 66,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "90": {
              "code": "invoker15 = Mockito.mock(Invoker.class);",
              "line": 90,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "106": {
              "code": "configInvoker(invoker15);",
              "line": 106,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "250": {
              "code": "when(invoker15.isAvailable()).thenReturn(false);",
              "line": 250,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "279": {
              "code": "when(invoker15.isAvailable()).thenReturn(true);",
              "line": 279,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "149": "when(invoker1.isAvailable()).thenReturn(false);",
            "158": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "149": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "158": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "149": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 149,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRetry",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "203": "when(invoker1.isAvailable()).thenReturn(false);",
            "210": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "203": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "210": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "203": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 203,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "210": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 210,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "261": "when(invoker1.isAvailable()).thenReturn(false);",
            "265": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "261": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "265": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "261": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 261,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "265": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 265,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "150": "when(invoker2.isAvailable()).thenReturn(false);",
            "166": "when(invoker2.isAvailable()).thenReturn(true);",
            "167": "invokerSet.add(invoker2);",
            "175": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "166": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "175": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "167": {
              "code": "invokerSet.add(invoker2);",
              "line": 167,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "175": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 175,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "237": "when(invoker2.isAvailable()).thenReturn(false);",
            "266": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "237": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "266": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "237": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 237,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "266": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 266,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "151": "when(invoker3.isAvailable()).thenReturn(false);",
            "181": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "151": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "181": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "151": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "181": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "238": "when(invoker3.isAvailable()).thenReturn(false);",
            "267": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "238": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "267": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "238": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 238,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "267": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 267,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "152": "when(invoker4.isAvailable()).thenReturn(false);",
            "182": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "152": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "182": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "152": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "239": "when(invoker4.isAvailable()).thenReturn(false);",
            "268": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "239": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "268": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "239": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 239,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "268": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 268,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "153": "when(invoker5.isAvailable()).thenReturn(false);"
          },
          "abstractedStatement": {
            "153": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "153": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "240": "when(invoker5.isAvailable()).thenReturn(false);",
            "269": "when(invoker5.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "240": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "269": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "240": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 240,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "269": {
              "code": "when(invoker5.isAvailable()).thenReturn(true);",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker6",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invoker invoker6;",
            "81": "invoker6 = Mockito.mock(Invoker.class);",
            "97": "configInvoker(invoker6);"
          },
          "testMockLines": {
            "241": "when(invoker6.isAvailable()).thenReturn(false);",
            "270": "when(invoker6.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "241": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "270": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invoker invoker6;",
              "line": 57,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "81": {
              "code": "invoker6 = Mockito.mock(Invoker.class);",
              "line": 81,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "97": {
              "code": "configInvoker(invoker6);",
              "line": 97,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "241": {
              "code": "when(invoker6.isAvailable()).thenReturn(false);",
              "line": 241,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "270": {
              "code": "when(invoker6.isAvailable()).thenReturn(true);",
              "line": 270,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker7",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private Invoker invoker7;",
            "82": "invoker7 = Mockito.mock(Invoker.class);",
            "98": "configInvoker(invoker7);"
          },
          "testMockLines": {
            "242": "when(invoker7.isAvailable()).thenReturn(false);",
            "271": "when(invoker7.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "242": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "271": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private Invoker invoker7;",
              "line": 58,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "82": {
              "code": "invoker7 = Mockito.mock(Invoker.class);",
              "line": 82,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "98": {
              "code": "configInvoker(invoker7);",
              "line": 98,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "242": {
              "code": "when(invoker7.isAvailable()).thenReturn(false);",
              "line": 242,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "271": {
              "code": "when(invoker7.isAvailable()).thenReturn(true);",
              "line": 271,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker8",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private Invoker invoker8;",
            "83": "invoker8 = Mockito.mock(Invoker.class);",
            "99": "configInvoker(invoker8);"
          },
          "testMockLines": {
            "243": "when(invoker8.isAvailable()).thenReturn(false);",
            "272": "when(invoker8.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "243": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "272": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private Invoker invoker8;",
              "line": 59,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "83": {
              "code": "invoker8 = Mockito.mock(Invoker.class);",
              "line": 83,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "99": {
              "code": "configInvoker(invoker8);",
              "line": 99,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "243": {
              "code": "when(invoker8.isAvailable()).thenReturn(false);",
              "line": 243,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "272": {
              "code": "when(invoker8.isAvailable()).thenReturn(true);",
              "line": 272,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker9",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "60": "private Invoker invoker9;",
            "84": "invoker9 = Mockito.mock(Invoker.class);",
            "100": "configInvoker(invoker9);"
          },
          "testMockLines": {
            "244": "when(invoker9.isAvailable()).thenReturn(false);",
            "273": "when(invoker9.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "244": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "273": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "60": {
              "code": "private Invoker invoker9;",
              "line": 60,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "84": {
              "code": "invoker9 = Mockito.mock(Invoker.class);",
              "line": 84,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "100": {
              "code": "configInvoker(invoker9);",
              "line": 100,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "244": {
              "code": "when(invoker9.isAvailable()).thenReturn(false);",
              "line": 244,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "273": {
              "code": "when(invoker9.isAvailable()).thenReturn(true);",
              "line": 273,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker10",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "61": "private Invoker invoker10;",
            "85": "invoker10 = Mockito.mock(Invoker.class);",
            "101": "configInvoker(invoker10);"
          },
          "testMockLines": {
            "245": "when(invoker10.isAvailable()).thenReturn(false);",
            "274": "when(invoker10.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "245": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "274": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "61": {
              "code": "private Invoker invoker10;",
              "line": 61,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "85": {
              "code": "invoker10 = Mockito.mock(Invoker.class);",
              "line": 85,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "101": {
              "code": "configInvoker(invoker10);",
              "line": 101,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "245": {
              "code": "when(invoker10.isAvailable()).thenReturn(false);",
              "line": 245,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "274": {
              "code": "when(invoker10.isAvailable()).thenReturn(true);",
              "line": 274,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker11",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "62": "private Invoker invoker11;",
            "86": "invoker11 = Mockito.mock(Invoker.class);",
            "102": "configInvoker(invoker11);"
          },
          "testMockLines": {
            "246": "when(invoker11.isAvailable()).thenReturn(false);",
            "275": "when(invoker11.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "246": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "275": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "private Invoker invoker11;",
              "line": 62,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "86": {
              "code": "invoker11 = Mockito.mock(Invoker.class);",
              "line": 86,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "102": {
              "code": "configInvoker(invoker11);",
              "line": 102,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "246": {
              "code": "when(invoker11.isAvailable()).thenReturn(false);",
              "line": 246,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "275": {
              "code": "when(invoker11.isAvailable()).thenReturn(true);",
              "line": 275,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker12",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Invoker invoker12;",
            "87": "invoker12 = Mockito.mock(Invoker.class);",
            "103": "configInvoker(invoker12);"
          },
          "testMockLines": {
            "247": "when(invoker12.isAvailable()).thenReturn(false);",
            "276": "when(invoker12.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "247": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "276": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Invoker invoker12;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "87": {
              "code": "invoker12 = Mockito.mock(Invoker.class);",
              "line": 87,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "103": {
              "code": "configInvoker(invoker12);",
              "line": 103,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "247": {
              "code": "when(invoker12.isAvailable()).thenReturn(false);",
              "line": 247,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "276": {
              "code": "when(invoker12.isAvailable()).thenReturn(true);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker13",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "private Invoker invoker13;",
            "88": "invoker13 = Mockito.mock(Invoker.class);",
            "104": "configInvoker(invoker13);"
          },
          "testMockLines": {
            "248": "when(invoker13.isAvailable()).thenReturn(false);",
            "277": "when(invoker13.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "248": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "277": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "private Invoker invoker13;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker13 = Mockito.mock(Invoker.class);",
              "line": 88,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "104": {
              "code": "configInvoker(invoker13);",
              "line": 104,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "248": {
              "code": "when(invoker13.isAvailable()).thenReturn(false);",
              "line": 248,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "277": {
              "code": "when(invoker13.isAvailable()).thenReturn(true);",
              "line": 277,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker14",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "65": "private Invoker invoker14;",
            "89": "invoker14 = Mockito.mock(Invoker.class);",
            "105": "configInvoker(invoker14);"
          },
          "testMockLines": {
            "249": "when(invoker14.isAvailable()).thenReturn(false);",
            "278": "when(invoker14.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "249": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "278": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "private Invoker invoker14;",
              "line": 65,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "89": {
              "code": "invoker14 = Mockito.mock(Invoker.class);",
              "line": 89,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "105": {
              "code": "configInvoker(invoker14);",
              "line": 105,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "249": {
              "code": "when(invoker14.isAvailable()).thenReturn(false);",
              "line": 249,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "278": {
              "code": "when(invoker14.isAvailable()).thenReturn(true);",
              "line": 278,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker15",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "66": "private Invoker invoker15;",
            "90": "invoker15 = Mockito.mock(Invoker.class);",
            "106": "configInvoker(invoker15);"
          },
          "testMockLines": {
            "250": "when(invoker15.isAvailable()).thenReturn(false);",
            "279": "when(invoker15.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "250": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "279": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "66": {
              "code": "private Invoker invoker15;",
              "line": 66,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "90": {
              "code": "invoker15 = Mockito.mock(Invoker.class);",
              "line": 90,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "106": {
              "code": "configInvoker(invoker15);",
              "line": 106,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "250": {
              "code": "when(invoker15.isAvailable()).thenReturn(false);",
              "line": 250,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "279": {
              "code": "when(invoker15.isAvailable()).thenReturn(true);",
              "line": 279,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "149": "when(invoker1.isAvailable()).thenReturn(false);",
            "158": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "149": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "158": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "149": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 149,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRetry",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "203": "when(invoker1.isAvailable()).thenReturn(false);",
            "210": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "203": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "210": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "203": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 203,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "210": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 210,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRetry",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "52": "private Invoker invoker1;",
            "76": "invoker1 = Mockito.mock(Invoker.class);",
            "92": "configInvoker(invoker1);",
            "109": "invokerList.add(invoker1);"
          },
          "testMockLines": {
            "261": "when(invoker1.isAvailable()).thenReturn(false);",
            "265": "when(invoker1.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "261": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "265": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "private Invoker invoker1;",
              "line": 52,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "invoker1 = Mockito.mock(Invoker.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "92": {
              "code": "configInvoker(invoker1);",
              "line": 92,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "109": {
              "code": "invokerList.add(invoker1);",
              "line": 109,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "261": {
              "code": "when(invoker1.isAvailable()).thenReturn(false);",
              "line": 261,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "265": {
              "code": "when(invoker1.isAvailable()).thenReturn(true);",
              "line": 265,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "150": "when(invoker2.isAvailable()).thenReturn(false);",
            "166": "when(invoker2.isAvailable()).thenReturn(true);",
            "167": "invokerSet.add(invoker2);",
            "175": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "166": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "175": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "167": {
              "code": "invokerSet.add(invoker2);",
              "line": 167,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "175": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 175,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Invoker invoker2;",
            "77": "invoker2 = Mockito.mock(Invoker.class);",
            "93": "configInvoker(invoker2);",
            "110": "invokerList.add(invoker2);"
          },
          "testMockLines": {
            "237": "when(invoker2.isAvailable()).thenReturn(false);",
            "266": "when(invoker2.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "237": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "266": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Invoker invoker2;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "77": {
              "code": "invoker2 = Mockito.mock(Invoker.class);",
              "line": 77,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "93": {
              "code": "configInvoker(invoker2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "110": {
              "code": "invokerList.add(invoker2);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "237": {
              "code": "when(invoker2.isAvailable()).thenReturn(false);",
              "line": 237,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "266": {
              "code": "when(invoker2.isAvailable()).thenReturn(true);",
              "line": 266,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "151": "when(invoker3.isAvailable()).thenReturn(false);",
            "181": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "151": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "181": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "151": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "181": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Invoker invoker3;",
            "78": "invoker3 = Mockito.mock(Invoker.class);",
            "94": "configInvoker(invoker3);",
            "111": "invokerList.add(invoker3);"
          },
          "testMockLines": {
            "238": "when(invoker3.isAvailable()).thenReturn(false);",
            "267": "when(invoker3.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "238": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "267": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Invoker invoker3;",
              "line": 54,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "78": {
              "code": "invoker3 = Mockito.mock(Invoker.class);",
              "line": 78,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "configInvoker(invoker3);",
              "line": 94,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "111": {
              "code": "invokerList.add(invoker3);",
              "line": 111,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "238": {
              "code": "when(invoker3.isAvailable()).thenReturn(false);",
              "line": 238,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "267": {
              "code": "when(invoker3.isAvailable()).thenReturn(true);",
              "line": 267,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "152": "when(invoker4.isAvailable()).thenReturn(false);",
            "182": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "152": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "182": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "152": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker4",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker invoker4;",
            "79": "invoker4 = Mockito.mock(Invoker.class);",
            "95": "configInvoker(invoker4);",
            "112": "invokerList.add(invoker4);"
          },
          "testMockLines": {
            "239": "when(invoker4.isAvailable()).thenReturn(false);",
            "268": "when(invoker4.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "239": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "268": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker invoker4;",
              "line": 55,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invoker4 = Mockito.mock(Invoker.class);",
              "line": 79,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "95": {
              "code": "configInvoker(invoker4);",
              "line": 95,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "invokerList.add(invoker4);",
              "line": 112,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "239": {
              "code": "when(invoker4.isAvailable()).thenReturn(false);",
              "line": 239,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "268": {
              "code": "when(invoker4.isAvailable()).thenReturn(true);",
              "line": 268,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testBasic",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "153": "when(invoker5.isAvailable()).thenReturn(false);"
          },
          "abstractedStatement": {
            "153": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "153": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBasic",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker5",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker invoker5;",
            "80": "invoker5 = Mockito.mock(Invoker.class);",
            "96": "configInvoker(invoker5);",
            "113": "invokerList.add(invoker5);"
          },
          "testMockLines": {
            "240": "when(invoker5.isAvailable()).thenReturn(false);",
            "269": "when(invoker5.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "240": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "269": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker invoker5;",
              "line": 56,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invoker5 = Mockito.mock(Invoker.class);",
              "line": 80,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "96": {
              "code": "configInvoker(invoker5);",
              "line": 96,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "invokerList.add(invoker5);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "240": {
              "code": "when(invoker5.isAvailable()).thenReturn(false);",
              "line": 240,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "269": {
              "code": "when(invoker5.isAvailable()).thenReturn(true);",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker6",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "57": "private Invoker invoker6;",
            "81": "invoker6 = Mockito.mock(Invoker.class);",
            "97": "configInvoker(invoker6);"
          },
          "testMockLines": {
            "241": "when(invoker6.isAvailable()).thenReturn(false);",
            "270": "when(invoker6.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "241": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "270": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "private Invoker invoker6;",
              "line": 57,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "81": {
              "code": "invoker6 = Mockito.mock(Invoker.class);",
              "line": 81,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "97": {
              "code": "configInvoker(invoker6);",
              "line": 97,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "241": {
              "code": "when(invoker6.isAvailable()).thenReturn(false);",
              "line": 241,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "270": {
              "code": "when(invoker6.isAvailable()).thenReturn(true);",
              "line": 270,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker7",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private Invoker invoker7;",
            "82": "invoker7 = Mockito.mock(Invoker.class);",
            "98": "configInvoker(invoker7);"
          },
          "testMockLines": {
            "242": "when(invoker7.isAvailable()).thenReturn(false);",
            "271": "when(invoker7.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "242": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "271": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private Invoker invoker7;",
              "line": 58,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "82": {
              "code": "invoker7 = Mockito.mock(Invoker.class);",
              "line": 82,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "98": {
              "code": "configInvoker(invoker7);",
              "line": 98,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "242": {
              "code": "when(invoker7.isAvailable()).thenReturn(false);",
              "line": 242,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "271": {
              "code": "when(invoker7.isAvailable()).thenReturn(true);",
              "line": 271,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker8",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private Invoker invoker8;",
            "83": "invoker8 = Mockito.mock(Invoker.class);",
            "99": "configInvoker(invoker8);"
          },
          "testMockLines": {
            "243": "when(invoker8.isAvailable()).thenReturn(false);",
            "272": "when(invoker8.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "243": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "272": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private Invoker invoker8;",
              "line": 59,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "83": {
              "code": "invoker8 = Mockito.mock(Invoker.class);",
              "line": 83,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "99": {
              "code": "configInvoker(invoker8);",
              "line": 99,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "243": {
              "code": "when(invoker8.isAvailable()).thenReturn(false);",
              "line": 243,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "272": {
              "code": "when(invoker8.isAvailable()).thenReturn(true);",
              "line": 272,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker9",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "60": "private Invoker invoker9;",
            "84": "invoker9 = Mockito.mock(Invoker.class);",
            "100": "configInvoker(invoker9);"
          },
          "testMockLines": {
            "244": "when(invoker9.isAvailable()).thenReturn(false);",
            "273": "when(invoker9.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "244": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "273": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "60": {
              "code": "private Invoker invoker9;",
              "line": 60,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "84": {
              "code": "invoker9 = Mockito.mock(Invoker.class);",
              "line": 84,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "100": {
              "code": "configInvoker(invoker9);",
              "line": 100,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "244": {
              "code": "when(invoker9.isAvailable()).thenReturn(false);",
              "line": 244,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "273": {
              "code": "when(invoker9.isAvailable()).thenReturn(true);",
              "line": 273,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker10",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "61": "private Invoker invoker10;",
            "85": "invoker10 = Mockito.mock(Invoker.class);",
            "101": "configInvoker(invoker10);"
          },
          "testMockLines": {
            "245": "when(invoker10.isAvailable()).thenReturn(false);",
            "274": "when(invoker10.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "245": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "274": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "61": {
              "code": "private Invoker invoker10;",
              "line": 61,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "85": {
              "code": "invoker10 = Mockito.mock(Invoker.class);",
              "line": 85,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "101": {
              "code": "configInvoker(invoker10);",
              "line": 101,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "245": {
              "code": "when(invoker10.isAvailable()).thenReturn(false);",
              "line": 245,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "274": {
              "code": "when(invoker10.isAvailable()).thenReturn(true);",
              "line": 274,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker11",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "62": "private Invoker invoker11;",
            "86": "invoker11 = Mockito.mock(Invoker.class);",
            "102": "configInvoker(invoker11);"
          },
          "testMockLines": {
            "246": "when(invoker11.isAvailable()).thenReturn(false);",
            "275": "when(invoker11.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "246": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "275": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "private Invoker invoker11;",
              "line": 62,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "86": {
              "code": "invoker11 = Mockito.mock(Invoker.class);",
              "line": 86,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "102": {
              "code": "configInvoker(invoker11);",
              "line": 102,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "246": {
              "code": "when(invoker11.isAvailable()).thenReturn(false);",
              "line": 246,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "275": {
              "code": "when(invoker11.isAvailable()).thenReturn(true);",
              "line": 275,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker12",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "63": "private Invoker invoker12;",
            "87": "invoker12 = Mockito.mock(Invoker.class);",
            "103": "configInvoker(invoker12);"
          },
          "testMockLines": {
            "247": "when(invoker12.isAvailable()).thenReturn(false);",
            "276": "when(invoker12.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "247": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "276": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "private Invoker invoker12;",
              "line": 63,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "87": {
              "code": "invoker12 = Mockito.mock(Invoker.class);",
              "line": 87,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "103": {
              "code": "configInvoker(invoker12);",
              "line": 103,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "247": {
              "code": "when(invoker12.isAvailable()).thenReturn(false);",
              "line": 247,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "276": {
              "code": "when(invoker12.isAvailable()).thenReturn(true);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker13",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "private Invoker invoker13;",
            "88": "invoker13 = Mockito.mock(Invoker.class);",
            "104": "configInvoker(invoker13);"
          },
          "testMockLines": {
            "248": "when(invoker13.isAvailable()).thenReturn(false);",
            "277": "when(invoker13.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "248": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "277": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "private Invoker invoker13;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker13 = Mockito.mock(Invoker.class);",
              "line": 88,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "104": {
              "code": "configInvoker(invoker13);",
              "line": 104,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "248": {
              "code": "when(invoker13.isAvailable()).thenReturn(false);",
              "line": 248,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "277": {
              "code": "when(invoker13.isAvailable()).thenReturn(true);",
              "line": 277,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker14",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "65": "private Invoker invoker14;",
            "89": "invoker14 = Mockito.mock(Invoker.class);",
            "105": "configInvoker(invoker14);"
          },
          "testMockLines": {
            "249": "when(invoker14.isAvailable()).thenReturn(false);",
            "278": "when(invoker14.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "249": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "278": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "private Invoker invoker14;",
              "line": 65,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "89": {
              "code": "invoker14 = Mockito.mock(Invoker.class);",
              "line": 89,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "105": {
              "code": "configInvoker(invoker14);",
              "line": 105,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "249": {
              "code": "when(invoker14.isAvailable()).thenReturn(false);",
              "line": 249,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "278": {
              "code": "when(invoker14.isAvailable()).thenReturn(true);",
              "line": 278,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker15",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\ConnectivityValidationTest.java",
          "className": "ConnectivityValidationTest",
          "testMethodName": "testRandomSelect",
          "overlapLines": [],
          "shareableMockLines": {
            "66": "private Invoker invoker15;",
            "90": "invoker15 = Mockito.mock(Invoker.class);",
            "106": "configInvoker(invoker15);"
          },
          "testMockLines": {
            "250": "when(invoker15.isAvailable()).thenReturn(false);",
            "279": "when(invoker15.isAvailable()).thenReturn(true);"
          },
          "abstractedStatement": {
            "250": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "279": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "66": {
              "code": "private Invoker invoker15;",
              "line": 66,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "90": {
              "code": "invoker15 = Mockito.mock(Invoker.class);",
              "line": 90,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "106": {
              "code": "configInvoker(invoker15);",
              "line": 106,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "250": {
              "code": "when(invoker15.isAvailable()).thenReturn(false);",
              "line": 250,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "279": {
              "code": "when(invoker15.isAvailable()).thenReturn(true);",
              "line": 279,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRandomSelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "193": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
            "194": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
            "195": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "196": "given(firstInvoker.isAvailable()).willReturn(true);"
          },
          "abstractedStatement": {
            "193": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "194": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "195": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "196": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "193": {
              "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
              "line": 193,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "194": {
              "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 194,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "195": {
              "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 195,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "196": {
              "code": "given(firstInvoker.isAvailable()).willReturn(true);",
              "line": 196,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToNoInvokerAvailableException",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "303": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
            "304": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
            "305": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "306": "given(firstInvoker.isAvailable()).willReturn(true);",
            "307": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));"
          },
          "abstractedStatement": {
            "303": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "304": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "305": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "306": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "307": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "303": {
              "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
              "line": 303,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "304": {
              "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 304,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "305": {
              "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 305,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "306": {
              "code": "given(firstInvoker.isAvailable()).willReturn(true);",
              "line": 306,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "307": {
              "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
              "line": 307,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToException",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "360": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
            "361": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
            "362": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "363": "given(firstInvoker.isAvailable()).willReturn(true);",
            "364": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));"
          },
          "abstractedStatement": {
            "360": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "361": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "362": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "363": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "364": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "360": {
              "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
              "line": 360,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "361": {
              "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 361,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "362": {
              "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 362,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "363": {
              "code": "given(firstInvoker.isAvailable()).willReturn(true);",
              "line": 363,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "364": {
              "code": "given(firstInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
              "line": 364,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "408": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
            "409": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
            "410": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "411": "given(firstInvoker.isAvailable()).willReturn(true);"
          },
          "abstractedStatement": {
            "408": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "409": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "410": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "411": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "408": {
              "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
              "line": 408,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "409": {
              "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 409,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "410": {
              "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 410,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "411": {
              "code": "given(firstInvoker.isAvailable()).willReturn(true);",
              "line": 411,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "198": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
            "199": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
            "200": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "201": "given(secondInvoker.isAvailable()).willReturn(true);"
          },
          "abstractedStatement": {
            "198": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "199": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "200": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "201": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "198": {
              "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
              "line": 198,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "199": {
              "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 199,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "200": {
              "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 200,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "201": {
              "code": "given(secondInvoker.isAvailable()).willReturn(true);",
              "line": 201,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToNoInvokerAvailableException",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "310": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
            "311": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
            "312": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "313": "given(secondInvoker.isAvailable()).willReturn(true);",
            "314": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));"
          },
          "abstractedStatement": {
            "310": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "311": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "312": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "313": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "314": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "310": {
              "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
              "line": 310,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "311": {
              "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 311,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "312": {
              "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 312,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "313": {
              "code": "given(secondInvoker.isAvailable()).willReturn(true);",
              "line": 313,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "314": {
              "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NO_INVOKER_AVAILABLE_AFTER_FILTER));",
              "line": 314,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToException",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "366": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
            "367": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
            "368": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "369": "given(secondInvoker.isAvailable()).willReturn(true);",
            "370": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));"
          },
          "abstractedStatement": {
            "366": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "367": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "368": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "369": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "370": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "366": {
              "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
              "line": 366,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "367": {
              "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 367,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "368": {
              "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 368,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "369": {
              "code": "given(secondInvoker.isAvailable()).willReturn(true);",
              "line": 369,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "370": {
              "code": "given(secondInvoker.invoke(invocation)).willThrow(new RpcException(RpcException.NETWORK_EXCEPTION));",
              "line": 370,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "413": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
            "414": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
            "415": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
            "416": "given(secondInvoker.isAvailable()).willReturn(true);"
          },
          "abstractedStatement": {
            "413": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "414": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "415": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "416": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "413": {
              "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
              "line": 413,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "414": {
              "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 414,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "415": {
              "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 415,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "416": {
              "code": "given(secondInvoker.isAvailable()).willReturn(true);",
              "line": 416,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 3,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
        "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
      ],
      "sequences": [
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testDestroy",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "515": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
            "516": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
            "517": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());"
          },
          "abstractedStatement": {
            "515": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "516": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "517": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "515": {
              "code": "given(firstInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"first\"));",
              "line": 515,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "516": {
              "code": "given(firstInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 516,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "517": {
              "code": "given(firstInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 517,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testDestroy",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "519": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
            "520": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
            "521": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());"
          },
          "abstractedStatement": {
            "519": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "520": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
            "521": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "519": {
              "code": "given(secondInvoker.getUrl()).willReturn(url.addParameter(GROUP_KEY, \"second\"));",
              "line": 519,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "520": {
              "code": "given(secondInvoker.getInterface()).willReturn(MenuService.class);",
              "line": 520,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(org.apache.dubbo.rpc.Invoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "521": {
              "code": "given(secondInvoker.invoke(invocation)).willReturn(new AppResponse());",
              "line": 521,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 3,
      "sequenceCount": 6,
      "sharedStatementLineCount": 0,
      "locReduced": 5,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "115": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "115": {
              "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 115,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu1",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "241": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "241": {
              "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 241,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuWithMergerDefault",
          "overlapLines": [],
          "shareableMockLines": {
            "55": "private Invoker firstInvoker = mock(Invoker.class);",
            "98": "firstInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "457": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "55": {
              "code": "private Invoker firstInvoker = mock(Invoker.class);",
              "line": 55,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "98": {
              "code": "firstInvoker = mock(Invoker.class);",
              "line": 98,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "457": {
              "code": "firstInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"first\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(firstMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 457,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "129": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "129": {
              "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 129,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu1",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "255": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "255": {
              "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 255,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "Invoker",
          "mockedClass": "org.apache.dubbo.rpc.Invoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuWithMergerDefault",
          "overlapLines": [],
          "shareableMockLines": {
            "56": "private Invoker secondInvoker = mock(Invoker.class);",
            "99": "secondInvoker = mock(Invoker.class);"
          },
          "testMockLines": {
            "471": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "56": {
              "code": "private Invoker secondInvoker = mock(Invoker.class);",
              "line": 56,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "99": {
              "code": "secondInvoker = mock(Invoker.class);",
              "line": 99,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "471": {
              "code": "secondInvoker = (Invoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { Invoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url.addParameter(GROUP_KEY, \"second\");\r\n    }\r\n    if (\"getInterface\".equals(method.getName())) {\r\n        return MenuService.class;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return AsyncRpcResult.newDefaultAsyncResult(secondMenu, invocation);\r\n    }\r\n    return null;\r\n});",
              "line": 471,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Protocol": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Protocol",
      "packageName": "org.apache.dubbo.config",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)"
      ],
      "sequences": [
        {
          "variableName": "protocolDelegate",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.config",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java",
          "className": "ServiceConfigTest",
          "testMethodName": "testExport",
          "overlapLines": [],
          "shareableMockLines": {
            "89": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);",
            "108": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);"
          },
          "testMockLines": {
            "188": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));"
          },
          "abstractedStatement": {
            "108": "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)"
          },
          "rawStatementInfo": {
            "89": {
              "code": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);",
              "line": 89,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "108": {
              "code": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);",
              "line": 108,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "188": {
              "code": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));",
              "line": 188,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExport",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocolDelegate",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.config",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\ServiceConfigTest.java",
          "className": "ServiceConfigTest",
          "testMethodName": "testExportWithoutRegistryConfig",
          "overlapLines": [],
          "shareableMockLines": {
            "89": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);",
            "108": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);"
          },
          "testMockLines": {
            "349": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));"
          },
          "abstractedStatement": {
            "108": "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)"
          },
          "rawStatementInfo": {
            "89": {
              "code": "private Protocol protocolDelegate = Mockito.mock(Protocol.class);",
              "line": 89,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "108": {
              "code": "Mockito.when(protocolDelegate.export(Mockito.any(Invoker.class))).thenReturn(exporter);",
              "line": 108,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.export(org.apache.dubbo.rpc.Invoker)).thenReturn(org.apache.dubbo.rpc.Exporter)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "349": {
              "code": "// export MetadataService and DemoService in \"mockprotocol2\" protocol.\r\nMockito.verify(protocolDelegate, times(2)).export(Mockito.any(Invoker.class));",
              "line": 349,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExportWithoutRegistryConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.Protocol",
      "packageName": "org.apache.dubbo.qos.protocol",
      "testCaseCount": 3,
      "sequenceCount": 4,
      "sharedStatementLineCount": 0,
      "locReduced": 3,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.qos.protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
          "className": "QosProtocolWrapperTest",
          "testMethodName": "testExport",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private Protocol protocol = mock(Protocol.class);"
          },
          "testMockLines": {
            "97": "verify(protocol).export(invoker);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private Protocol protocol = mock(Protocol.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "verify(protocol).export(invoker);",
              "line": 97,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExport",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.qos.protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
          "className": "QosProtocolWrapperTest",
          "testMethodName": "testRefer",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private Protocol protocol = mock(Protocol.class);"
          },
          "testMockLines": {
            "107": "verify(protocol).refer(BaseCommand.class, url);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private Protocol protocol = mock(Protocol.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "107": {
              "code": "verify(protocol).refer(BaseCommand.class, url);",
              "line": 107,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRefer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.qos.protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
          "className": "QosProtocolWrapperTest",
          "testMethodName": "testMultiProtocol",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private Protocol protocol = mock(Protocol.class);"
          },
          "testMockLines": {
            "126": "verify(protocol).export(invoker);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private Protocol protocol = mock(Protocol.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "126": {
              "code": "verify(protocol).export(invoker);",
              "line": 126,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "triProtocol",
          "variableType": "Protocol",
          "mockedClass": "org.apache.dubbo.rpc.Protocol",
          "packageName": "org.apache.dubbo.qos.protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\protocol\\QosProtocolWrapperTest.java",
          "className": "QosProtocolWrapperTest",
          "testMethodName": "testMultiProtocol",
          "overlapLines": [],
          "shareableMockLines": {
            "51": "private Protocol triProtocol = mock(Protocol.class);"
          },
          "testMockLines": {
            "118": "verify(triProtocol).export(triInvoker);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "51": {
              "code": "private Protocol triProtocol = mock(Protocol.class);",
              "line": 51,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "118": {
              "code": "verify(triProtocol).export(triInvoker);",
              "line": 118,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "ApplicationContext": [
    {
      "mockedClass": "ApplicationContext",
      "packageName": "org.apache.dubbo.config.spring.status",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)"
      ],
      "sequences": [
        {
          "variableName": "applicationContext",
          "variableType": "ApplicationContext",
          "mockedClass": "ApplicationContext",
          "packageName": "org.apache.dubbo.config.spring.status",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "className": "DataSourceStatusCheckerTest",
          "testMethodName": "testWithoutDatasource",
          "overlapLines": [],
          "shareableMockLines": {
            "48": "@Mock\r\nprivate ApplicationContext applicationContext;",
            "55": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
            "60": "Mockito.reset(applicationContext);"
          },
          "testMockLines": {
            "73": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);"
          },
          "abstractedStatement": {
            "73": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "@Mock\r\nprivate ApplicationContext applicationContext;",
              "line": 48,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": [
                  "Mock"
                ]
              }
            },
            "55": {
              "code": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
              "line": 55,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "Mockito.reset(applicationContext);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "73": {
              "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
              "line": 73,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithoutDatasource",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationContext",
          "variableType": "ApplicationContext",
          "mockedClass": "ApplicationContext",
          "packageName": "org.apache.dubbo.config.spring.status",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "className": "DataSourceStatusCheckerTest",
          "testMethodName": "testWithDatasourceHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {
            "48": "@Mock\r\nprivate ApplicationContext applicationContext;",
            "55": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
            "60": "Mockito.reset(applicationContext);"
          },
          "testMockLines": {
            "90": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);"
          },
          "abstractedStatement": {
            "90": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "@Mock\r\nprivate ApplicationContext applicationContext;",
              "line": 48,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": [
                  "Mock"
                ]
              }
            },
            "55": {
              "code": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
              "line": 55,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "Mockito.reset(applicationContext);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "90": {
              "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationContext",
          "variableType": "ApplicationContext",
          "mockedClass": "ApplicationContext",
          "packageName": "org.apache.dubbo.config.spring.status",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "className": "DataSourceStatusCheckerTest",
          "testMethodName": "testWithDatasourceNotHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {
            "48": "@Mock\r\nprivate ApplicationContext applicationContext;",
            "55": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
            "60": "Mockito.reset(applicationContext);"
          },
          "testMockLines": {
            "106": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);"
          },
          "abstractedStatement": {
            "106": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "@Mock\r\nprivate ApplicationContext applicationContext;",
              "line": 48,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": [
                  "Mock"
                ]
              }
            },
            "55": {
              "code": "new ServiceBean<Object>(applicationContext).setApplicationContext(applicationContext);",
              "line": 55,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "Mockito.reset(applicationContext);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "106": {
              "code": "given(applicationContext.getBeansOfType(eq(DataSource.class), anyBoolean(), anyBoolean())).willReturn(map);",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(ApplicationContext.getBeansOfType(java.lang.Class<javax.sql.DataSource>, boolean, boolean)).thenReturn(java.util.Map<java.lang.String, javax.sql.DataSource>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.protocol.tri.transport.AbstractH2TransportListener": [
    {
      "mockedClass": "org.apache.dubbo.rpc.protocol.tri.transport.AbstractH2TransportListener",
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "transportListener",
          "variableType": "AbstractH2TransportListener",
          "mockedClass": "org.apache.dubbo.rpc.protocol.tri.transport.AbstractH2TransportListener",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
          "className": "TripleHttp2ClientResponseHandlerTest",
          "testMethodName": "testChannelRead0",
          "overlapLines": [],
          "shareableMockLines": {
            "40": "private AbstractH2TransportListener transportListener;",
            "44": "transportListener = Mockito.mock(AbstractH2TransportListener.class);"
          },
          "testMockLines": {
            "70": "Mockito.verify(transportListener, Mockito.times(1)).onHeader(headers, true);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "private AbstractH2TransportListener transportListener;",
              "line": 40,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "44": {
              "code": "transportListener = Mockito.mock(AbstractH2TransportListener.class);",
              "line": 44,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "70": {
              "code": "Mockito.verify(transportListener, Mockito.times(1)).onHeader(headers, true);",
              "line": 70,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testChannelRead0",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "transportListener",
          "variableType": "AbstractH2TransportListener",
          "mockedClass": "org.apache.dubbo.rpc.protocol.tri.transport.AbstractH2TransportListener",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\TripleHttp2ClientResponseHandlerTest.java",
          "className": "TripleHttp2ClientResponseHandlerTest",
          "testMethodName": "testExceptionCaught",
          "overlapLines": [],
          "shareableMockLines": {
            "40": "private AbstractH2TransportListener transportListener;",
            "44": "transportListener = Mockito.mock(AbstractH2TransportListener.class);"
          },
          "testMockLines": {
            "78": "Mockito.verify(transportListener).cancelByRemote(Http2Error.INTERNAL_ERROR.code());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "private AbstractH2TransportListener transportListener;",
              "line": 40,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "44": {
              "code": "transportListener = Mockito.mock(AbstractH2TransportListener.class);",
              "line": 44,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "Mockito.verify(transportListener).cancelByRemote(Http2Error.INTERNAL_ERROR.code());",
              "line": 78,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExceptionCaught",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
      "packageName": "org.apache.dubbo.rpc.cluster",
      "testCaseCount": 1,
      "sequenceCount": 4,
      "sharedStatementLineCount": 4,
      "locReduced": 12,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker<StickyTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
          "packageName": "org.apache.dubbo.rpc.cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
          "className": "StickyTest",
          "testMethodName": "testSticky",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
            "65": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "113": "given(invoker1.invoke(invocation)).willReturn(result);",
            "114": "given(invoker1.isAvailable()).willReturn(true);",
            "115": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
            "116": "given(invoker1.getInterface()).willReturn(StickyTest.class);"
          },
          "abstractedStatement": {
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "116": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
              "line": 44,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "65": {
              "code": "invokers.add(invoker1);",
              "line": 65,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "given(invoker1.invoke(invocation)).willReturn(result);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "114": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "115": {
              "code": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "116": {
              "code": "given(invoker1.getInterface()).willReturn(StickyTest.class);",
              "line": 116,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<StickyTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
          "packageName": "org.apache.dubbo.rpc.cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
          "className": "StickyTest",
          "testMethodName": "testSticky",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
            "66": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "118": "given(invoker2.invoke(invocation)).willReturn(result);",
            "119": "given(invoker2.isAvailable()).willReturn(true);",
            "120": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
            "121": "given(invoker2.getInterface()).willReturn(StickyTest.class);"
          },
          "abstractedStatement": {
            "118": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "119": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
            "120": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "121": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
              "line": 45,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "66": {
              "code": "invokers.add(invoker2);",
              "line": 66,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "118": {
              "code": "given(invoker2.invoke(invocation)).willReturn(result);",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "119": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 119,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "120": {
              "code": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
              "line": 120,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "121": {
              "code": "given(invoker2.getInterface()).willReturn(StickyTest.class);",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<StickyTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
          "packageName": "org.apache.dubbo.rpc.cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
          "className": "StickyTest",
          "testMethodName": "testSticky",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
            "65": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "113": "given(invoker1.invoke(invocation)).willReturn(result);",
            "114": "given(invoker1.isAvailable()).willReturn(true);",
            "115": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
            "116": "given(invoker1.getInterface()).willReturn(StickyTest.class);"
          },
          "abstractedStatement": {
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "116": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "private Invoker<StickyTest> invoker1 = mock(Invoker.class);",
              "line": 44,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "65": {
              "code": "invokers.add(invoker1);",
              "line": 65,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "113": {
              "code": "given(invoker1.invoke(invocation)).willReturn(result);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "114": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "115": {
              "code": "given(invoker1.getUrl()).willReturn(url.setPort(1));",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "116": {
              "code": "given(invoker1.getInterface()).willReturn(StickyTest.class);",
              "line": 116,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<StickyTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>",
          "packageName": "org.apache.dubbo.rpc.cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\StickyTest.java",
          "className": "StickyTest",
          "testMethodName": "testSticky",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
            "66": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "118": "given(invoker2.invoke(invocation)).willReturn(result);",
            "119": "given(invoker2.isAvailable()).willReturn(true);",
            "120": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
            "121": "given(invoker2.getInterface()).willReturn(StickyTest.class);"
          },
          "abstractedStatement": {
            "118": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "119": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
            "120": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "121": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "private Invoker<StickyTest> invoker2 = mock(Invoker.class);",
              "line": 45,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "66": {
              "code": "invokers.add(invoker2);",
              "line": 66,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "118": {
              "code": "given(invoker2.invoke(invocation)).willReturn(result);",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "119": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 119,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "120": {
              "code": "given(invoker2.getUrl()).willReturn(url.setPort(2));",
              "line": 120,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            },
            "121": {
              "code": "given(invoker2.getInterface()).willReturn(StickyTest.class);",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.StickyTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.StickyTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSticky",
                "methodAnnotations": []
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 5,
      "locReduced": 5,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
        "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeWithIllegalRetriesParam",
          "overlapLines": [],
          "shareableMockLines": {
            "62": "Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);",
            "82": "invokers.add(invoker);",
            "94": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
            "95": "given(invoker.getUrl()).willReturn(url);",
            "96": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "100": "given(invoker.invoke(invocation)).willReturn(result);",
            "101": "given(invoker.getUrl()).willReturn(url);",
            "102": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);"
          },
          "testMockLines": {
            "113": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "94": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "95": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "96": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "100": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "101": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "102": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "113": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);",
              "line": 62,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "82": {
              "code": "invokers.add(invoker);",
              "line": 82,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 94,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "95": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 95,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "96": {
              "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 96,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 100,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "101": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "102": {
              "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 102,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "113": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeWithIllegalFailbacktasksParam",
          "overlapLines": [],
          "shareableMockLines": {
            "62": "Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);",
            "82": "invokers.add(invoker);",
            "94": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
            "95": "given(invoker.getUrl()).willReturn(url);",
            "96": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "100": "given(invoker.invoke(invocation)).willReturn(result);",
            "101": "given(invoker.getUrl()).willReturn(url);",
            "102": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);"
          },
          "testMockLines": {
            "129": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "94": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "95": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "96": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "100": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "101": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "102": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "129": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "Invoker<FailbackClusterInvokerTest> invoker = mock(Invoker.class);",
              "line": 62,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "82": {
              "code": "invokers.add(invoker);",
              "line": 82,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "94": {
              "code": "given(invoker.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 94,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "95": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 95,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "96": {
              "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 96,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToException",
                "methodAnnotations": []
              }
            },
            "100": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 100,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "101": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "102": {
              "code": "given(invoker.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 102,
              "type": "STUBBING",
              "locate": "Helper Method",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "resetInvokerToNoException",
                "methodAnnotations": []
              }
            },
            "129": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.registry.client.ServiceDiscovery": [
    {
      "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 3,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)",
        "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
        "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "serviceDiscovery",
          "variableType": "ServiceDiscovery",
          "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
          "packageName": "org.apache.dubbo.registry.client.event.listener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "className": "ServiceInstancesChangedListenerTest",
          "testMethodName": "testRevisionFailureOnNotification",
          "overlapLines": [],
          "shareableMockLines": {
            "133": "static ServiceDiscovery serviceDiscovery;",
            "183": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
            "184": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
            "186": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
            "187": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
            "188": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
            "189": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
            "190": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
            "211": "serviceDiscovery.destroy();"
          },
          "testMockLines": {
            "646": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});"
          },
          "abstractedStatement": {
            "184": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "186": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "187": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "188": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "189": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "190": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "646": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)"
          },
          "rawStatementInfo": {
            "133": {
              "code": "static ServiceDiscovery serviceDiscovery;",
              "line": 133,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "183": {
              "code": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
              "line": 183,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "184": {
              "code": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
              "line": 184,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "186": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
              "line": 186,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "187": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
              "line": 187,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "188": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
              "line": 188,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "189": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
              "line": 189,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "190": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
              "line": 190,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "211": {
              "code": "serviceDiscovery.destroy();",
              "line": 211,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "destroy",
                "methodAnnotations": [
                  "AfterAll"
                ]
              }
            },
            "646": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});",
              "line": 646,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRevisionFailureOnNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "serviceDiscovery",
          "variableType": "ServiceDiscovery",
          "mockedClass": "org.apache.dubbo.registry.client.ServiceDiscovery",
          "packageName": "org.apache.dubbo.registry.client.event.listener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest",
          "testMethodName": "testRevisionFailureOnNotification",
          "overlapLines": [],
          "shareableMockLines": {
            "132": "static ServiceDiscovery serviceDiscovery;",
            "182": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
            "183": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
            "185": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
            "186": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
            "187": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
            "188": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
            "189": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
            "210": "serviceDiscovery.destroy();"
          },
          "testMockLines": {
            "645": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});"
          },
          "abstractedStatement": {
            "183": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "185": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "186": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "187": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "188": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "189": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
            "645": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)"
          },
          "rawStatementInfo": {
            "132": {
              "code": "static ServiceDiscovery serviceDiscovery;",
              "line": 132,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "182": {
              "code": "serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
              "line": 182,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "183": {
              "code": "when(serviceDiscovery.getUrl()).thenReturn(registryURL);",
              "line": 183,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "185": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"111\"), anyList())).thenReturn(metadataInfo_111);",
              "line": 185,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "186": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenReturn(metadataInfo_222);",
              "line": 186,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "187": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"333\"), anyList())).thenReturn(metadataInfo_333);",
              "line": 187,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "188": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"444\"), anyList())).thenReturn(MetadataInfo.EMPTY);",
              "line": 188,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "189": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"555\"), anyList())).thenReturn(metadataInfo_555_tri);",
              "line": 189,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenReturn(org.apache.dubbo.metadata.MetadataInfo)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "210": {
              "code": "serviceDiscovery.destroy();",
              "line": 210,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "destroy",
                "methodAnnotations": [
                  "AfterAll"
                ]
              }
            },
            "645": {
              "code": "when(serviceDiscovery.getRemoteMetadata(eq(\"222\"), anyList())).thenAnswer(new Answer<MetadataInfo>() {\r\n\r\n    @Override\r\n    public MetadataInfo answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n        if (Thread.currentThread().getName().contains(\"Dubbo-framework-metadata-retry\")) {\r\n            return metadataInfo_222;\r\n        }\r\n        return MetadataInfo.EMPTY;\r\n    }\r\n});",
              "line": 645,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.ServiceDiscovery.getRemoteMetadata(java.lang.String, java.util.List<T>)).thenAnswer(org.mockito.stubbing.Answer<org.apache.dubbo.metadata.MetadataInfo>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRevisionFailureOnNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper": [
    {
      "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
      "packageName": "org.apache.dubbo.registry.nacos",
      "testCaseCount": 1,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
      ],
      "sequences": [
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testGetServices",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "180": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
            "189": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);"
          },
          "abstractedStatement": {
            "189": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "180": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
              "line": 180,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testGetServices",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "180": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
            "189": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);"
          },
          "abstractedStatement": {
            "189": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "180": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
              "line": 180,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testGetServices",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "180": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
            "189": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);"
          },
          "abstractedStatement": {
            "189": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "180": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
              "line": 180,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testGetServices",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "180": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
            "189": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);"
          },
          "abstractedStatement": {
            "189": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "180": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instance.capture());",
              "line": 180,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "when(namingServiceWrapper.getServicesOfServer(anyInt(), anyInt(), eq(group))).thenReturn(result);",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper.getServicesOfServer(int, int, java.lang.String)).thenReturn(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetServices",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
      "packageName": "org.apache.dubbo.registry.nacos",
      "testCaseCount": 2,
      "sequenceCount": 8,
      "sharedStatementLineCount": 0,
      "locReduced": 7,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "144": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "144": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 144,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoUnRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "164": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "164": {
              "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 164,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoUnRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "144": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "144": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 144,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoUnRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "164": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "164": {
              "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 164,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoUnRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "144": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "144": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 144,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoUnRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "164": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "164": {
              "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 164,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoUnRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "144": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "144": {
              "code": "verify(namingServiceWrapper, times(1)).registerInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 144,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceWrapper",
          "variableType": "NacosNamingServiceWrapper",
          "mockedClass": "org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper",
          "packageName": "org.apache.dubbo.registry.nacos",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosServiceDiscoveryTest.java",
          "className": "NacosServiceDiscoveryTest",
          "testMethodName": "testDoUnRegister",
          "overlapLines": [],
          "shareableMockLines": {
            "70": "private NacosNamingServiceWrapper namingServiceWrapper;",
            "127": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
            "128": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);"
          },
          "testMockLines": {
            "164": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "private NacosNamingServiceWrapper namingServiceWrapper;",
              "line": 70,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "127": {
              "code": "namingServiceWrapper = mock(NacosNamingServiceWrapper.class);",
              "line": 127,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "128": {
              "code": "namingService.set(nacosServiceDiscovery, namingServiceWrapper);",
              "line": 128,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "164": {
              "code": "verify(namingServiceWrapper, times(1)).deregisterInstance(any(), eq(group), instanceCaptor.capture());",
              "line": 164,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDoUnRegister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.RpcInvocation": [
    {
      "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
      "packageName": "org.apache.dubbo.validation.filter",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 3,
      "locReduced": 9,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
        "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "RpcInvocation",
          "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithNotExistClass",
          "overlapLines": [],
          "shareableMockLines": {
            "41": "private RpcInvocation invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "57": "given(invocation.getMethodName()).willReturn(\"echo1\");",
            "58": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "59": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });"
          },
          "abstractedStatement": {
            "57": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
            "58": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "59": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "41": {
              "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
              "line": 41,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "57": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
              "line": 57,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithNotExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 58,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithNotExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithNotExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "RpcInvocation",
          "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithExistClass",
          "overlapLines": [],
          "shareableMockLines": {
            "41": "private RpcInvocation invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "74": "given(invocation.getMethodName()).willReturn(\"echo1\");",
            "75": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "76": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });"
          },
          "abstractedStatement": {
            "74": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
            "75": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "76": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "41": {
              "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
              "line": 41,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "RpcInvocation",
          "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithoutUrlParameters",
          "overlapLines": [],
          "shareableMockLines": {
            "41": "private RpcInvocation invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "91": "given(invocation.getMethodName()).willReturn(\"echo1\");",
            "92": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "93": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });"
          },
          "abstractedStatement": {
            "91": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
            "92": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "93": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "41": {
              "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
              "line": 41,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "91": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo1\");",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "RpcInvocation",
          "mockedClass": "org.apache.dubbo.rpc.RpcInvocation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWhileMethodNameStartWithDollar",
          "overlapLines": [],
          "shareableMockLines": {
            "41": "private RpcInvocation invocation = mock(RpcInvocation.class);"
          },
          "testMockLines": {
            "108": "given(invocation.getMethodName()).willReturn(\"$echo1\");",
            "109": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
            "110": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });"
          },
          "abstractedStatement": {
            "108": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
            "109": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
            "110": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "41": {
              "code": "private RpcInvocation invocation = mock(RpcInvocation.class);",
              "line": 41,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "108": {
              "code": "given(invocation.getMethodName()).willReturn(\"$echo1\");",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(invocation.getParameterTypes()).willReturn(new Class<?>[] { String.class });",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getParameterTypes()).thenReturn(java.lang.Class<?>[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invocation.getArguments()).willReturn(new Object[] { \"arg1\" });",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.RpcInvocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 5,
      "sequenceCount": 40,
      "sharedStatementLineCount": 3,
      "locReduced": 117,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "85": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
            "86": "given(invoker1.isAvailable()).willReturn(true);",
            "87": "given(invoker1.getUrl()).willReturn(url);",
            "88": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "85": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "86": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "87": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "88": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "85": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "107": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
            "108": "given(invoker1.isAvailable()).willReturn(true);",
            "109": "given(invoker1.getUrl()).willReturn(url);",
            "110": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "107": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "108": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "109": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "110": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "107": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "126": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "127": "given(invoker1.isAvailable()).willReturn(false);",
            "128": "given(invoker1.getUrl()).willReturn(url);",
            "129": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "126": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "127": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "128": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "129": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "126": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "150": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "151": "given(invoker1.isAvailable()).willReturn(false);",
            "152": "given(invoker1.getUrl()).willReturn(url);",
            "153": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "151": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "152": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "176": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "177": "given(invoker1.isAvailable()).willReturn(false);",
            "178": "given(invoker1.getUrl()).willReturn(url);",
            "179": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "176": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "177": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "178": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "179": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "176": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 179,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "90": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
            "91": "given(invoker2.isAvailable()).willReturn(true);",
            "92": "given(invoker2.getUrl()).willReturn(url);",
            "93": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "90": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "91": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "92": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "93": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "90": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "91": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "112": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
            "113": "given(invoker2.isAvailable()).willReturn(true);",
            "114": "given(invoker2.getUrl()).willReturn(url);",
            "115": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "112": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "115": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "131": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "132": "given(invoker2.isAvailable()).willReturn(false);",
            "133": "given(invoker2.getUrl()).willReturn(url);",
            "134": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "131": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "132": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "133": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "134": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "131": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "132": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 132,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "133": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 133,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "134": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "155": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "156": "given(invoker2.isAvailable()).willReturn(false);",
            "157": "given(invoker2.getUrl()).willReturn(url);",
            "158": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "156": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "157": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "158": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "155": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 156,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "157": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 157,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "181": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "182": "given(invoker2.isAvailable()).willReturn(false);",
            "183": "given(invoker2.getUrl()).willReturn(url);",
            "184": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "181": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "182": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "183": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "184": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "181": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "183": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 183,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "184": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 184,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "85": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
            "86": "given(invoker1.isAvailable()).willReturn(true);",
            "87": "given(invoker1.getUrl()).willReturn(url);",
            "88": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "85": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "86": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "87": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "88": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "85": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "107": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
            "108": "given(invoker1.isAvailable()).willReturn(true);",
            "109": "given(invoker1.getUrl()).willReturn(url);",
            "110": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "107": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "108": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "109": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "110": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "107": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "126": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "127": "given(invoker1.isAvailable()).willReturn(false);",
            "128": "given(invoker1.getUrl()).willReturn(url);",
            "129": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "126": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "127": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "128": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "129": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "126": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "150": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "151": "given(invoker1.isAvailable()).willReturn(false);",
            "152": "given(invoker1.getUrl()).willReturn(url);",
            "153": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "151": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "152": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "176": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "177": "given(invoker1.isAvailable()).willReturn(false);",
            "178": "given(invoker1.getUrl()).willReturn(url);",
            "179": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "176": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "177": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "178": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "179": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "176": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 179,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "90": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
            "91": "given(invoker2.isAvailable()).willReturn(true);",
            "92": "given(invoker2.getUrl()).willReturn(url);",
            "93": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "90": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "91": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "92": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "93": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "90": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "91": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "112": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
            "113": "given(invoker2.isAvailable()).willReturn(true);",
            "114": "given(invoker2.getUrl()).willReturn(url);",
            "115": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "112": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "115": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "131": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "132": "given(invoker2.isAvailable()).willReturn(false);",
            "133": "given(invoker2.getUrl()).willReturn(url);",
            "134": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "131": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "132": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "133": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "134": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "131": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "132": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 132,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "133": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 133,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "134": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "155": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "156": "given(invoker2.isAvailable()).willReturn(false);",
            "157": "given(invoker2.getUrl()).willReturn(url);",
            "158": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "156": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "157": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "158": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "155": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 156,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "157": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 157,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "181": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "182": "given(invoker2.isAvailable()).willReturn(false);",
            "183": "given(invoker2.getUrl()).willReturn(url);",
            "184": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "181": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "182": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "183": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "184": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "181": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "183": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 183,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "184": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 184,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "85": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
            "86": "given(invoker1.isAvailable()).willReturn(true);",
            "87": "given(invoker1.getUrl()).willReturn(url);",
            "88": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "85": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "86": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "87": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "88": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "85": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "107": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
            "108": "given(invoker1.isAvailable()).willReturn(true);",
            "109": "given(invoker1.getUrl()).willReturn(url);",
            "110": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "107": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "108": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "109": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "110": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "107": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "126": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "127": "given(invoker1.isAvailable()).willReturn(false);",
            "128": "given(invoker1.getUrl()).willReturn(url);",
            "129": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "126": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "127": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "128": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "129": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "126": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "150": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "151": "given(invoker1.isAvailable()).willReturn(false);",
            "152": "given(invoker1.getUrl()).willReturn(url);",
            "153": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "151": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "152": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "176": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "177": "given(invoker1.isAvailable()).willReturn(false);",
            "178": "given(invoker1.getUrl()).willReturn(url);",
            "179": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "176": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "177": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "178": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "179": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "176": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 179,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "90": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
            "91": "given(invoker2.isAvailable()).willReturn(true);",
            "92": "given(invoker2.getUrl()).willReturn(url);",
            "93": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "90": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "91": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "92": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "93": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "90": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "91": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "112": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
            "113": "given(invoker2.isAvailable()).willReturn(true);",
            "114": "given(invoker2.getUrl()).willReturn(url);",
            "115": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "112": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "115": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "131": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "132": "given(invoker2.isAvailable()).willReturn(false);",
            "133": "given(invoker2.getUrl()).willReturn(url);",
            "134": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "131": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "132": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "133": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "134": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "131": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "132": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 132,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "133": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 133,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "134": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "155": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "156": "given(invoker2.isAvailable()).willReturn(false);",
            "157": "given(invoker2.getUrl()).willReturn(url);",
            "158": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "156": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "157": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "158": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "155": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 156,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "157": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 157,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "181": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "182": "given(invoker2.isAvailable()).willReturn(false);",
            "183": "given(invoker2.getUrl()).willReturn(url);",
            "184": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "181": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "182": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "183": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "184": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "181": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "183": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 183,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "184": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 184,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "85": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
            "86": "given(invoker1.isAvailable()).willReturn(true);",
            "87": "given(invoker1.getUrl()).willReturn(url);",
            "88": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "85": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "86": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "87": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "88": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "85": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "107": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
            "108": "given(invoker1.isAvailable()).willReturn(true);",
            "109": "given(invoker1.getUrl()).willReturn(url);",
            "110": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "107": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "108": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "109": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "110": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "107": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException());",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "given(invoker1.isAvailable()).willReturn(true);",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "126": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "127": "given(invoker1.isAvailable()).willReturn(false);",
            "128": "given(invoker1.getUrl()).willReturn(url);",
            "129": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "126": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "127": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "128": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "129": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "126": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "150": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
            "151": "given(invoker1.isAvailable()).willReturn(false);",
            "152": "given(invoker1.getUrl()).willReturn(url);",
            "153": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "150": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "151": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "152": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "150": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.TIMEOUT_EXCEPTION));",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "58": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
            "79": "invokers.add(invoker1);"
          },
          "testMockLines": {
            "176": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "177": "given(invoker1.isAvailable()).willReturn(false);",
            "178": "given(invoker1.getUrl()).willReturn(url);",
            "179": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "176": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "177": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "178": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "179": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker1 = mock(Invoker.class);",
              "line": 58,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "79": {
              "code": "invokers.add(invoker1);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "176": {
              "code": "given(invoker1.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(invoker1.isAvailable()).willReturn(false);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "given(invoker1.getUrl()).willReturn(url);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "given(invoker1.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 179,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "90": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
            "91": "given(invoker2.isAvailable()).willReturn(true);",
            "92": "given(invoker2.getUrl()).willReturn(url);",
            "93": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "90": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
            "91": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "92": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "93": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "90": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RuntimeException());",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(java.lang.RuntimeException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "91": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRuntimeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvokeWithRPCException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "112": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
            "113": "given(invoker2.isAvailable()).willReturn(true);",
            "114": "given(invoker2.getUrl()).willReturn(url);",
            "115": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "112": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "113": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "114": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "115": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "given(invoker2.invoke(invocation)).willReturn(expectedResult);",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "given(invoker2.isAvailable()).willReturn(true);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "115": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithRPCException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "131": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "132": "given(invoker2.isAvailable()).willReturn(false);",
            "133": "given(invoker2.getUrl()).willReturn(url);",
            "134": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "131": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "132": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "133": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "134": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "131": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "132": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 132,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "133": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 133,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "134": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes2",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "155": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
            "156": "given(invoker2.isAvailable()).willReturn(false);",
            "157": "given(invoker2.getUrl()).willReturn(url);",
            "158": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "156": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "157": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "158": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "155": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException());",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 156,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "157": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 157,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "158": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<FailoverClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailoverClusterInvokerTest.java",
          "className": "FailoverClusterInvokerTest",
          "testMethodName": "testInvoke_retryTimes_withBizException",
          "overlapLines": [],
          "shareableMockLines": {
            "59": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
            "80": "invokers.add(invoker2);"
          },
          "testMockLines": {
            "181": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
            "182": "given(invoker2.isAvailable()).willReturn(false);",
            "183": "given(invoker2.getUrl()).willReturn(url);",
            "184": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "181": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
            "182": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
            "183": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "184": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "private final Invoker<FailoverClusterInvokerTest> invoker2 = mock(Invoker.class);",
              "line": 59,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "80": {
              "code": "invokers.add(invoker2);",
              "line": 80,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "181": {
              "code": "given(invoker2.invoke(invocation)).willThrow(new RpcException(RpcException.BIZ_EXCEPTION));",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "given(invoker2.isAvailable()).willReturn(false);",
              "line": 182,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "183": {
              "code": "given(invoker2.getUrl()).willReturn(url);",
              "line": 183,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "184": {
              "code": "given(invoker2.getInterface()).willReturn(FailoverClusterInvokerTest.class);",
              "line": 184,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailoverClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke_retryTimes_withBizException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "Invoker<IGreeter>": [
    {
      "mockedClass": "Invoker<IGreeter>",
      "packageName": "org.apache.dubbo.rpc.stub",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<IGreeter>",
          "mockedClass": "Invoker<IGreeter>",
          "packageName": "org.apache.dubbo.rpc.stub",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java",
          "className": "StubInvocationUtilTest",
          "testMethodName": "testUnaryCall",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invoker<IGreeter> invoker;",
            "51": "when(invoker.getUrl()).thenReturn(url);",
            "52": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
            "88": "invoker = createMockInvoker(url);"
          },
          "testMockLines": {
            "121": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> result);"
          },
          "abstractedStatement": {
            "121": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invoker<IGreeter> invoker;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "51": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 51,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "52": {
              "code": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
              "line": 52,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker = createMockInvoker(url);",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "121": {
              "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> result);",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnaryCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<IGreeter>",
          "mockedClass": "Invoker<IGreeter>",
          "packageName": "org.apache.dubbo.rpc.stub",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java",
          "className": "StubInvocationUtilTest",
          "testMethodName": "biOrClientStreamCall",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invoker<IGreeter> invoker;",
            "51": "when(invoker.getUrl()).thenReturn(url);",
            "52": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
            "88": "invoker = createMockInvoker(url);"
          },
          "testMockLines": {
            "145": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[0];\r\n    observer.onNext(response);\r\n    observer.onCompleted();\r\n    when(result.recreate()).then(invocationOnMock1 -> new StreamObserver<Object>() {\r\n\r\n        @Override\r\n        public void onNext(Object data) {\r\n            observer.onNext(data);\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable throwable) {\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            observer.onCompleted();\r\n        }\r\n    });\r\n    return result;\r\n});"
          },
          "abstractedStatement": {
            "145": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invoker<IGreeter> invoker;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "51": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 51,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "52": {
              "code": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
              "line": 52,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker = createMockInvoker(url);",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "145": {
              "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[0];\r\n    observer.onNext(response);\r\n    observer.onCompleted();\r\n    when(result.recreate()).then(invocationOnMock1 -> new StreamObserver<Object>() {\r\n\r\n        @Override\r\n        public void onNext(Object data) {\r\n            observer.onNext(data);\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable throwable) {\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            observer.onCompleted();\r\n        }\r\n    });\r\n    return result;\r\n});",
              "line": 145,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "biOrClientStreamCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<IGreeter>",
          "mockedClass": "Invoker<IGreeter>",
          "packageName": "org.apache.dubbo.rpc.stub",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubInvocationUtilTest.java",
          "className": "StubInvocationUtilTest",
          "testMethodName": "serverStreamCall",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Invoker<IGreeter> invoker;",
            "51": "when(invoker.getUrl()).thenReturn(url);",
            "52": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
            "88": "invoker = createMockInvoker(url);"
          },
          "testMockLines": {
            "192": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[1];\r\n    for (int i = 0; i < 10; i++) {\r\n        observer.onNext(response);\r\n    }\r\n    observer.onCompleted();\r\n    return result;\r\n});"
          },
          "abstractedStatement": {
            "192": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Invoker<IGreeter> invoker;",
              "line": 43,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "51": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 51,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "52": {
              "code": "when(invoker.getInterface()).thenReturn(IGreeter.class);",
              "line": 52,
              "type": "REFERENCE",
              "locate": "Helper Method",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "createMockInvoker",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "invoker = createMockInvoker(url);",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "192": {
              "code": "when(invoker.invoke(any(Invocation.class))).then(invocationOnMock -> {\r\n    Invocation invocation = (Invocation) invocationOnMock.getArguments()[0];\r\n    StreamObserver<Object> observer = (StreamObserver<Object>) invocation.getArguments()[1];\r\n    for (int i = 0; i < 10; i++) {\r\n        observer.onNext(response);\r\n    }\r\n    observer.onCompleted();\r\n    return result;\r\n});",
              "line": 192,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Invoker<IGreeter>.invoke(org.apache.dubbo.rpc.Invocation)).then(Invoker<IGreeter>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "serverStreamCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository": [
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
      "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "ruleRepository",
          "variableType": "GovernanceRuleRepository",
          "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
          "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "className": "MeshRuleManagerTest",
          "testMethodName": "testRegister1",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private GovernanceRuleRepository ruleRepository;",
            "76": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
            "77": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);"
          },
          "testMockLines": {
            "112": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
            "116": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
            "148": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "68": {
              "code": "private GovernanceRuleRepository ruleRepository;",
              "line": 68,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "112": {
              "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
              "line": 112,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "116": {
              "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
              "line": 116,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "148": {
              "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
              "line": 148,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "ruleRepository",
          "variableType": "GovernanceRuleRepository",
          "mockedClass": "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository",
          "packageName": "org.apache.dubbo.rpc.cluster.router.mesh.route",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "className": "MeshRuleManagerTest",
          "testMethodName": "testRegister3",
          "overlapLines": [],
          "shareableMockLines": {
            "68": "private GovernanceRuleRepository ruleRepository;",
            "76": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
            "77": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);"
          },
          "testMockLines": {
            "233": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
            "236": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
            "270": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "68": {
              "code": "private GovernanceRuleRepository ruleRepository;",
              "line": 68,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "76": {
              "code": "ruleRepository = Mockito.mock(GovernanceRuleRepository.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "when(moduleModel.getDefaultExtension(GovernanceRuleRepository.class)).thenReturn(ruleRepository);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "233": {
              "code": "verify(ruleRepository, times(1)).getRule(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", 5000L);",
              "line": 233,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "236": {
              "code": "verify(ruleRepository, times(1)).addListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
              "line": 236,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "270": {
              "code": "verify(ruleRepository, times(1)).removeListener(\"dubbo-demo.MESHAPPRULE\", \"dubbo\", meshAppRuleListener);",
              "line": 270,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.model.ApplicationModel": [
    {
      "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
      "packageName": "org.apache.dubbo.metrics.registry.metrics.collector",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 2,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)",
        "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)"
      ],
      "sequences": [
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
          "packageName": "org.apache.dubbo.metrics.registry.metrics.collector",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java",
          "className": "RegistryMetricsTest",
          "testMethodName": "getTestCollector",
          "overlapLines": [],
          "shareableMockLines": {
            "50": "ApplicationModel applicationModel;"
          },
          "testMockLines": {
            "340": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
            "341": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);"
          },
          "abstractedStatement": {
            "340": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
            "341": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "ApplicationModel applicationModel;",
              "line": 50,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "340": {
              "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
              "line": 340,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            },
            "341": {
              "code": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);",
              "line": 341,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "mockedClass": "org.apache.dubbo.rpc.model.ApplicationModel",
          "packageName": "org.apache.dubbo.metrics.registry.metrics.collector",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java",
          "className": "RegistryMetricsTest",
          "testMethodName": "getTestCollector",
          "overlapLines": [],
          "shareableMockLines": {
            "50": "ApplicationModel applicationModel;"
          },
          "testMockLines": {
            "340": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
            "341": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);"
          },
          "abstractedStatement": {
            "340": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
            "341": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "ApplicationModel applicationModel;",
              "line": 50,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "340": {
              "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
              "line": 340,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            },
            "341": {
              "code": "when(applicationModel.NotExistApplicationConfig()).thenReturn(false);",
              "line": 341,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.NotExistApplicationConfig()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            }
          }
        }
      ]
    }
  ],
  "Channel": [
    {
      "mockedClass": "Channel",
      "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 5,
      "locReduced": 5,
      "sharedStatements": [
        "when(Channel.eventLoop()).thenReturn(Channel)",
        "when(Channel.isActive()).thenReturn(boolean)",
        "when(Channel.newPromise()).thenReturn(Channel)",
        "when(Channel.parent()).thenReturn(Channel)",
        "when(Channel.write(T, T)).thenAnswer(Channel)"
      ],
      "sequences": [
        {
          "variableName": "channel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\WriteQueueTest.java",
          "className": "WriteQueueTest",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Channel channel;",
            "57": "channel = Mockito.mock(Channel.class);",
            "63": "Mockito.when(channel.parent()).thenReturn(parent);",
            "64": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
            "65": "Mockito.when(channel.isActive()).thenReturn(true);",
            "66": "Mockito.when(channel.newPromise()).thenReturn(promise);",
            "67": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});"
          },
          "testMockLines": {
            "100": "Mockito.verify(channel, Mockito.times(4)).write(commandArgumentCaptor.capture(), promiseArgumentCaptor.capture());"
          },
          "abstractedStatement": {
            "63": "when(Channel.parent()).thenReturn(Channel)",
            "64": "when(Channel.eventLoop()).thenReturn(Channel)",
            "65": "when(Channel.isActive()).thenReturn(boolean)",
            "66": "when(Channel.newPromise()).thenReturn(Channel)",
            "67": "when(Channel.write(T, T)).thenAnswer(Channel)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Channel channel;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "57": {
              "code": "channel = Mockito.mock(Channel.class);",
              "line": 57,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "63": {
              "code": "Mockito.when(channel.parent()).thenReturn(parent);",
              "line": 63,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.parent()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.eventLoop()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "Mockito.when(channel.isActive()).thenReturn(true);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.isActive()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "Mockito.when(channel.newPromise()).thenReturn(promise);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.newPromise()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "67": {
              "code": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});",
              "line": 67,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.write(T, T)).thenAnswer(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "100": {
              "code": "Mockito.verify(channel, Mockito.times(4)).write(commandArgumentCaptor.capture(), promiseArgumentCaptor.capture());",
              "line": 100,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.rpc.protocol.tri.transport",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\transport\\WriteQueueTest.java",
          "className": "WriteQueueTest",
          "testMethodName": "testChunk",
          "overlapLines": [],
          "shareableMockLines": {
            "53": "private Channel channel;",
            "57": "channel = Mockito.mock(Channel.class);",
            "63": "Mockito.when(channel.parent()).thenReturn(parent);",
            "64": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
            "65": "Mockito.when(channel.isActive()).thenReturn(true);",
            "66": "Mockito.when(channel.newPromise()).thenReturn(promise);",
            "67": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});"
          },
          "testMockLines": {
            "127": "Mockito.verify(channel, Mockito.times(DEQUE_CHUNK_SIZE + 1)).write(Mockito.any(), Mockito.any());"
          },
          "abstractedStatement": {
            "63": "when(Channel.parent()).thenReturn(Channel)",
            "64": "when(Channel.eventLoop()).thenReturn(Channel)",
            "65": "when(Channel.isActive()).thenReturn(boolean)",
            "66": "when(Channel.newPromise()).thenReturn(Channel)",
            "67": "when(Channel.write(T, T)).thenAnswer(Channel)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "private Channel channel;",
              "line": 53,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "57": {
              "code": "channel = Mockito.mock(Channel.class);",
              "line": 57,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "63": {
              "code": "Mockito.when(channel.parent()).thenReturn(parent);",
              "line": 63,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.parent()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "64": {
              "code": "Mockito.when(channel.eventLoop()).thenReturn(eventLoop);",
              "line": 64,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.eventLoop()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "65": {
              "code": "Mockito.when(channel.isActive()).thenReturn(true);",
              "line": 65,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.isActive()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "66": {
              "code": "Mockito.when(channel.newPromise()).thenReturn(promise);",
              "line": 66,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.newPromise()).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "67": {
              "code": "Mockito.when(channel.write(Mockito.any(), Mockito.any())).thenAnswer((Answer<ChannelPromise>) invocationOnMock -> {\r\n    writeMethodCalledTimes.incrementAndGet();\r\n    return promise;\r\n});",
              "line": 67,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(Channel.write(T, T)).thenAnswer(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "init",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "127": {
              "code": "Mockito.verify(channel, Mockito.times(DEQUE_CHUNK_SIZE + 1)).write(Mockito.any(), Mockito.any());",
              "line": 127,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testChunk",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "Channel",
      "packageName": "org.apache.dubbo.qos.command.impl",
      "testCaseCount": 10,
      "sequenceCount": 10,
      "sharedStatementLineCount": 2,
      "locReduced": 18,
      "sharedStatements": [
        "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
        "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
      ],
      "sequences": [
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeDefaultService",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "84": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "86": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "84": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "86": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "84": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 84,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeDefaultService",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeDefaultService",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeWithSpecifyService",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "99": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "101": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "99": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "101": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "99": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 99,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithSpecifyService",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "101": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithSpecifyService",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeByPassingNullValue",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "114": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "116": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "114": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "116": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "114": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeByPassingNullValue",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "116": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 116,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeByPassingNullValue",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeByPassingEnumValue",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "134": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "136": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "134": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "136": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "134": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeByPassingEnumValue",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "136": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 136,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeByPassingEnumValue",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testOverriddenMethodWithSpecifyParamType",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "150": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "152": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "150": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "152": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "150": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOverriddenMethodWithSpecifyParamType",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOverriddenMethodWithSpecifyParamType",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeOverriddenMethodBySelect",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "174": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "176": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
            "177": "given(mockChannel.attr(SelectTelnet.SELECT_METHOD_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_METHOD_KEY));",
            "179": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY));",
            "181": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
            "183": "given(mockChannel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_MESSAGE_KEY));"
          },
          "abstractedStatement": {
            "174": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "176": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
            "177": "when(Channel.attr(SelectTelnet.SELECT_METHOD_KEY)).thenReturn(Channel)",
            "179": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).thenReturn(Channel)",
            "181": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
            "183": "when(Channel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "174": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 174,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "176": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_METHOD_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_METHOD_KEY));",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_METHOD_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY));",
              "line": 179,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_PROVIDER_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "181": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
              "line": 181,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "183": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_MESSAGE_KEY));",
              "line": 183,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_MESSAGE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeOverriddenMethodBySelect",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeMethodWithMapParameter",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "211": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "213": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "211": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "213": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "211": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 211,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeMethodWithMapParameter",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "213": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 213,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeMethodWithMapParameter",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvokeMultiJsonParamMethod",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "230": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "232": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "230": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "232": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "230": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 230,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeMultiJsonParamMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "232": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 232,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeMultiJsonParamMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testMessageNull",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "249": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "251": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "249": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "251": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "249": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 249,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMessageNull",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "251": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 251,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMessageNull",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\InvokeTelnetTest.java",
          "className": "InvokeTelnetTest",
          "testMethodName": "testInvalidMessage",
          "overlapLines": [],
          "shareableMockLines": {
            "47": "private Channel mockChannel;",
            "58": "mockChannel = mock(Channel.class);",
            "60": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "68": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "267": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "269": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));"
          },
          "abstractedStatement": {
            "267": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "269": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "private Channel mockChannel;",
              "line": 47,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "58": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 58,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "60": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "68": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "267": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 267,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvalidMessage",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "269": {
              "code": "given(mockChannel.attr(SelectTelnet.SELECT_KEY)).willReturn(defaultAttributeMap.attr(SelectTelnet.SELECT_KEY));",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(SelectTelnet.SELECT_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvalidMessage",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "Channel",
      "packageName": "org.apache.dubbo.qos.command.impl",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)"
      ],
      "sequences": [
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SelectTelnetTest.java",
          "className": "SelectTelnetTest",
          "testMethodName": "testInvokeWithoutMethodList",
          "overlapLines": [],
          "shareableMockLines": {
            "49": "private Channel mockChannel;",
            "69": "mockChannel = mock(Channel.class);",
            "71": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "77": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "85": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "87": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));"
          },
          "abstractedStatement": {
            "85": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "87": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "49": {
              "code": "private Channel mockChannel;",
              "line": 49,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "69": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 69,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "71": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 71,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "85": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutMethodList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutMethodList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SelectTelnetTest.java",
          "className": "SelectTelnetTest",
          "testMethodName": "testInvokeWithIllegalMessage",
          "overlapLines": [],
          "shareableMockLines": {
            "49": "private Channel mockChannel;",
            "69": "mockChannel = mock(Channel.class);",
            "71": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "77": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "104": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "106": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));"
          },
          "abstractedStatement": {
            "104": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "106": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "49": {
              "code": "private Channel mockChannel;",
              "line": 49,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "69": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 69,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "71": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 71,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "104": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalMessage",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "106": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
              "line": 106,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalMessage",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "Channel",
          "packageName": "org.apache.dubbo.qos.command.impl",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SelectTelnetTest.java",
          "className": "SelectTelnetTest",
          "testMethodName": "testInvokeWithNull",
          "overlapLines": [],
          "shareableMockLines": {
            "49": "private Channel mockChannel;",
            "69": "mockChannel = mock(Channel.class);",
            "71": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
            "77": "reset(mockChannel, mockCommandContext);"
          },
          "testMockLines": {
            "129": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
            "131": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));"
          },
          "abstractedStatement": {
            "129": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
            "131": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)"
          },
          "rawStatementInfo": {
            "49": {
              "code": "private Channel mockChannel;",
              "line": 49,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "69": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 69,
              "type": "ASSIGNMENT",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "71": {
              "code": "given(mockCommandContext.getRemote()).willReturn(mockChannel);",
              "line": 71,
              "type": "REFERENCE",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "setup",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "reset(mockChannel, mockCommandContext);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "after",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "129": {
              "code": "given(mockChannel.attr(ChangeTelnet.SERVICE_KEY)).willReturn(defaultAttributeMap.attr(ChangeTelnet.SERVICE_KEY));",
              "line": 129,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(ChangeTelnet.SERVICE_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithNull",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "131": {
              "code": "given(mockChannel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).willReturn(defaultAttributeMap.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY));",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(Channel.attr(InvokeTelnet.INVOKE_METHOD_LIST_KEY)).thenReturn(Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithNull",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.validation.Validation": [
    {
      "mockedClass": "org.apache.dubbo.validation.Validation",
      "packageName": "org.apache.dubbo.validation.filter",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)"
      ],
      "sequences": [
        {
          "variableName": "validation",
          "variableType": "Validation",
          "mockedClass": "org.apache.dubbo.validation.Validation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithExistClass",
          "overlapLines": [],
          "shareableMockLines": {
            "39": "private Validation validation = mock(Validation.class);"
          },
          "testMockLines": {
            "71": "given(validation.getValidator(url)).willReturn(validator);"
          },
          "abstractedStatement": {
            "71": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "private Validation validation = mock(Validation.class);",
              "line": 39,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "71": {
              "code": "given(validation.getValidator(url)).willReturn(validator);",
              "line": 71,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithExistClass",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "validation",
          "variableType": "Validation",
          "mockedClass": "org.apache.dubbo.validation.Validation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWithoutUrlParameters",
          "overlapLines": [],
          "shareableMockLines": {
            "39": "private Validation validation = mock(Validation.class);"
          },
          "testMockLines": {
            "88": "given(validation.getValidator(url)).willReturn(validator);"
          },
          "abstractedStatement": {
            "88": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "private Validation validation = mock(Validation.class);",
              "line": 39,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "88": {
              "code": "given(validation.getValidator(url)).willReturn(validator);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWithoutUrlParameters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "validation",
          "variableType": "Validation",
          "mockedClass": "org.apache.dubbo.validation.Validation",
          "packageName": "org.apache.dubbo.validation.filter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-filter\\dubbo-filter-validation\\src\\test\\java\\org\\apache\\dubbo\\validation\\filter\\ValidationFilterTest.java",
          "className": "ValidationFilterTest",
          "testMethodName": "testItWhileMethodNameStartWithDollar",
          "overlapLines": [],
          "shareableMockLines": {
            "39": "private Validation validation = mock(Validation.class);"
          },
          "testMockLines": {
            "105": "given(validation.getValidator(url)).willReturn(validator);"
          },
          "abstractedStatement": {
            "105": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "private Validation validation = mock(Validation.class);",
              "line": 39,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "105": {
              "code": "given(validation.getValidator(url)).willReturn(validator);",
              "line": 105,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.validation.Validation.getValidator(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.validation.Validator)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testItWhileMethodNameStartWithDollar",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.metadata.MetadataService": [
    {
      "mockedClass": "org.apache.dubbo.metadata.MetadataService",
      "packageName": "org.apache.dubbo.registry.client.event.listener",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)"
      ],
      "sequences": [
        {
          "variableName": "metadataService",
          "variableType": "MetadataService",
          "mockedClass": "org.apache.dubbo.metadata.MetadataService",
          "packageName": "org.apache.dubbo.registry.client.event.listener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "className": "ServiceInstancesChangedListenerTest",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {
            "131": "static MetadataService metadataService;",
            "140": "metadataService = Mockito.mock(MetadataService.class);"
          },
          "testMockLines": {
            "691": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));"
          },
          "abstractedStatement": {
            "691": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)"
          },
          "rawStatementInfo": {
            "131": {
              "code": "static MetadataService metadataService;",
              "line": 131,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "140": {
              "code": "metadataService = Mockito.mock(MetadataService.class);",
              "line": 140,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "691": {
              "code": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));",
              "line": 691,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "metadataService",
          "variableType": "MetadataService",
          "mockedClass": "org.apache.dubbo.metadata.MetadataService",
          "packageName": "org.apache.dubbo.registry.client.event.listener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "className": "ServiceInstancesChangedListenerWithoutEmptyProtectTest",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {
            "130": "static MetadataService metadataService;",
            "139": "metadataService = Mockito.mock(MetadataService.class);"
          },
          "testMockLines": {
            "690": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));"
          },
          "abstractedStatement": {
            "690": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)"
          },
          "rawStatementInfo": {
            "130": {
              "code": "static MetadataService metadataService;",
              "line": 130,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "139": {
              "code": "metadataService = Mockito.mock(MetadataService.class);",
              "line": 139,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeAll"
                ]
              }
            },
            "690": {
              "code": "Mockito.doReturn(null).when(metadataService).getMetadataInfo(eq(null));",
              "line": 690,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doReturn(null).when(org.apache.dubbo.metadata.MetadataService).getMetadataInfo(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.remoting.Channel": [
    {
      "mockedClass": "org.apache.dubbo.remoting.Channel",
      "packageName": "org.apache.dubbo.qos.legacy",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "org.apache.dubbo.remoting.Channel",
          "packageName": "org.apache.dubbo.qos.legacy",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\LogTelnetHandlerTest.java",
          "className": "LogTelnetHandlerTest",
          "testMethodName": "testChangeLogLevel",
          "overlapLines": [],
          "shareableMockLines": {
            "34": "private Channel mockChannel;"
          },
          "testMockLines": {
            "38": "mockChannel = mock(Channel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "34": {
              "code": "private Channel mockChannel;",
              "line": 34,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "38": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 38,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testChangeLogLevel",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockChannel",
          "variableType": "Channel",
          "mockedClass": "org.apache.dubbo.remoting.Channel",
          "packageName": "org.apache.dubbo.qos.legacy",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\legacy\\LogTelnetHandlerTest.java",
          "className": "LogTelnetHandlerTest",
          "testMethodName": "testPrintLog",
          "overlapLines": [],
          "shareableMockLines": {
            "34": "private Channel mockChannel;"
          },
          "testMockLines": {
            "48": "mockChannel = mock(Channel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "34": {
              "code": "private Channel mockChannel;",
              "line": 34,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "48": {
              "code": "mockChannel = mock(Channel.class);",
              "line": 48,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPrintLog",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>": [
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 5,
      "sequenceCount": 5,
      "sharedStatementLineCount": 4,
      "locReduced": 16,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)"
      ],
      "sequences": [
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testNoInvoke",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "Directory<FailbackClusterInvokerTest> dic;",
            "74": "dic = mock(Directory.class);",
            "75": "given(dic.getUrl()).willReturn(url);",
            "76": "given(dic.getConsumerUrl()).willReturn(url);",
            "77": "given(dic.list(invocation)).willReturn(invokers);",
            "78": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "88": "dic = null;"
          },
          "testMockLines": {
            "161": "dic = mock(Directory.class);",
            "163": "given(dic.getUrl()).willReturn(url);",
            "164": "given(dic.getConsumerUrl()).willReturn(url);",
            "165": "given(dic.list(invocation)).willReturn(null);",
            "166": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
            "78": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "163": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "164": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "165": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
            "166": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Directory<FailbackClusterInvokerTest> dic;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "dic = mock(Directory.class);",
              "line": 74,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 77,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 78,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "88": {
              "code": "dic = null;",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "161": {
              "code": "dic = mock(Directory.class);",
              "line": 161,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "163": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 163,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "164": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 164,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "165": {
              "code": "given(dic.list(invocation)).willReturn(null);",
              "line": 165,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "166": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoInvoke",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeRetryTimesWithZeroValue",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "Directory<FailbackClusterInvokerTest> dic;",
            "74": "dic = mock(Directory.class);",
            "75": "given(dic.getUrl()).willReturn(url);",
            "76": "given(dic.getConsumerUrl()).willReturn(url);",
            "77": "given(dic.list(invocation)).willReturn(invokers);",
            "78": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "88": "dic = null;"
          },
          "testMockLines": {
            "224": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
            "78": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "224": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Directory<FailbackClusterInvokerTest> dic;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "dic = mock(Directory.class);",
              "line": 74,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 77,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 78,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "88": {
              "code": "dic = null;",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "224": {
              "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));",
              "line": 224,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeRetryTimesWithZeroValue",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeRetryTimesWithTwoValue",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "Directory<FailbackClusterInvokerTest> dic;",
            "74": "dic = mock(Directory.class);",
            "75": "given(dic.getUrl()).willReturn(url);",
            "76": "given(dic.getConsumerUrl()).willReturn(url);",
            "77": "given(dic.list(invocation)).willReturn(invokers);",
            "78": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "88": "dic = null;"
          },
          "testMockLines": {
            "249": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
            "78": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "249": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Directory<FailbackClusterInvokerTest> dic;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "dic = mock(Directory.class);",
              "line": 74,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 77,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 78,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "88": {
              "code": "dic = null;",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "249": {
              "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, retries));",
              "line": 249,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeRetryTimesWithTwoValue",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeRetryTimesWithDefaultValue",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "Directory<FailbackClusterInvokerTest> dic;",
            "74": "dic = mock(Directory.class);",
            "75": "given(dic.getUrl()).willReturn(url);",
            "76": "given(dic.getConsumerUrl()).willReturn(url);",
            "77": "given(dic.list(invocation)).willReturn(invokers);",
            "78": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "88": "dic = null;"
          },
          "testMockLines": {
            "273": "given(dic.getConsumerUrl()).willReturn(URL.valueOf(\"test://test:11/test\"));"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
            "78": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "273": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Directory<FailbackClusterInvokerTest> dic;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "dic = mock(Directory.class);",
              "line": 74,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 77,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 78,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "88": {
              "code": "dic = null;",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "273": {
              "code": "given(dic.getConsumerUrl()).willReturn(URL.valueOf(\"test://test:11/test\"));",
              "line": 273,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeRetryTimesWithDefaultValue",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "className": "FailbackClusterInvokerTest",
          "testMethodName": "testInvokeRetryTimesWithIllegalValue",
          "overlapLines": [],
          "shareableMockLines": {
            "64": "Directory<FailbackClusterInvokerTest> dic;",
            "74": "dic = mock(Directory.class);",
            "75": "given(dic.getUrl()).willReturn(url);",
            "76": "given(dic.getConsumerUrl()).willReturn(url);",
            "77": "given(dic.list(invocation)).willReturn(invokers);",
            "78": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "88": "dic = null;"
          },
          "testMockLines": {
            "297": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, -100));"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "76": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
            "78": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "297": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Directory<FailbackClusterInvokerTest> dic;",
              "line": 64,
              "type": "FIELD_DECLARATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "74": {
              "code": "dic = mock(Directory.class);",
              "line": 74,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "75": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 75,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "76": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 76,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "77": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 77,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "78": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 78,
              "type": "STUBBING",
              "locate": "@Before",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "88": {
              "code": "dic = null;",
              "line": 88,
              "type": "ASSIGNMENT",
              "locate": "@After",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "tearDown",
                "methodAnnotations": [
                  "AfterEach"
                ]
              }
            },
            "297": {
              "code": "given(dic.getConsumerUrl()).willReturn(url.addParameter(RETRIES_KEY, -100));",
              "line": 297,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeRetryTimesWithIllegalValue",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.cluster.Directory": [
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
      "packageName": "org.apache.dubbo.rpc.cluster.support",
      "testCaseCount": 8,
      "sequenceCount": 8,
      "sharedStatementLineCount": 4,
      "locReduced": 28,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
        "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)"
      ],
      "sequences": [
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "143": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "150": "given(directory.getUrl()).willReturn(url);",
            "151": "given(directory.getConsumerUrl()).willReturn(url);",
            "152": "given(directory.getConsumerUrl()).willReturn(url);",
            "153": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "143": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "150": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "151": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "152": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "143": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 143,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "150": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 150,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "203": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "210": "given(directory.getUrl()).willReturn(url);",
            "211": "given(directory.getConsumerUrl()).willReturn(url);",
            "212": "given(directory.getConsumerUrl()).willReturn(url);",
            "213": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "203": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "210": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "211": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "212": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "213": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "203": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 203,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "210": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 210,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "211": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 211,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "212": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 212,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "213": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 213,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testAddMenu1",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "269": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "276": "given(directory.getUrl()).willReturn(url);",
            "277": "given(directory.getConsumerUrl()).willReturn(url);",
            "278": "given(directory.getConsumerUrl()).willReturn(url);",
            "279": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "269": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "276": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "277": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "278": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "279": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "269": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "276": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "277": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 277,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "278": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 278,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "279": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 279,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAddMenu1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToNoInvokerAvailableException",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "317": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "324": "given(directory.getUrl()).willReturn(url);",
            "325": "given(directory.getConsumerUrl()).willReturn(url);",
            "326": "given(directory.getConsumerUrl()).willReturn(url);",
            "327": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "317": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "324": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "325": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "326": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "327": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "317": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 317,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "324": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 324,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "325": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 325,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "326": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 326,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "327": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 327,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToNoInvokerAvailableException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testInvokerToException",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "372": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "379": "given(directory.getUrl()).willReturn(url);",
            "380": "given(directory.getConsumerUrl()).willReturn(url);",
            "381": "given(directory.getConsumerUrl()).willReturn(url);",
            "382": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "372": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "379": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "380": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "381": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "382": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "372": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 372,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "379": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 379,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "380": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 380,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "381": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 381,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "382": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 382,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokerToException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuResultHasException",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "418": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "425": "given(directory.getUrl()).willReturn(url);",
            "426": "given(directory.getConsumerUrl()).willReturn(url);",
            "427": "given(directory.getConsumerUrl()).willReturn(url);",
            "428": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "418": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "425": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "426": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "427": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "428": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "418": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 418,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "425": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 425,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "426": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 426,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "427": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 427,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "428": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 428,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuResultHasException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testGetMenuWithMergerDefault",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "485": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "492": "given(directory.getUrl()).willReturn(url);",
            "493": "given(directory.getConsumerUrl()).willReturn(url);",
            "494": "given(directory.getConsumerUrl()).willReturn(url);",
            "495": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "485": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "492": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "493": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "494": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "495": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "485": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 485,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "492": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 492,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "493": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 493,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "494": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 494,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "495": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 495,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetMenuWithMergerDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\MergeableClusterInvokerTest.java",
          "className": "MergeableClusterInvokerTest",
          "testMethodName": "testDestroy",
          "overlapLines": [],
          "shareableMockLines": {
            "54": "private Directory directory = mock(Directory.class);",
            "97": "directory = mock(Directory.class);"
          },
          "testMockLines": {
            "523": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
            "530": "given(directory.getUrl()).willReturn(url);",
            "531": "given(directory.getConsumerUrl()).willReturn(url);",
            "532": "given(directory.getConsumerUrl()).willReturn(url);",
            "533": "given(directory.getInterface()).willReturn(MenuService.class);"
          },
          "abstractedStatement": {
            "523": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "530": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "531": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "532": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "533": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 54,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "97": {
              "code": "directory = mock(Directory.class);",
              "line": 97,
              "type": "ASSIGNMENT_MOCK",
              "locate": "@Before",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "setUp",
                "methodAnnotations": [
                  "BeforeEach"
                ]
              }
            },
            "523": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n    }\r\n});",
              "line": 523,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "530": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 530,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "531": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 531,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "532": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 532,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "533": {
              "code": "given(directory.getInterface()).willReturn(MenuService.class);",
              "line": 533,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDestroy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 3,
      "locReduced": 9,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)"
      ],
      "sequences": [
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testPreferredStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Directory directory = mock(Directory.class);"
          },
          "testMockLines": {
            "83": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
            "91": "given(directory.getUrl()).willReturn(url);",
            "92": "given(directory.getConsumerUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "83": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "91": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "92": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 43,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "83": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
              "line": 83,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "91": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 91,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 92,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Directory directory = mock(Directory.class);"
          },
          "testMockLines": {
            "128": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
            "136": "given(directory.getUrl()).willReturn(url);",
            "137": "given(directory.getConsumerUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "128": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "136": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "137": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 43,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "128": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "136": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 136,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "137": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 137,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneForceStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Directory directory = mock(Directory.class);"
          },
          "testMockLines": {
            "158": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
            "166": "given(directory.getUrl()).willReturn(url);",
            "167": "given(directory.getConsumerUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "158": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "166": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "167": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 43,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "158": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList() {\r\n\r\n    {\r\n        add(firstInvoker);\r\n        add(secondInvoker);\r\n        add(thirdInvoker);\r\n    }\r\n});",
              "line": 158,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "167": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 167,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "Directory",
          "mockedClass": "org.apache.dubbo.rpc.cluster.Directory",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testNoAvailableInvoker",
          "overlapLines": [],
          "shareableMockLines": {
            "43": "private Directory directory = mock(Directory.class);"
          },
          "testMockLines": {
            "175": "given(directory.getUrl()).willReturn(url);",
            "176": "given(directory.getConsumerUrl()).willReturn(url);",
            "177": "given(directory.list(invocation)).willReturn(new ArrayList<>(0));",
            "178": "given(directory.getInterface()).willReturn(ZoneAwareClusterInvokerTest.class);"
          },
          "abstractedStatement": {
            "175": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "176": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "177": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
            "178": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvokerTest>)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "private Directory directory = mock(Directory.class);",
              "line": 43,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "175": {
              "code": "given(directory.getUrl()).willReturn(url);",
              "line": 175,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoAvailableInvoker",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "176": {
              "code": "given(directory.getConsumerUrl()).willReturn(url);",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoAvailableInvoker",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "given(directory.list(invocation)).willReturn(new ArrayList<>(0));",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.list(org.apache.dubbo.rpc.Invocation)).thenReturn(java.util.ArrayList)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoAvailableInvoker",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "given(directory.getInterface()).willReturn(ZoneAwareClusterInvokerTest.class);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoAvailableInvoker",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "org.apache.dubbo.rpc.cluster.ClusterInvoker": [
    {
      "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
      "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
      "testCaseCount": 3,
      "sequenceCount": 9,
      "sharedStatementLineCount": 0,
      "locReduced": 8,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "firstInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testPreferredStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "63": "firstInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "44": {
              "code": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);",
              "line": 44,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "63": {
              "code": "firstInvoker = newUnexpectedInvoker();",
              "line": 63,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "108": "firstInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "44": {
              "code": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);",
              "line": 44,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "108": {
              "code": "firstInvoker = newUnexpectedInvoker();",
              "line": 108,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "firstInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneForceStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "44": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "154": "firstInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "44": {
              "code": "private ClusterInvoker firstInvoker = mock(ClusterInvoker.class);",
              "line": 44,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "154": {
              "code": "firstInvoker = newUnexpectedInvoker();",
              "line": 154,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testPreferredStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "66": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(PREFERRED_KEY, true);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);",
              "line": 45,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "66": {
              "code": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(PREFERRED_KEY, true);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});",
              "line": 66,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "111": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(ZONE_KEY, zoneKey);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);",
              "line": 45,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "111": {
              "code": "secondInvoker = (ClusterInvoker) Proxy.newProxyInstance(getClass().getClassLoader(), new Class<?>[] { ClusterInvoker.class }, (proxy, method, args) -> {\r\n    if (\"getUrl\".equals(method.getName())) {\r\n        return url;\r\n    }\r\n    if (\"getRegistryUrl\".equals(method.getName())) {\r\n        return registryUrl.addParameter(ZONE_KEY, zoneKey);\r\n    }\r\n    if (\"isAvailable\".equals(method.getName())) {\r\n        return true;\r\n    }\r\n    if (\"invoke\".equals(method.getName())) {\r\n        return new AppResponse(expectedValue);\r\n    }\r\n    return null;\r\n});",
              "line": 111,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "secondInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneForceStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "45": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "155": "secondInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "private ClusterInvoker secondInvoker = mock(ClusterInvoker.class);",
              "line": 45,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "155": {
              "code": "secondInvoker = newUnexpectedInvoker();",
              "line": 155,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "thirdInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testPreferredStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "64": "thirdInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "64": {
              "code": "thirdInvoker = newUnexpectedInvoker();",
              "line": 64,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPreferredStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "thirdInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "109": "thirdInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "109": {
              "code": "thirdInvoker = newUnexpectedInvoker();",
              "line": 109,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "thirdInvoker",
          "variableType": "ClusterInvoker",
          "mockedClass": "org.apache.dubbo.rpc.cluster.ClusterInvoker",
          "packageName": "org.apache.dubbo.rpc.cluster.support.registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\registry\\ZoneAwareClusterInvokerTest.java",
          "className": "ZoneAwareClusterInvokerTest",
          "testMethodName": "testRegistryZoneForceStrategy",
          "overlapLines": [],
          "shareableMockLines": {
            "46": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);"
          },
          "testMockLines": {
            "156": "thirdInvoker = newUnexpectedInvoker();"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "46": {
              "code": "private ClusterInvoker thirdInvoker = mock(ClusterInvoker.class);",
              "line": 46,
              "type": "FIELD_MOCK_CREATION",
              "locate": "Attribute",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "FieldDeclaration",
                "methodAnnotations": []
              }
            },
            "156": {
              "code": "thirdInvoker = newUnexpectedInvoker();",
              "line": 156,
              "type": "ASSIGNMENT",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegistryZoneForceStrategy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ],
  "null": [
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 26,
      "sequenceCount": 29,
      "sharedStatementLineCount": 1,
      "locReduced": 28,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java",
          "testMethodName": "testGetWeight",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
            "55": "given(invoker1.getUrl()).willReturn(url1);"
          },
          "abstractedStatement": {
            "55": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
              "line": 52,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "given(invoker1.getUrl()).willReturn(url1);",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "46": "Invoker invoker = mock(Invoker.class);",
            "48": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "48": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "46": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 46,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java",
          "testMethodName": "testGetWeight",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "57": "Invoker invoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
            "60": "given(invoker2.getUrl()).willReturn(url2);"
          },
          "abstractedStatement": {
            "60": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "Invoker invoker2 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
              "line": 57,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "given(invoker2.getUrl()).willReturn(url2);",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\loadbalance\\AbstractLoadBalanceTest.java",
          "testMethodName": "testGetRegistryWeight",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "70": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
            "72": "given(invoker1.getUrl()).willReturn(url1);"
          },
          "abstractedStatement": {
            "72": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "Invoker invoker1 = mock(Invoker.class, Mockito.withSettings().stubOnly());",
              "line": 70,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetRegistryWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "given(invoker1.getUrl()).willReturn(url1);",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetRegistryWeight",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthEnabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "61": "Invoker invoker = mock(Invoker.class);",
            "63": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "63": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "61": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 61,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "63": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 63,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailed",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "76": "Invoker invoker = mock(Invoker.class);",
            "79": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "79": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "76": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 76,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailedWhenNoSignature",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "93": "Invoker invoker = mock(Invoker.class);",
            "96": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "96": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "93": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 93,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoSignature",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "96": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 96,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoSignature",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailedWhenNoAccessKeyPair",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "108": "Invoker invoker = mock(Invoker.class);",
            "114": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "114": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "108": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 108,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoAccessKeyPair",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoAccessKeyPair",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailedWhenParameterError",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "136": "Invoker invoker = mock(Invoker.class);",
            "144": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "144": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "136": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 136,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "144": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 144,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-compatible\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java",
          "testMethodName": "testInvokeWithException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "55": "Invoker invoker = Mockito.mock(Invoker.class);",
            "59": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
            "61": "when(invoker.getUrl()).thenReturn(url);",
            "62": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "59": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "61": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "62": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 55,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 62,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testNoExecuteLimitInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "46": "Invoker invoker = Mockito.mock(Invoker.class);",
            "47": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
            "48": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1\"));"
          },
          "abstractedStatement": {
            "47": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "48": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "46": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 46,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1\"));",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "172": "Invoker invoker = mock(Invoker.class);",
            "178": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "178": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "172": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 172,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 178,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testExecuteLimitInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "59": "Invoker invoker = Mockito.mock(Invoker.class);",
            "60": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
            "61": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&executes=10\"));"
          },
          "abstractedStatement": {
            "60": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "61": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 59,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&executes=10\"));",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testExecuteLimitInvokeWithException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "73": "Invoker invoker = Mockito.mock(Invoker.class);",
            "74": "doThrow(new RpcException()).when(invoker).invoke(any(Invocation.class));",
            "77": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "74": "doThrow(org.apache.dubbo.rpc.RpcException).when(null).invoke(org.apache.dubbo.rpc.Invocation)",
            "77": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "73": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 73,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "doThrow(new RpcException()).when(invoker).invoke(any(Invocation.class));",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(org.apache.dubbo.rpc.RpcException).when(null).invoke(org.apache.dubbo.rpc.Invocation)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java",
          "testMethodName": "testInvokeWithDefault",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "65": "Invoker invoker = Mockito.mock(Invoker.class);",
            "66": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(new Person(\"person\", 10), invocation));",
            "68": "when(invoker.getUrl()).thenReturn(url);",
            "69": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "66": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(null)",
            "68": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "69": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 65,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(new Person(\"person\", 10), invocation));",
              "line": 66,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "68": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 68,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "69": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 69,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithDefault",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java",
          "testMethodName": "testInvokeWithMethodNamtNot$Invoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "124": "Invoker invoker = Mockito.mock(Invoker.class);",
            "125": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
            "126": "when(invoker.getUrl()).thenReturn(url);",
            "127": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "125": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "126": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "127": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "124": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 124,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodNamtNot$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "125": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
              "line": 125,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodNamtNot$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "126": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodNamtNot$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodNamtNot$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericFilterTest.java",
          "testMethodName": "testInvokeWithMethodArgumentSizeIsNot3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "150": "Invoker invoker = Mockito.mock(Invoker.class);",
            "151": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
            "152": "when(invoker.getUrl()).thenReturn(url);",
            "153": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "151": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "152": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "153": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "150": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 150,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "151": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
              "line": 151,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithMethodArgumentSizeIsNot3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java",
          "testMethodName": "testInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "63": "Invoker invoker = Mockito.mock(Invoker.class);",
            "70": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
            "72": "when(invoker.getUrl()).thenReturn(url);",
            "73": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "70": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "72": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "73": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 63,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "70": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
              "line": 70,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "73": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 73,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java",
          "testMethodName": "testInvokeWithException1",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "96": "Invoker invoker = Mockito.mock(Invoker.class);",
            "99": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
            "101": "when(invoker.getUrl()).thenReturn(url);",
            "102": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "99": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "101": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "102": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "96": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 96,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException1",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            },
            "99": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
              "line": 99,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException1",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            },
            "101": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException1",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            },
            "102": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException1",
                "methodAnnotations": [
                  "Test",
                  "Disabled"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java",
          "testMethodName": "testInvokeWithException2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "122": "Invoker invoker = Mockito.mock(Invoker.class);",
            "125": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
            "127": "when(invoker.getUrl()).thenReturn(url);",
            "128": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "125": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
            "127": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "128": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "122": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 122,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "125": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(AsyncRpcResult.newDefaultAsyncResult(mockRpcResult, invocation));",
              "line": 125,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AsyncRpcResult)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithException2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\GenericImplFilterTest.java",
          "testMethodName": "testInvokeWith$Invoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "154": "Invoker invoker = Mockito.mock(Invoker.class);",
            "155": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
            "156": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "156": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "154": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 154,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWith$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "155": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(new Person(\"person\", 10)));",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWith$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 156,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWith$Invoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java",
          "testMethodName": "testInvokeWithoutTimeout",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "42": "Invoker invoker = Mockito.mock(Invoker.class);",
            "43": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
            "44": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=\" + timeout));"
          },
          "abstractedStatement": {
            "43": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "44": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "42": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 42,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "43": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
              "line": 43,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "44": {
              "code": "when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1&timeout=\" + timeout));",
              "line": 44,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TokenFilterTest.java",
          "testMethodName": "testInvokeWithToken",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "Invoker invoker = Mockito.mock(Invoker.class);",
            "47": "when(invoker.getUrl()).thenReturn(url);",
            "48": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));"
          },
          "abstractedStatement": {
            "47": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "48": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Invoker invoker = Mockito.mock(Invoker.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithToken",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithToken",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithToken",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testSkipMonitorIfNotHasKey",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "153": "Invoker invoker = mock(Invoker.class);",
            "154": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880?\" + APPLICATION_KEY + \"=abc&\" + SIDE_KEY + \"=\" + CONSUMER_SIDE));"
          },
          "abstractedStatement": {
            "154": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "153": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 153,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSkipMonitorIfNotHasKey",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "154": {
              "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880?\" + APPLICATION_KEY + \"=abc&\" + SIDE_KEY + \"=\" + CONSUMER_SIDE));",
              "line": 154,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSkipMonitorIfNotHasKey",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testAvailable",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "210": "Invoker invoker = mock(Invoker.class);",
            "213": "given(invoker.isAvailable()).willReturn(true);",
            "214": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));",
            "218": "verify(invoker).isAvailable();"
          },
          "abstractedStatement": {
            "213": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
            "214": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "210": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 210,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAvailable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "213": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 213,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAvailable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "214": {
              "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));",
              "line": 214,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAvailable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "218": {
              "code": "verify(invoker).isAvailable();",
              "line": 218,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAvailable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testSum",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "235": "Invoker invoker = mock(Invoker.class);",
            "238": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));"
          },
          "abstractedStatement": {
            "238": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "235": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 235,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSum",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "238": {
              "code": "given(invoker.getUrl()).willReturn(URL.valueOf(\"dubbo://127.0.0.1:7070?interval=20\"));",
              "line": 238,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSum",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testLookUp",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "272": "Invoker invoker = mock(Invoker.class);",
            "276": "given(invoker.getUrl()).willReturn(queryUrl);"
          },
          "abstractedStatement": {
            "276": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "272": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 272,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLookUp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "276": {
              "code": "given(invoker.getUrl()).willReturn(queryUrl);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLookUp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "Invoker invoker = mock(Invoker.class);",
            "43": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "43": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "41": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 41,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "43": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 43,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
          "testMethodName": "testAuthEnabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "56": "Invoker invoker = mock(Invoker.class);",
            "58": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "58": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "56": {
              "code": "Invoker invoker = mock(Invoker.class);",
              "line": 56,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 58,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 5,
      "sequenceCount": 24,
      "sharedStatementLineCount": 1,
      "locReduced": 23,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "demoServiceListener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "410": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
            "411": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
            "428": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
            "442": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());"
          },
          "abstractedStatement": {
            "411": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "410": {
              "code": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
              "line": 410,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "411": {
              "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 411,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "428": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
              "line": 428,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "442": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());",
              "line": 442,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "412": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
            "413": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);"
          },
          "abstractedStatement": {
            "413": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "412": {
              "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
              "line": 412,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "413": {
              "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 413,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "414": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
            "415": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
            "432": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
            "446": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());"
          },
          "abstractedStatement": {
            "415": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "414": {
              "code": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
              "line": 414,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "415": {
              "code": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 415,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "432": {
              "code": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
              "line": 432,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "446": {
              "code": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());",
              "line": 446,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "416": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
            "417": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);"
          },
          "abstractedStatement": {
            "417": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "416": {
              "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
              "line": 416,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "417": {
              "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 417,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService3Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "451": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
            "452": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
            "453": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
            "454": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());"
          },
          "abstractedStatement": {
            "452": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "451": {
              "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
              "line": 451,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "452": {
              "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
              "line": 452,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "453": {
              "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
              "line": 453,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "454": {
              "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
              "line": 454,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "467": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
            "468": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
            "469": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
            "486": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());"
          },
          "abstractedStatement": {
            "468": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "467": {
              "code": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
              "line": 467,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "468": {
              "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
              "line": 468,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "469": {
              "code": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
              "line": 469,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "486": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());",
              "line": 486,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "471": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
            "472": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
            "473": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
            "491": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());"
          },
          "abstractedStatement": {
            "472": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "471": {
              "code": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
              "line": 471,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "472": {
              "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
              "line": 472,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "473": {
              "code": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
              "line": 473,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "491": {
              "code": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());",
              "line": 491,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener3",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "475": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
            "476": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
            "477": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
            "496": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());"
          },
          "abstractedStatement": {
            "476": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "475": {
              "code": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
              "line": 475,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "476": {
              "code": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
              "line": 476,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "477": {
              "code": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
              "line": 477,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "496": {
              "code": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());",
              "line": 496,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "361": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
            "362": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
            "373": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
            "387": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());"
          },
          "abstractedStatement": {
            "362": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "361": {
              "code": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
              "line": 361,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "362": {
              "code": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 362,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "373": {
              "code": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
              "line": 373,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "387": {
              "code": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());",
              "line": 387,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "testServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
          "testMethodName": "testSubscribeURLs",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "226": "// different interface mapping to the same apps\r\nNotifyListener testServiceListener2 = mock(NotifyListener.class);",
            "228": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
            "229": "serviceDiscoveryRegistry.subscribeURLs(url2, testServiceListener2, multiApps);"
          },
          "abstractedStatement": {
            "228": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "226": {
              "code": "// different interface mapping to the same apps\r\nNotifyListener testServiceListener2 = mock(NotifyListener.class);",
              "line": 226,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeURLs",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "228": {
              "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
              "line": 228,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeURLs",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "229": {
              "code": "serviceDiscoveryRegistry.subscribeURLs(url2, testServiceListener2, multiApps);",
              "line": 229,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeURLs",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "363": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
            "364": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
            "377": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
            "391": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());"
          },
          "abstractedStatement": {
            "364": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "363": {
              "code": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
              "line": 363,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "364": {
              "code": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 364,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "377": {
              "code": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
              "line": 377,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "391": {
              "code": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());",
              "line": 391,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "testServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\ServiceDiscoveryRegistryTest.java",
          "testMethodName": "testUnsubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "266": "NotifyListener testServiceListener2 = mock(NotifyListener.class);",
            "268": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);"
          },
          "abstractedStatement": {
            "268": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "266": {
              "code": "NotifyListener testServiceListener2 = mock(NotifyListener.class);",
              "line": 266,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnsubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "268": {
              "code": "when(testServiceListener2.getConsumerUrl()).thenReturn(url2);",
              "line": 268,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnsubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService3Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "396": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
            "397": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
            "398": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
            "399": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());"
          },
          "abstractedStatement": {
            "397": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "396": {
              "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
              "line": 396,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "397": {
              "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
              "line": 397,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "398": {
              "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
              "line": 398,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "399": {
              "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
              "line": 399,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "409": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
            "410": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
            "427": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
            "441": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());"
          },
          "abstractedStatement": {
            "410": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "409": {
              "code": "NotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
              "line": 409,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "410": {
              "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 410,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "427": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(captor.capture());",
              "line": 427,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "441": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(2)).notify(app2_captor.capture());",
              "line": 441,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "411": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
            "412": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);"
          },
          "abstractedStatement": {
            "412": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "411": {
              "code": "NotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
              "line": 411,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "412": {
              "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 412,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "413": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
            "414": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
            "431": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
            "445": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());"
          },
          "abstractedStatement": {
            "414": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "413": {
              "code": "NotifyListener demoService2Listener1 = Mockito.mock(NotifyListener.class);",
              "line": 413,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "414": {
              "code": "when(demoService2Listener1.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 414,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "431": {
              "code": "Mockito.verify(demoService2Listener1, Mockito.times(1)).notify(captor2.capture());",
              "line": 431,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "445": {
              "code": "Mockito.verify(demoService2Listener1, Mockito.times(2)).notify(app2_captor2.capture());",
              "line": 445,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "415": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
            "416": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);"
          },
          "abstractedStatement": {
            "416": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "415": {
              "code": "NotifyListener demoService2Listener2 = Mockito.mock(NotifyListener.class);",
              "line": 415,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "416": {
              "code": "when(demoService2Listener2.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 416,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService3Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testMultiServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "450": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
            "451": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
            "452": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
            "453": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());"
          },
          "abstractedStatement": {
            "451": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "450": {
              "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
              "line": 450,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "451": {
              "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
              "line": 451,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "452": {
              "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
              "line": 452,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "453": {
              "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
              "line": 453,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultiServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener1",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "466": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
            "467": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
            "468": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
            "485": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());"
          },
          "abstractedStatement": {
            "467": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "466": {
              "code": "// no protocol specified, consume all instances\r\nNotifyListener demoServiceListener1 = Mockito.mock(NotifyListener.class);",
              "line": 466,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "467": {
              "code": "when(demoServiceListener1.getConsumerUrl()).thenReturn(noProtocolConsumerURL);",
              "line": 467,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "468": {
              "code": "listener.addListenerAndNotify(noProtocolConsumerURL, demoServiceListener1);",
              "line": 468,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "485": {
              "code": "Mockito.verify(demoServiceListener1, Mockito.times(1)).notify(default_protocol_captor.capture());",
              "line": 485,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener2",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "470": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
            "471": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
            "472": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
            "490": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());"
          },
          "abstractedStatement": {
            "471": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "470": {
              "code": "// multiple protocols specified\r\nNotifyListener demoServiceListener2 = Mockito.mock(NotifyListener.class);",
              "line": 470,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "471": {
              "code": "when(demoServiceListener2.getConsumerUrl()).thenReturn(multipleProtocolsConsumerURL);",
              "line": 471,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "472": {
              "code": "listener.addListenerAndNotify(multipleProtocolsConsumerURL, demoServiceListener2);",
              "line": 472,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "490": {
              "code": "Mockito.verify(demoServiceListener2, Mockito.times(1)).notify(multi_protocols_captor.capture());",
              "line": 490,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener3",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testSubscribeMultipleProtocols",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "474": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
            "475": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
            "476": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
            "495": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());"
          },
          "abstractedStatement": {
            "475": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "474": {
              "code": "// one protocol specified\r\nNotifyListener demoServiceListener3 = Mockito.mock(NotifyListener.class);",
              "line": 474,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "475": {
              "code": "when(demoServiceListener3.getConsumerUrl()).thenReturn(singleProtocolsConsumerURL);",
              "line": 475,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "476": {
              "code": "listener.addListenerAndNotify(singleProtocolsConsumerURL, demoServiceListener3);",
              "line": 476,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "495": {
              "code": "Mockito.verify(demoServiceListener3, Mockito.times(1)).notify(single_protocols_captor.capture());",
              "line": 495,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultipleProtocols",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoServiceListener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "362": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
            "363": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
            "374": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
            "388": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());"
          },
          "abstractedStatement": {
            "363": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "362": {
              "code": "NotifyListener demoServiceListener = Mockito.mock(NotifyListener.class);",
              "line": 362,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "363": {
              "code": "when(demoServiceListener.getConsumerUrl()).thenReturn(consumerURL);",
              "line": 363,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "374": {
              "code": "Mockito.verify(demoServiceListener, Mockito.times(1)).notify(captor.capture());",
              "line": 374,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "388": {
              "code": "Mockito.verify(demoServiceListener, Mockito.times(2)).notify(app2_captor.capture());",
              "line": 388,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService2Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "364": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
            "365": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
            "378": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
            "392": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());"
          },
          "abstractedStatement": {
            "365": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "364": {
              "code": "NotifyListener demoService2Listener = Mockito.mock(NotifyListener.class);",
              "line": 364,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "365": {
              "code": "when(demoService2Listener.getConsumerUrl()).thenReturn(consumerURL2);",
              "line": 365,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "378": {
              "code": "Mockito.verify(demoService2Listener, Mockito.times(1)).notify(captor2.capture());",
              "line": 378,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "392": {
              "code": "Mockito.verify(demoService2Listener, Mockito.times(2)).notify(app2_captor2.capture());",
              "line": 392,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "demoService3Listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testServiceListenerNotification",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "397": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
            "398": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
            "399": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
            "400": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());"
          },
          "abstractedStatement": {
            "398": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "397": {
              "code": "// test service listener still get notified when added after instance notification.\r\nNotifyListener demoService3Listener = Mockito.mock(NotifyListener.class);",
              "line": 397,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "398": {
              "code": "when(demoService3Listener.getConsumerUrl()).thenReturn(consumerURL3);",
              "line": 398,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.NotifyListener.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "399": {
              "code": "listener.addListenerAndNotify(consumerURL3, demoService3Listener);",
              "line": 399,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            },
            "400": {
              "code": "Mockito.verify(demoService3Listener, Mockito.times(1)).notify(Mockito.anyList());",
              "line": 400,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testServiceListenerNotification",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 4,
      "locReduced": 12,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "62": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
            "68": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
            "71": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
            "74": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
            "100": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
            "111": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);",
            "128": "Mockito.verify(invoker, Mockito.times(2)).invoke(null);",
            "135": "Mockito.verify(invoker, Mockito.times(3)).invoke(null);",
            "140": "Mockito.verify(invoker, Mockito.times(4)).invoke(null);",
            "146": "Mockito.verify(invoker, Mockito.times(5)).invoke(null);",
            "170": "Mockito.verify(invoker, Mockito.times(6)).invoke(null);",
            "192": "Mockito.verify(invoker, Mockito.times(7)).invoke(null);",
            "213": "Mockito.verify(invoker, Mockito.times(27)).invoke(null);",
            "225": "Mockito.verify(invoker, Mockito.atLeast(28)).invoke(null);"
          },
          "abstractedStatement": {
            "68": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
            "71": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
            "74": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "100": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
              "line": 62,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "68": {
              "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
              "line": 68,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "71": {
              "code": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
              "line": 71,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "74": {
              "code": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "100": {
              "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
              "line": 100,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "111": {
              "code": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);",
              "line": 111,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "128": {
              "code": "Mockito.verify(invoker, Mockito.times(2)).invoke(null);",
              "line": 128,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "135": {
              "code": "Mockito.verify(invoker, Mockito.times(3)).invoke(null);",
              "line": 135,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "140": {
              "code": "Mockito.verify(invoker, Mockito.times(4)).invoke(null);",
              "line": 140,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "146": {
              "code": "Mockito.verify(invoker, Mockito.times(5)).invoke(null);",
              "line": 146,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "170": {
              "code": "Mockito.verify(invoker, Mockito.times(6)).invoke(null);",
              "line": 170,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "192": {
              "code": "Mockito.verify(invoker, Mockito.times(7)).invoke(null);",
              "line": 192,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "213": {
              "code": "Mockito.verify(invoker, Mockito.times(27)).invoke(null);",
              "line": 213,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "225": {
              "code": "Mockito.verify(invoker, Mockito.atLeast(28)).invoke(null);",
              "line": 225,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "serviceDiscoveryInvoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "63": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
            "69": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
            "72": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
            "75": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
            "101": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
            "116": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
            "122": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);",
            "152": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(3)).invoke(null);",
            "157": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(4)).invoke(null);",
            "163": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(5)).invoke(null);",
            "175": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(6)).invoke(null);",
            "181": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(7)).invoke(null);",
            "204": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(27)).invoke(null);",
            "207": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(false);",
            "216": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
            "224": "Mockito.verify(serviceDiscoveryInvoker, Mockito.atMost(1026)).invoke(null);"
          },
          "abstractedStatement": {
            "69": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
            "72": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
            "75": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "101": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "207": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "216": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
              "line": 63,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "69": {
              "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
              "line": 69,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "72": {
              "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "75": {
              "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "101": {
              "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "116": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
              "line": 116,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "122": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);",
              "line": 122,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "152": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(3)).invoke(null);",
              "line": 152,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "157": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(4)).invoke(null);",
              "line": 157,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "163": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(5)).invoke(null);",
              "line": 163,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "175": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(6)).invoke(null);",
              "line": 175,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "181": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(7)).invoke(null);",
              "line": 181,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "204": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(27)).invoke(null);",
              "line": 204,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "207": {
              "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(false);",
              "line": 207,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "216": {
              "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
              "line": 216,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "224": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.atMost(1026)).invoke(null);",
              "line": 224,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "238": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
            "244": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
            "247": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
            "250": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
            "276": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
            "291": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);"
          },
          "abstractedStatement": {
            "244": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
            "247": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
            "250": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "276": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "238": {
              "code": "ClusterInvoker invoker = Mockito.mock(ClusterInvoker.class);",
              "line": 238,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "244": {
              "code": "Mockito.when(invoker.getDirectory()).thenReturn(directory);",
              "line": 244,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "247": {
              "code": "Mockito.when(invoker.isAvailable()).thenReturn(true);",
              "line": 247,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "250": {
              "code": "Mockito.when(invoker.hasProxyInvokers()).thenReturn(true);",
              "line": 250,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "276": {
              "code": "Mockito.when(invoker.getUrl()).thenReturn(consumerURL);",
              "line": 276,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "291": {
              "code": "Mockito.verify(invoker, Mockito.times(1)).invoke(null);",
              "line": 291,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "serviceDiscoveryInvoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "239": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
            "245": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
            "248": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
            "251": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
            "277": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
            "287": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
            "289": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(false);",
            "293": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
            "295": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);"
          },
          "abstractedStatement": {
            "245": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
            "248": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
            "251": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "277": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "289": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
            "293": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "239": {
              "code": "ClusterInvoker serviceDiscoveryInvoker = Mockito.mock(ClusterInvoker.class);",
              "line": 239,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "245": {
              "code": "Mockito.when(serviceDiscoveryInvoker.getDirectory()).thenReturn(serviceDiscoveryDirectory);",
              "line": 245,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.registry.integration.DynamicDirectory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "248": {
              "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
              "line": 248,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "251": {
              "code": "Mockito.when(serviceDiscoveryInvoker.hasProxyInvokers()).thenReturn(true);",
              "line": 251,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "277": {
              "code": "Mockito.when(serviceDiscoveryInvoker.getUrl()).thenReturn(consumerURL);",
              "line": 277,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "287": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(1)).invoke(null);",
              "line": 287,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "289": {
              "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(false);",
              "line": 289,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "293": {
              "code": "Mockito.when(serviceDiscoveryInvoker.isAvailable()).thenReturn(true);",
              "line": 293,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "295": {
              "code": "Mockito.verify(serviceDiscoveryInvoker, Mockito.times(2)).invoke(null);",
              "line": 295,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 11,
      "sequenceCount": 11,
      "sharedStatementLineCount": 1,
      "locReduced": 10,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testExecuteLimitInvokeWithException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "79": "Invocation invocation = Mockito.mock(Invocation.class);",
            "80": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvokeWitException\");"
          },
          "abstractedStatement": {
            "80": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "79": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 79,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvokeWitException\");",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvokeWithException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testMoreThanExecuteLimitInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "99": "final Invocation invocation = Mockito.mock(RpcInvocation.class);",
            "100": "when(invocation.getMethodName()).thenReturn(\"testMoreThanExecuteLimitInvoke\");"
          },
          "abstractedStatement": {
            "100": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "99": {
              "code": "final Invocation invocation = Mockito.mock(RpcInvocation.class);",
              "line": 99,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMoreThanExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "100": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testMoreThanExecuteLimitInvoke\");",
              "line": 100,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMoreThanExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java",
          "testMethodName": "testEcho",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "Invocation invocation = createMockRpcInvocation();",
            "43": "given(invocation.getMethodName()).willReturn(\"$echo\");"
          },
          "abstractedStatement": {
            "43": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "41": {
              "code": "Invocation invocation = createMockRpcInvocation();",
              "line": 41,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testEcho",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "43": {
              "code": "given(invocation.getMethodName()).willReturn(\"$echo\");",
              "line": 43,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testEcho",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\EchoFilterTest.java",
          "testMethodName": "testNonEcho",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "Invocation invocation = createMockRpcInvocation();",
            "54": "given(invocation.getMethodName()).willReturn(\"echo\");"
          },
          "abstractedStatement": {
            "54": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "Invocation invocation = createMockRpcInvocation();",
              "line": 52,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testNonEcho",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "54": {
              "code": "given(invocation.getMethodName()).willReturn(\"echo\");",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNonEcho",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockInvocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java",
          "testMethodName": "testInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "97": "Invocation mockInvocation = mock(Invocation.class);",
            "102": "given(mockInvocation.getMethodName()).willReturn(method);",
            "103": "given(mockInvocation.getArguments()).willReturn(new Object[0]);",
            "104": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);"
          },
          "abstractedStatement": {
            "102": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "103": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])"
          },
          "rawStatementInfo": {
            "97": {
              "code": "Invocation mockInvocation = mock(Invocation.class);",
              "line": 97,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "given(mockInvocation.getMethodName()).willReturn(method);",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "given(mockInvocation.getArguments()).willReturn(new Object[0]);",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);",
              "line": 104,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java",
          "testMethodName": "testInvokeWithoutTimeout",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "48": "Invocation invocation = Mockito.mock(Invocation.class);",
            "49": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithoutTimeout\");"
          },
          "abstractedStatement": {
            "49": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 48,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithoutTimeout\");",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithoutTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailedWhenParameterError",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "137": "Invocation invocation = mock(RpcInvocation.class);",
            "138": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
            "139": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
            "140": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(currentTimeMillis);",
            "141": "when(invocation.getMethodName()).thenReturn(method);",
            "143": "when(invocation.getArguments()).thenReturn(fakeParams);",
            "153": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);"
          },
          "abstractedStatement": {
            "138": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
            "139": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
            "140": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(long)",
            "141": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "143": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
            "153": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "137": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 137,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "138": {
              "code": "when(invocation.getObjectAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
              "line": 138,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "139": {
              "code": "when(invocation.getObjectAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
              "line": 139,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "140": {
              "code": "when(invocation.getObjectAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(currentTimeMillis);",
              "line": 140,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(long)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "141": {
              "code": "when(invocation.getMethodName()).thenReturn(method);",
              "line": 141,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "143": {
              "code": "when(invocation.getArguments()).thenReturn(fakeParams);",
              "line": 143,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getArguments()).thenReturn(java.lang.Object[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "153": {
              "code": "when(invocation.getObjectAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
              "line": 153,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getObjectAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenParameterError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\TimeoutFilterTest.java",
          "testMethodName": "testInvokeWithTimeout",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "62": "Invocation invocation = Mockito.mock(RpcInvocation.class);",
            "63": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithTimeout\");"
          },
          "abstractedStatement": {
            "63": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "62": {
              "code": "Invocation invocation = Mockito.mock(RpcInvocation.class);",
              "line": 62,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "63": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testInvokeWithTimeout\");",
              "line": 63,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithTimeout",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testNoExecuteLimitInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "50": "Invocation invocation = Mockito.mock(Invocation.class);",
            "51": "when(invocation.getMethodName()).thenReturn(\"testNoExecuteLimitInvoke\");"
          },
          "abstractedStatement": {
            "51": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 50,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testNoExecuteLimitInvoke\");",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNoExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthSuccessfully",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "173": "Invocation invocation = mock(RpcInvocation.class);",
            "174": "when(invocation.getAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
            "175": "when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
            "176": "when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis));",
            "177": "when(invocation.getMethodName()).thenReturn(method);",
            "187": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);"
          },
          "abstractedStatement": {
            "174": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
            "175": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
            "176": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
            "177": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
            "187": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "173": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 173,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "174": {
              "code": "when(invocation.getAttachment(Constants.AK_KEY)).thenReturn(\"ak\");",
              "line": 174,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "175": {
              "code": "when(invocation.getAttachment(CommonConstants.CONSUMER)).thenReturn(\"test-consumer\");",
              "line": 175,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "176": {
              "code": "when(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY)).thenReturn(String.valueOf(currentTimeMillis));",
              "line": 176,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "177": {
              "code": "when(invocation.getMethodName()).thenReturn(method);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "187": {
              "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(sign);",
              "line": 187,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthSuccessfully",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExecuteLimitFilterTest.java",
          "testMethodName": "testExecuteLimitInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "64": "Invocation invocation = Mockito.mock(Invocation.class);",
            "65": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvoke\");"
          },
          "abstractedStatement": {
            "65": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 64,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "when(invocation.getMethodName()).thenReturn(\"testExecuteLimitInvoke\");",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getMethodName()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testExecuteLimitInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 2,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "newInvoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "43": "ClusterInvoker newInvoker = Mockito.mock(ClusterInvoker.class);",
            "51": "Mockito.when(newInvoker.getDirectory()).thenReturn(newDirectory);",
            "53": "Mockito.when(newInvoker.getUrl()).thenReturn(url);",
            "56": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(false);",
            "63": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(true);"
          },
          "abstractedStatement": {
            "51": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
            "53": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "56": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "63": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "ClusterInvoker newInvoker = Mockito.mock(ClusterInvoker.class);",
              "line": 43,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "51": {
              "code": "Mockito.when(newInvoker.getDirectory()).thenReturn(newDirectory);",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "53": {
              "code": "Mockito.when(newInvoker.getUrl()).thenReturn(url);",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "56": {
              "code": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(false);",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "63": {
              "code": "Mockito.when(newInvoker.hasProxyInvokers()).thenReturn(true);",
              "line": 63,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "oldInvoker",
          "variableType": "ClusterInvoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "ClusterInvoker oldInvoker = Mockito.mock(ClusterInvoker.class);",
            "52": "Mockito.when(oldInvoker.getDirectory()).thenReturn(oldDirectory);",
            "54": "Mockito.when(oldInvoker.getUrl()).thenReturn(url);",
            "64": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(false);",
            "71": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(true);"
          },
          "abstractedStatement": {
            "52": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
            "54": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "64": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
            "71": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "ClusterInvoker oldInvoker = Mockito.mock(ClusterInvoker.class);",
              "line": 44,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "52": {
              "code": "Mockito.when(oldInvoker.getDirectory()).thenReturn(oldDirectory);",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getDirectory()).thenReturn(org.apache.dubbo.rpc.cluster.Directory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.when(oldInvoker.getUrl()).thenReturn(url);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "64": {
              "code": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(false);",
              "line": 64,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "71": {
              "code": "Mockito.when(oldInvoker.hasProxyInvokers()).thenReturn(true);",
              "line": 71,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.ClusterInvoker.hasProxyInvokers()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 5,
      "locReduced": 10,
      "sharedStatements": [
        "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
        "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "268": "URL consumerURL = Mockito.mock(URL.class);",
            "269": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
            "270": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
            "271": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
            "272": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
            "273": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
            "274": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());"
          },
          "abstractedStatement": {
            "269": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
            "270": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
            "271": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
            "272": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "273": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "274": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)"
          },
          "rawStatementInfo": {
            "268": {
              "code": "URL consumerURL = Mockito.mock(URL.class);",
              "line": 268,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "269": {
              "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
              "line": 269,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "270": {
              "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
              "line": 270,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "271": {
              "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
              "line": 271,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "272": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
              "line": 272,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "273": {
              "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
              "line": 273,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "274": {
              "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
              "line": 274,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "92": "URL consumerURL = Mockito.mock(URL.class);",
            "93": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
            "94": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
            "95": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
            "96": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
            "97": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
            "98": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());"
          },
          "abstractedStatement": {
            "93": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
            "94": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
            "95": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
            "96": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "97": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "98": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)"
          },
          "rawStatementInfo": {
            "92": {
              "code": "URL consumerURL = Mockito.mock(URL.class);",
              "line": 92,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "93": {
              "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "94": {
              "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
              "line": 94,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "95": {
              "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
              "line": 95,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "96": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
              "line": 96,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "97": {
              "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
              "line": 97,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "98": {
              "code": "Mockito.when(consumerURL.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
              "line": 98,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\status\\reporter\\FrameworkStatusReportServiceTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "54": "// 2. createConsumptionReport\r\nURL consumerURL = Mockito.mock(URL.class);",
            "55": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
            "56": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
            "57": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
            "58": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
            "59": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
            "60": "reportService.reportConsumptionStatus(reportService.createConsumptionReport(consumerURL.getServiceInterface(), consumerURL.getVersion(), consumerURL.getGroup(), \"status\"));"
          },
          "abstractedStatement": {
            "55": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
            "56": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
            "57": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
            "58": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "59": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "// 2. createConsumptionReport\r\nURL consumerURL = Mockito.mock(URL.class);",
              "line": 54,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "Mockito.when(consumerURL.getServiceInterface()).thenReturn(\"Test\");",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "Mockito.when(consumerURL.getGroup()).thenReturn(\"Group\");",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getGroup()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "Mockito.when(consumerURL.getVersion()).thenReturn(\"0.0.0\");",
              "line": 57,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getVersion()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Group/Test:0.0.0\");",
              "line": 58,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "Mockito.when(consumerURL.getDisplayServiceKey()).thenReturn(\"Test:0.0.0\");",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "reportService.reportConsumptionStatus(reportService.createConsumptionReport(consumerURL.getServiceInterface(), consumerURL.getVersion(), consumerURL.getGroup(), \"status\"));",
              "line": 60,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 10,
      "locReduced": 10,
      "sharedStatements": [
        "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
        "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
        "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
        "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
        "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
        "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
        "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
        "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)",
        "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
        "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)"
      ],
      "sequences": [
        {
          "variableName": "failLogger",
          "variableType": "Logger",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeErrorTypeAwareLoggerTest.java",
          "testMethodName": "testFailsafeErrorTypeAwareForLoggingMethod",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "Logger failLogger = mock(Logger.class);",
            "43": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
            "44": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
            "45": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
            "46": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
            "47": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
            "52": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
            "53": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
            "54": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
            "55": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
            "56": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));"
          },
          "abstractedStatement": {
            "43": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
            "44": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
            "45": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
            "46": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
            "47": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
            "52": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
            "53": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
            "54": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
            "55": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
            "56": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)"
          },
          "rawStatementInfo": {
            "40": {
              "code": "Logger failLogger = mock(Logger.class);",
              "line": 40,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "43": {
              "code": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
              "line": 43,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "44": {
              "code": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
              "line": 44,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
              "line": 45,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
              "line": 46,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailsafeErrorTypeAwareForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "failLogger",
          "variableType": "Logger",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\logger\\support\\FailsafeLoggerTest.java",
          "testMethodName": "testFailSafeForLoggingMethod",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "33": "Logger failLogger = mock(Logger.class);",
            "36": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
            "37": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
            "38": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
            "39": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
            "40": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
            "48": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
            "49": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
            "50": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
            "51": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
            "52": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));"
          },
          "abstractedStatement": {
            "36": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
            "37": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
            "38": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
            "39": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
            "40": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
            "48": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
            "49": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
            "50": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
            "51": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
            "52": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)"
          },
          "rawStatementInfo": {
            "33": {
              "code": "Logger failLogger = mock(Logger.class);",
              "line": 33,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "36": {
              "code": "doThrow(new RuntimeException()).when(failLogger).error(anyString());",
              "line": 36,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "37": {
              "code": "doThrow(new RuntimeException()).when(failLogger).warn(anyString());",
              "line": 37,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "38": {
              "code": "doThrow(new RuntimeException()).when(failLogger).info(anyString());",
              "line": 38,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "39": {
              "code": "doThrow(new RuntimeException()).when(failLogger).debug(anyString());",
              "line": 39,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "40": {
              "code": "doThrow(new RuntimeException()).when(failLogger).trace(anyString());",
              "line": 40,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "doThrow(new RuntimeException()).when(failLogger).error(any(Throwable.class));",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).error(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "doThrow(new RuntimeException()).when(failLogger).warn(any(Throwable.class));",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).warn(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "50": {
              "code": "doThrow(new RuntimeException()).when(failLogger).info(any(Throwable.class));",
              "line": 50,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).info(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "doThrow(new RuntimeException()).when(failLogger).debug(any(Throwable.class));",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).debug(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "doThrow(new RuntimeException()).when(failLogger).trace(any(Throwable.class));",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doThrow(java.lang.RuntimeException).when(null).trace(java.lang.Throwable)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFailSafeForLoggingMethod",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 7,
      "sequenceCount": 8,
      "sharedStatementLineCount": 1,
      "locReduced": 7,
      "sharedStatements": [
        "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\StatusTelnetHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "30": "Channel channel = Mockito.mock(Channel.class);",
            "31": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));",
            "40": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345?status=load,memory\"));",
            "41": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"\"));"
          },
          "abstractedStatement": {
            "31": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "40": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "30": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 30,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "31": {
              "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));",
              "line": 31,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "40": {
              "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345?status=load,memory\"));",
              "line": 40,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "41": {
              "code": "Assertions.assertNotNull(statusTelnetHandler.telnet(channel, \"\"));",
              "line": 41,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\TelnetHandlerAdapterTest.java",
          "testMethodName": "testTelnet",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "37": "Channel channel = Mockito.mock(Channel.class);",
            "41": "Mockito.when(channel.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "41": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "37": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 37,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "41": {
              "code": "Mockito.when(channel.getUrl()).thenReturn(url);",
              "line": 41,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java",
          "testMethodName": "testCheckPayloadDefault8M",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "Channel channel = mock(Channel.class);",
            "42": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
            "56": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();"
          },
          "abstractedStatement": {
            "42": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "41": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 41,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckPayloadDefault8M",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "42": {
              "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
              "line": 42,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckPayloadDefault8M",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
              "line": 56,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckPayloadDefault8M",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java",
          "testMethodName": "testCheckProviderPayload",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "61": "Channel channel = mock(Channel.class);",
            "62": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
            "84": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();"
          },
          "abstractedStatement": {
            "62": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "61": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 61,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckProviderPayload",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1\"));",
              "line": 62,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckProviderPayload",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "84": {
              "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
              "line": 84,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckProviderPayload",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java",
          "testMethodName": "tesCheckPayloadMinusPayloadNoLimit",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "89": "Channel channel = mock(Channel.class);",
            "90": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1?payload=-1\"));",
            "94": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();"
          },
          "abstractedStatement": {
            "90": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "89": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 89,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "tesCheckPayloadMinusPayloadNoLimit",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "90": {
              "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://1.1.1.1?payload=-1\"));",
              "line": 90,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "tesCheckPayloadMinusPayloadNoLimit",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "94": {
              "code": "verify(channel, VerificationModeFactory.atLeastOnce()).getUrl();",
              "line": 94,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "tesCheckPayloadMinusPayloadNoLimit",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\AbstractCodecTest.java",
          "testMethodName": "testIsClientSide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "101": "Channel channel = mock(Channel.class);",
            "102": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.13\", 9103));",
            "103": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
            "104": "assertThat(codec.isClientSide(channel), is(true));",
            "107": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.14\", 9103));",
            "108": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
            "109": "assertThat(codec.isClientSide(channel), is(false));"
          },
          "abstractedStatement": {
            "102": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
            "103": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "107": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
            "108": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "101": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 101,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.13\", 9103));",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "assertThat(codec.isClientSide(channel), is(true));",
              "line": 104,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "107": {
              "code": "given(channel.getRemoteAddress()).willReturn(new InetSocketAddress(\"172.24.157.14\", 9103));",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getRemoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "given(channel.getUrl()).willReturn(URL.valueOf(\"dubbo://172.24.157.13:9103\"));",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "assertThat(codec.isClientSide(channel), is(false));",
              "line": 109,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsClientSide",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeChannelTest.java",
          "testMethodName": "requestTest02",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "150": "Channel channel = Mockito.mock(MockChannel.class);",
            "152": "when(channel.getUrl()).thenReturn(url);",
            "156": "verify(channel, times(1)).send(argumentCaptor.capture());"
          },
          "abstractedStatement": {
            "152": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "150": {
              "code": "Channel channel = Mockito.mock(MockChannel.class);",
              "line": 150,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "requestTest02",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "when(channel.getUrl()).thenReturn(url);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "requestTest02",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "verify(channel, times(1)).send(argumentCaptor.capture());",
              "line": 156,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "requestTest02",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\telnet\\support\\HelpTelnetHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "31": "Channel channel = Mockito.mock(Channel.class);",
            "32": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));"
          },
          "abstractedStatement": {
            "32": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "31": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 31,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "32": {
              "code": "Mockito.when(channel.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1:12345\"));",
              "line": 32,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "consumerURL2",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "190": "URL consumerURL2 = Mockito.mock(URL.class);",
            "191": "Mockito.when(consumerURL2.getServiceKey()).thenReturn(\"Test2\");",
            "192": "Mockito.when(consumerURL2.getParameter(\"timestamp\")).thenReturn(\"2\");"
          },
          "abstractedStatement": {
            "191": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "192": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "190": {
              "code": "URL consumerURL2 = Mockito.mock(URL.class);",
              "line": 190,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "191": {
              "code": "Mockito.when(consumerURL2.getServiceKey()).thenReturn(\"Test2\");",
              "line": 191,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "192": {
              "code": "Mockito.when(consumerURL2.getParameter(\"timestamp\")).thenReturn(\"2\");",
              "line": 192,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "99": "URL consumerURL = Mockito.mock(URL.class);",
            "100": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
            "101": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");"
          },
          "abstractedStatement": {
            "100": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "101": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "99": {
              "code": "URL consumerURL = Mockito.mock(URL.class);",
              "line": 99,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "100": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
              "line": 100,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "101": {
              "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithInitAndNoLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "145": "URL consumerURL = Mockito.mock(URL.class);",
            "146": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
            "147": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");"
          },
          "abstractedStatement": {
            "146": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "147": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "145": {
              "code": "URL consumerURL = Mockito.mock(URL.class);",
              "line": 145,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "146": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
              "line": 146,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "147": {
              "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
              "line": 147,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "consumerURL",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "186": "URL consumerURL = Mockito.mock(URL.class);",
            "187": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
            "188": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");"
          },
          "abstractedStatement": {
            "187": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
            "188": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "186": {
              "code": "URL consumerURL = Mockito.mock(URL.class);",
              "line": 186,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "187": {
              "code": "Mockito.when(consumerURL.getServiceKey()).thenReturn(\"Test\");",
              "line": 187,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "188": {
              "code": "Mockito.when(consumerURL.getParameter(\"timestamp\")).thenReturn(\"1\");",
              "line": 188,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 7,
      "sequenceCount": 7,
      "sharedStatementLineCount": 1,
      "locReduced": 6,
      "sharedStatements": [
        "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
      ],
      "sequences": [
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "423": "ConfigManager configManager = mock(ConfigManager.class);",
            "424": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "424": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "423": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 423,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "424": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 424,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "288": "ConfigManager configManager = mock(ConfigManager.class);",
            "289": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "289": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "288": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 288,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "289": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 289,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "151": "ConfigManager configManager = mock(ConfigManager.class);",
            "152": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "152": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "151": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 151,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "152": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 152,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "489": "ConfigManager configManager = mock(ConfigManager.class);",
            "490": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "490": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "489": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 489,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "490": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 490,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "357": "ConfigManager configManager = mock(ConfigManager.class);",
            "358": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "358": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "357": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 357,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "358": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 358,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "83": "ConfigManager configManager = mock(ConfigManager.class);",
            "84": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "84": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "83": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 83,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "84": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 84,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "configManager",
          "variableType": "ConfigManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "222": "ConfigManager configManager = mock(ConfigManager.class);",
            "223": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);"
          },
          "abstractedStatement": {
            "223": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "222": {
              "code": "ConfigManager configManager = mock(ConfigManager.class);",
              "line": 222,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "223": {
              "code": "when(configManager.getApplicationOrElseThrow()).thenReturn(applicationConfig);",
              "line": 223,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.context.ConfigManager.getApplicationOrElseThrow()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 7,
      "sequenceCount": 7,
      "sharedStatementLineCount": 1,
      "locReduced": 6,
      "sharedStatements": [
        "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "426": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "427": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "427": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "426": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 426,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "427": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 427,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "291": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "292": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "292": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "291": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 291,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "292": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 292,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "154": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "155": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "155": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "154": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 154,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "155": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 155,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "492": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "493": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "493": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "492": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 492,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "493": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 493,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "360": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "361": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "361": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "360": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 360,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "361": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 361,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "86": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "87": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "87": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "86": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 86,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "compositeConfiguration",
          "variableType": "CompositeConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "225": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
            "226": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);"
          },
          "abstractedStatement": {
            "226": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "225": {
              "code": "CompositeConfiguration compositeConfiguration = mock(CompositeConfiguration.class);",
              "line": 225,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "226": {
              "code": "when(compositeConfiguration.convert(Boolean.class, ENABLE_CONFIGURATION_LISTEN, true)).thenReturn(true);",
              "line": 226,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.config.CompositeConfiguration.convert(java.lang.Class<java.lang.Boolean>, java.lang.String, boolean)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 7,
      "sequenceCount": 7,
      "sharedStatementLineCount": 1,
      "locReduced": 6,
      "sharedStatements": [
        "when(null.getInterface()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java",
          "testMethodName": "testRpcException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "58": "Invoker<DemoService> invoker = mock(Invoker.class);",
            "59": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "60": "given(invoker.invoke(eq(invocation))).willThrow(exception);"
          },
          "abstractedStatement": {
            "59": "when(null.getInterface()).thenReturn(null)",
            "60": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
              "line": 58,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRpcException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "59": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRpcException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "60": {
              "code": "given(invoker.invoke(eq(invocation))).willThrow(exception);",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenThrow(org.apache.dubbo.rpc.RpcException)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRpcException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java",
          "testMethodName": "testJavaException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "92": "Invoker<DemoService> invoker = mock(Invoker.class);",
            "93": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
            "94": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "93": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "94": "when(null.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "92": {
              "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
              "line": 92,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testJavaException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "93": {
              "code": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
              "line": 93,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testJavaException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "94": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 94,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testJavaException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockInvoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\filter\\TraceFilterTest.java",
          "testMethodName": "testInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "96": "Invoker<DemoService> mockInvoker = mock(Invoker.class);",
            "101": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
            "104": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);"
          },
          "abstractedStatement": {
            "101": "when(null.getInterface()).thenReturn(null)",
            "104": "when(null.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)"
          },
          "rawStatementInfo": {
            "96": {
              "code": "Invoker<DemoService> mockInvoker = mock(Invoker.class);",
              "line": 96,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "101": {
              "code": "given(mockInvoker.getInterface()).willReturn(DemoService.class);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "given(mockInvoker.invoke(mockInvocation)).willReturn(mockResult);",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.Invocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java",
          "testMethodName": "testRuntimeException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "112": "Invoker<DemoService> invoker = mock(Invoker.class);",
            "113": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
            "114": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "113": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "114": "when(null.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "112": {
              "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
              "line": 112,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRuntimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "113": {
              "code": "when(invoker.invoke(invocation)).thenReturn(appResponse);",
              "line": 113,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRuntimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "114": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRuntimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ExceptionFilterTest.java",
          "testMethodName": "testConvertToRunTimeException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "133": "Invoker<DemoService> invoker = mock(Invoker.class);",
            "134": "when(invoker.invoke(invocation)).thenReturn(mockAsyncResult);",
            "135": "when(invoker.getInterface()).thenReturn(DemoService.class);"
          },
          "abstractedStatement": {
            "134": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
            "135": "when(null.getInterface()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "133": {
              "code": "Invoker<DemoService> invoker = mock(Invoker.class);",
              "line": 133,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConvertToRunTimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "134": {
              "code": "when(invoker.invoke(invocation)).thenReturn(mockAsyncResult);",
              "line": 134,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.Result)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConvertToRunTimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "135": {
              "code": "when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 135,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConvertToRunTimeException",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "48": "Invoker<DemoService> invoker = Mockito.mock(Invoker.class);",
            "49": "Mockito.when(invoker.getInterface()).thenReturn(DemoService.class);",
            "50": "Mockito.when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "49": "when(null.getInterface()).thenReturn(null)",
            "50": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "Invoker<DemoService> invoker = Mockito.mock(Invoker.class);",
              "line": 48,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "Mockito.when(invoker.getInterface()).thenReturn(DemoService.class);",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "50": {
              "code": "Mockito.when(invoker.getUrl()).thenReturn(url);",
              "line": 50,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-dubbo\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\dubbo\\FutureFilterTest.java",
          "testMethodName": "testSyncCallback",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "55": "@SuppressWarnings(\"unchecked\")\r\nInvoker<DemoService> invoker = mock(Invoker.class);",
            "57": "given(invoker.isAvailable()).willReturn(true);",
            "58": "given(invoker.getInterface()).willReturn(DemoService.class);",
            "61": "given(invoker.invoke(invocation)).willReturn(result);",
            "63": "given(invoker.getUrl()).willReturn(url);"
          },
          "abstractedStatement": {
            "57": "when(null.isAvailable()).thenReturn(boolean)",
            "58": "when(null.getInterface()).thenReturn(null)",
            "61": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
            "63": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "55": {
              "code": "@SuppressWarnings(\"unchecked\")\r\nInvoker<DemoService> invoker = mock(Invoker.class);",
              "line": 55,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSyncCallback",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "given(invoker.isAvailable()).willReturn(true);",
              "line": 57,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.isAvailable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSyncCallback",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "given(invoker.getInterface()).willReturn(DemoService.class);",
              "line": 58,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getInterface()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSyncCallback",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "given(invoker.invoke(invocation)).willReturn(result);",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.invoke(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(org.apache.dubbo.rpc.AppResponse)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSyncCallback",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "63": {
              "code": "given(invoker.getUrl()).willReturn(url);",
              "line": 63,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSyncCallback",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 2,
      "locReduced": 6,
      "sharedStatements": [
        "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
        "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "addr",
          "variableType": "InetAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "73": "InetAddress addr = mock(InetAddress.class);",
            "74": "when(addr.isLoopbackAddress()).thenReturn(false);",
            "75": "when(addr.getHostAddress()).thenReturn(\"179.23.44.1\");"
          },
          "abstractedStatement": {
            "74": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
            "75": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "73": {
              "code": "InetAddress addr = mock(InetAddress.class);",
              "line": 73,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "when(addr.getHostAddress()).thenReturn(\"179.23.44.1\");",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "addr",
          "variableType": "InetAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "100": "InetAddress addr = mock(InetAddress.class);",
            "101": "when(addr.isLoopbackAddress()).thenReturn(false);",
            "102": "when(addr.getHostAddress()).thenReturn(\"175.23.44.1\");"
          },
          "abstractedStatement": {
            "101": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
            "102": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "100": {
              "code": "InetAddress addr = mock(InetAddress.class);",
              "line": 100,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "101": {
              "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
              "line": 101,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "when(addr.getHostAddress()).thenReturn(\"175.23.44.1\");",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "address",
          "variableType": "InetAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\NetUtilsTest.java",
          "testMethodName": "testIsValidAddress",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "117": "InetAddress address = mock(InetAddress.class);",
            "118": "when(address.isLoopbackAddress()).thenReturn(true);",
            "119": "assertFalse(NetUtils.isValidV4Address(address));",
            "120": "address = mock(InetAddress.class);",
            "121": "when(address.getHostAddress()).thenReturn(\"localhost\");",
            "122": "assertFalse(NetUtils.isValidV4Address(address));",
            "123": "address = mock(InetAddress.class);",
            "124": "when(address.getHostAddress()).thenReturn(\"0.0.0.0\");",
            "125": "assertFalse(NetUtils.isValidV4Address(address));",
            "126": "address = mock(InetAddress.class);",
            "127": "when(address.getHostAddress()).thenReturn(\"127.0.0.1\");",
            "128": "assertFalse(NetUtils.isValidV4Address(address));",
            "129": "address = mock(InetAddress.class);",
            "130": "when(address.getHostAddress()).thenReturn(\"1.2.3.4\");",
            "131": "assertTrue(NetUtils.isValidV4Address(address));"
          },
          "abstractedStatement": {
            "118": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
            "121": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
            "124": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
            "127": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
            "130": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "117": {
              "code": "InetAddress address = mock(InetAddress.class);",
              "line": 117,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "118": {
              "code": "when(address.isLoopbackAddress()).thenReturn(true);",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "119": {
              "code": "assertFalse(NetUtils.isValidV4Address(address));",
              "line": 119,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "120": {
              "code": "address = mock(InetAddress.class);",
              "line": 120,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "121": {
              "code": "when(address.getHostAddress()).thenReturn(\"localhost\");",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "122": {
              "code": "assertFalse(NetUtils.isValidV4Address(address));",
              "line": 122,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "123": {
              "code": "address = mock(InetAddress.class);",
              "line": 123,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "124": {
              "code": "when(address.getHostAddress()).thenReturn(\"0.0.0.0\");",
              "line": 124,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "125": {
              "code": "assertFalse(NetUtils.isValidV4Address(address));",
              "line": 125,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "126": {
              "code": "address = mock(InetAddress.class);",
              "line": 126,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "when(address.getHostAddress()).thenReturn(\"127.0.0.1\");",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "assertFalse(NetUtils.isValidV4Address(address));",
              "line": 128,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "address = mock(InetAddress.class);",
              "line": 129,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "130": {
              "code": "when(address.getHostAddress()).thenReturn(\"1.2.3.4\");",
              "line": 130,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "131": {
              "code": "assertTrue(NetUtils.isValidV4Address(address));",
              "line": 131,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsValidAddress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "addr",
          "variableType": "InetAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "119": "InetAddress addr = mock(InetAddress.class);",
            "120": "when(addr.isLoopbackAddress()).thenReturn(false);",
            "121": "when(addr.getHostAddress()).thenReturn(\"192.168.1.199\");"
          },
          "abstractedStatement": {
            "120": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
            "121": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "119": {
              "code": "InetAddress addr = mock(InetAddress.class);",
              "line": 119,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "120": {
              "code": "when(addr.isLoopbackAddress()).thenReturn(false);",
              "line": 120,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.isLoopbackAddress()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "121": {
              "code": "when(addr.getHostAddress()).thenReturn(\"192.168.1.199\");",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.net.InetAddress.getHostAddress()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 2,
      "locReduced": 6,
      "sharedStatements": [
        "when(null.method()).thenReturn(null)",
        "when(null.uri()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "message",
          "variableType": "HttpRequest",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "84": "HttpRequest message = Mockito.mock(HttpRequest.class);",
            "85": "when(message.uri()).thenReturn(\"localhost:80/test\");",
            "86": "when(message.method()).thenReturn(HttpMethod.GET);"
          },
          "abstractedStatement": {
            "85": "when(null.uri()).thenReturn(java.lang.String)",
            "86": "when(null.method()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "84": {
              "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
              "line": 84,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "85": {
              "code": "when(message.uri()).thenReturn(\"localhost:80/test\");",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "when(message.method()).thenReturn(HttpMethod.GET);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.method()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "request",
          "variableType": "HttpRequest",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\decoder\\HttpCommandDecoderTest.java",
          "testMethodName": "decodeGet",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "HttpRequest request = mock(HttpRequest.class);",
            "42": "when(request.uri()).thenReturn(\"localhost:80/test\");",
            "43": "when(request.method()).thenReturn(HttpMethod.GET);",
            "47": "when(request.uri()).thenReturn(\"localhost:80/test?a=b&c=d\");"
          },
          "abstractedStatement": {
            "42": "when(null.uri()).thenReturn(java.lang.String)",
            "43": "when(null.method()).thenReturn(null)",
            "47": "when(null.uri()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "41": {
              "code": "HttpRequest request = mock(HttpRequest.class);",
              "line": 41,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "decodeGet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "42": {
              "code": "when(request.uri()).thenReturn(\"localhost:80/test\");",
              "line": 42,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodeGet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "43": {
              "code": "when(request.method()).thenReturn(HttpMethod.GET);",
              "line": 43,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.method()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodeGet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(request.uri()).thenReturn(\"localhost:80/test?a=b&c=d\");",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodeGet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "request",
          "variableType": "FullHttpRequest",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\decoder\\HttpCommandDecoderTest.java",
          "testMethodName": "decodePost",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "54": "FullHttpRequest request = mock(FullHttpRequest.class);",
            "55": "when(request.uri()).thenReturn(\"localhost:80/test\");",
            "56": "when(request.method()).thenReturn(HttpMethod.POST);",
            "57": "when(request.headers()).thenReturn(HttpHeaders.EMPTY_HEADERS);",
            "59": "when(request.content()).thenReturn(buf);"
          },
          "abstractedStatement": {
            "55": "when(null.uri()).thenReturn(java.lang.String)",
            "56": "when(null.method()).thenReturn(null)",
            "57": "when(null.headers()).thenReturn(null)",
            "59": "when(null.content()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "54": {
              "code": "FullHttpRequest request = mock(FullHttpRequest.class);",
              "line": 54,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "decodePost",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "when(request.uri()).thenReturn(\"localhost:80/test\");",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodePost",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "when(request.method()).thenReturn(HttpMethod.POST);",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.method()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodePost",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "when(request.headers()).thenReturn(HttpHeaders.EMPTY_HEADERS);",
              "line": 57,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.headers()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodePost",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "when(request.content()).thenReturn(buf);",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.content()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "decodePost",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "message",
          "variableType": "HttpRequest",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "63": "HttpRequest message = Mockito.mock(HttpRequest.class);",
            "64": "when(message.uri()).thenReturn(\"localhost:80/greeting\");",
            "65": "when(message.method()).thenReturn(HttpMethod.GET);"
          },
          "abstractedStatement": {
            "64": "when(null.uri()).thenReturn(java.lang.String)",
            "65": "when(null.method()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "HttpRequest message = Mockito.mock(HttpRequest.class);",
              "line": 63,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "64": {
              "code": "when(message.uri()).thenReturn(\"localhost:80/greeting\");",
              "line": 64,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.uri()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "when(message.method()).thenReturn(HttpMethod.GET);",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.method()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "48": "URL url = Mockito.mock(URL.class);",
            "50": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");"
          },
          "abstractedStatement": {
            "50": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 48,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "50": {
              "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
              "line": 50,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "32": "URL url = Mockito.mock(URL.class);",
            "33": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
            "34": "Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i -> i.getArgument(1));",
            "35": "Mockito.when(url.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());"
          },
          "abstractedStatement": {
            "33": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "34": "when(org.apache.dubbo.common.URL.getParameter(T, java.lang.String)).thenAnswer(null)",
            "35": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)"
          },
          "rawStatementInfo": {
            "32": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 32,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "33": {
              "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"test\");",
              "line": 33,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "34": {
              "code": "Mockito.when(url.getParameter(Mockito.any(), (String) Mockito.any())).thenAnswer(i -> i.getArgument(1));",
              "line": 34,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(T, java.lang.String)).thenAnswer(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "35": {
              "code": "Mockito.when(url.getOrDefaultApplicationModel()).thenReturn(ApplicationModel.defaultModel());",
              "line": 35,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getOrDefaultApplicationModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\model\\MigrationRuleTest.java",
          "testMethodName": "test_parse",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "77": "URL url = Mockito.mock(URL.class);",
            "81": "Mockito.when(url.getScopeModel()).thenReturn(defaultModel);",
            "82": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"DemoService:1.0.0\");",
            "83": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
            "85": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
            "96": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.0\");",
            "97": "assertEquals(1.0f, migrationRule.getThreshold(url));",
            "103": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.1\");",
            "104": "Mockito.when(url.getServiceInterface()).thenReturn(\"GreetingService\");"
          },
          "abstractedStatement": {
            "81": "when(org.apache.dubbo.common.URL.getScopeModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
            "82": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "83": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
            "85": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
            "96": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "103": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
            "104": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "77": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 77,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "81": {
              "code": "Mockito.when(url.getScopeModel()).thenReturn(defaultModel);",
              "line": 81,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getScopeModel()).thenReturn(org.apache.dubbo.rpc.model.ApplicationModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "82": {
              "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"DemoService:1.0.0\");",
              "line": 82,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "83": {
              "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
              "line": 83,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "85": {
              "code": "Mockito.when(url.getParameter(ArgumentMatchers.eq(REGISTRY_CLUSTER_TYPE_KEY), anyString())).thenReturn(\"default\");",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getParameter(java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "96": {
              "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.0\");",
              "line": 96,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "97": {
              "code": "assertEquals(1.0f, migrationRule.getThreshold(url));",
              "line": 97,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "Mockito.when(url.getDisplayServiceKey()).thenReturn(\"GreetingService:1.0.1\");",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getDisplayServiceKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "Mockito.when(url.getServiceInterface()).thenReturn(\"GreetingService\");",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceInterface()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test_parse",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 6,
      "sequenceCount": 6,
      "sharedStatementLineCount": 1,
      "locReduced": 5,
      "sharedStatements": [
        "when(null.channel()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "97": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "99": "when(context.channel()).thenReturn(channel);",
            "110": "handler.handlerAdded(context);",
            "111": "verify(context, never()).writeAndFlush(any());"
          },
          "abstractedStatement": {
            "99": "when(null.channel()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "97": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 97,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "99": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 99,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "handler.handlerAdded(context);",
              "line": 110,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "111": {
              "code": "verify(context, never()).writeAndFlush(any());",
              "line": 111,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "ctx",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);",
            "46": "Mockito.when(ctx.channel()).thenReturn(channel);"
          },
          "abstractedStatement": {
            "46": "when(null.channel()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);",
              "line": 44,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
              "line": 46,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "116": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "118": "when(context.channel()).thenReturn(channel);",
            "129": "handler.handlerAdded(context);",
            "130": "verify(context, never()).writeAndFlush(any());"
          },
          "abstractedStatement": {
            "118": "when(null.channel()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "116": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 116,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "118": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "handler.handlerAdded(context);",
              "line": 129,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "130": {
              "code": "verify(context, never()).writeAndFlush(any());",
              "line": 130,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "136": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "138": "when(context.channel()).thenReturn(channel);",
            "140": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);"
          },
          "abstractedStatement": {
            "138": "when(null.channel()).thenReturn(null)",
            "140": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "136": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 136,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "138": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 138,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "140": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 140,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "47": "when(context.channel()).thenReturn(channel);",
            "53": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
            "61": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {
            "47": "when(null.channel()).thenReturn(null)",
            "53": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 45,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 61,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "70": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "72": "when(context.channel()).thenReturn(channel);",
            "79": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
            "88": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {
            "72": "when(null.channel()).thenReturn(null)",
            "79": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "70": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 70,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.channel()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(ByteBuf.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 88,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 6,
      "sequenceCount": 6,
      "sharedStatementLineCount": 1,
      "locReduced": 5,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
      ],
      "sequences": [
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "308": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "330": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);"
          },
          "abstractedStatement": {
            "330": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "308": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 308,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "330": {
              "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
              "line": 330,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "172": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "193": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);"
          },
          "abstractedStatement": {
            "193": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "172": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 172,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "193": {
              "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
              "line": 193,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "510": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "525": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);"
          },
          "abstractedStatement": {
            "525": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "510": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 510,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "525": {
              "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
              "line": 525,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "58": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "61": "when(registryFactory.getRegistry(url)).thenReturn(registry);"
          },
          "abstractedStatement": {
            "61": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "58": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 58,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "when(registryFactory.getRegistry(url)).thenReturn(registry);",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "104": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "125": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);"
          },
          "abstractedStatement": {
            "125": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "104": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 104,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "125": {
              "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
              "line": 125,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryFactory",
          "variableType": "RegistryFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "241": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
            "263": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);"
          },
          "abstractedStatement": {
            "263": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)"
          },
          "rawStatementInfo": {
            "241": {
              "code": "RegistryFactory registryFactory = mock(RegistryFactory.class);",
              "line": 241,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "263": {
              "code": "when(registryFactory.getRegistry(registryProtocol.getRegistryUrl(url))).thenReturn(registry);",
              "line": 263,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.RegistryFactory.getRegistry(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.registry.Registry)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 5,
      "sequenceCount": 5,
      "sharedStatementLineCount": 1,
      "locReduced": 4,
      "sharedStatements": [
        "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
      ],
      "sequences": [
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "98": "Channel channel = mock(Channel.class);",
            "99": "when(context.channel()).thenReturn(channel);",
            "104": "when(channel.remoteAddress()).thenReturn(address);"
          },
          "abstractedStatement": {
            "104": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
          },
          "rawStatementInfo": {
            "98": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 98,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "99": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 99,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "when(channel.remoteAddress()).thenReturn(address);",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "117": "Channel channel = mock(Channel.class);",
            "118": "when(context.channel()).thenReturn(channel);",
            "123": "when(channel.remoteAddress()).thenReturn(address);"
          },
          "abstractedStatement": {
            "123": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
          },
          "rawStatementInfo": {
            "117": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 117,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "118": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 118,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "123": {
              "code": "when(channel.remoteAddress()).thenReturn(address);",
              "line": 123,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndMatchWhiteListRange",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\permission\\DefaultAnonymousAccessPermissionCheckerTest.java",
          "testMethodName": "testPermission",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "39": "Channel channel = Mockito.mock(Channel.class);",
            "40": "Mockito.when(channel.remoteAddress()).thenReturn(socketAddress);"
          },
          "abstractedStatement": {
            "40": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
          },
          "rawStatementInfo": {
            "39": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 39,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPermission",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "40": {
              "code": "Mockito.when(channel.remoteAddress()).thenReturn(socketAddress);",
              "line": 40,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPermission",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "46": "Channel channel = mock(Channel.class);",
            "47": "when(context.channel()).thenReturn(channel);",
            "51": "when(channel.remoteAddress()).thenReturn(address);"
          },
          "abstractedStatement": {
            "51": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
          },
          "rawStatementInfo": {
            "46": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 46,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 47,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "when(channel.remoteAddress()).thenReturn(address);",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "71": "Channel channel = mock(Channel.class);",
            "72": "when(context.channel()).thenReturn(channel);",
            "77": "when(channel.remoteAddress()).thenReturn(address);"
          },
          "abstractedStatement": {
            "77": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)"
          },
          "rawStatementInfo": {
            "71": {
              "code": "Channel channel = mock(Channel.class);",
              "line": 71,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "when(context.channel()).thenReturn(channel);",
              "line": 72,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "when(channel.remoteAddress()).thenReturn(address);",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.remoteAddress()).thenReturn(java.net.InetSocketAddress)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 2,
      "locReduced": 4,
      "sharedStatements": [
        "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
        "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)"
      ],
      "sequences": [
        {
          "variableName": "executor",
          "variableType": "EagerThreadPoolExecutor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java",
          "testMethodName": "testOffer2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "43": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
            "44": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
            "45": "Mockito.when(executor.getActiveCount()).thenReturn(1);",
            "46": "queue.setExecutor(executor);"
          },
          "abstractedStatement": {
            "44": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
            "45": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
              "line": 43,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "44": {
              "code": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
              "line": 44,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "Mockito.when(executor.getActiveCount()).thenReturn(1);",
              "line": 45,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "queue.setExecutor(executor);",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testOffer2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "executor",
          "variableType": "EagerThreadPoolExecutor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java",
          "testMethodName": "testOffer3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "53": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
            "54": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
            "55": "Mockito.when(executor.getActiveCount()).thenReturn(2);",
            "56": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
            "57": "queue.setExecutor(executor);"
          },
          "abstractedStatement": {
            "54": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
            "55": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
            "56": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)"
          },
          "rawStatementInfo": {
            "53": {
              "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
              "line": 53,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.when(executor.getPoolSize()).thenReturn(2);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "Mockito.when(executor.getActiveCount()).thenReturn(2);",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "queue.setExecutor(executor);",
              "line": 57,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testOffer3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "executor",
          "variableType": "EagerThreadPoolExecutor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\threadpool\\support\\eager\\TaskQueueTest.java",
          "testMethodName": "testOffer4",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "64": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
            "65": "Mockito.when(executor.getPoolSize()).thenReturn(4);",
            "66": "Mockito.when(executor.getActiveCount()).thenReturn(4);",
            "67": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
            "68": "queue.setExecutor(executor);"
          },
          "abstractedStatement": {
            "65": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
            "66": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
            "67": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "EagerThreadPoolExecutor executor = mock(EagerThreadPoolExecutor.class);",
              "line": 64,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer4",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "Mockito.when(executor.getPoolSize()).thenReturn(4);",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getPoolSize()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer4",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "Mockito.when(executor.getActiveCount()).thenReturn(4);",
              "line": 66,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getActiveCount()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer4",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "67": {
              "code": "Mockito.when(executor.getMaximumPoolSize()).thenReturn(4);",
              "line": 67,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor.getMaximumPoolSize()).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOffer4",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "68": {
              "code": "queue.setExecutor(executor);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testOffer4",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 2,
      "locReduced": 4,
      "sharedStatements": [
        "when(null.addListener(T)).thenReturn(null)",
        "when(null.cause()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "future",
          "variableType": "ChannelPromise",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java",
          "testMethodName": "testSend",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "84": "ChannelPromise future = Mockito.mock(ChannelPromise.class);",
            "85": "Mockito.when(future.await(1000)).thenReturn(true);",
            "86": "Mockito.when(future.cause()).thenReturn(null);",
            "87": "Mockito.when(channel.writeAndFlush(Mockito.any())).thenReturn(future);",
            "88": "Mockito.when(channel.newPromise()).thenReturn(future);",
            "89": "Mockito.when(future.addListener(Mockito.any())).thenReturn(future);",
            "95": "Mockito.when(future.cause()).thenReturn(exception);",
            "103": "Mockito.when(future.await(1000)).thenReturn(false);",
            "104": "Mockito.when(future.cause()).thenReturn(null);"
          },
          "abstractedStatement": {
            "85": "when(null.await(int)).thenReturn(boolean)",
            "86": "when(null.cause()).thenReturn(null)",
            "89": "when(null.addListener(T)).thenReturn(null)",
            "95": "when(null.cause()).thenReturn(java.lang.Exception)",
            "103": "when(null.await(int)).thenReturn(boolean)",
            "104": "when(null.cause()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "84": {
              "code": "ChannelPromise future = Mockito.mock(ChannelPromise.class);",
              "line": 84,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "85": {
              "code": "Mockito.when(future.await(1000)).thenReturn(true);",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "Mockito.when(future.cause()).thenReturn(null);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.cause()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "Mockito.when(channel.writeAndFlush(Mockito.any())).thenReturn(future);",
              "line": 87,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "Mockito.when(channel.newPromise()).thenReturn(future);",
              "line": 88,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "89": {
              "code": "Mockito.when(future.addListener(Mockito.any())).thenReturn(future);",
              "line": 89,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "95": {
              "code": "Mockito.when(future.cause()).thenReturn(exception);",
              "line": 95,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.cause()).thenReturn(java.lang.Exception)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "Mockito.when(future.await(1000)).thenReturn(false);",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "Mockito.when(future.cause()).thenReturn(null);",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.cause()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channelPromise",
          "variableType": "ChannelPromise",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyChannelTest.java",
          "testMethodName": "testSend",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "112": "ChannelPromise channelPromise = Mockito.mock(ChannelPromise.class);",
            "113": "Mockito.when(channel.newPromise()).thenReturn(channelPromise);",
            "114": "Mockito.when(channelPromise.await(1000)).thenReturn(true);",
            "115": "Mockito.when(channelPromise.cause()).thenReturn(null);",
            "116": "Mockito.when(channelPromise.addListener(Mockito.any())).thenReturn(channelPromise);",
            "120": "Mockito.verify(channelPromise, Mockito.times(1)).addListener(listenerArgumentCaptor.capture());"
          },
          "abstractedStatement": {
            "114": "when(null.await(int)).thenReturn(boolean)",
            "115": "when(null.cause()).thenReturn(null)",
            "116": "when(null.addListener(T)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "112": {
              "code": "ChannelPromise channelPromise = Mockito.mock(ChannelPromise.class);",
              "line": 112,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "113": {
              "code": "Mockito.when(channel.newPromise()).thenReturn(channelPromise);",
              "line": 113,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "Mockito.when(channelPromise.await(1000)).thenReturn(true);",
              "line": 114,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.await(int)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "115": {
              "code": "Mockito.when(channelPromise.cause()).thenReturn(null);",
              "line": 115,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.cause()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "116": {
              "code": "Mockito.when(channelPromise.addListener(Mockito.any())).thenReturn(channelPromise);",
              "line": 116,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "120": {
              "code": "Mockito.verify(channelPromise, Mockito.times(1)).addListener(listenerArgumentCaptor.capture());",
              "line": 120,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSend",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelPromise",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "51": "ChannelPromise future = mock(ChannelPromise.class);",
            "52": "when(channel.writeAndFlush(any())).thenReturn(future);",
            "53": "when(future.cause()).thenReturn(null);",
            "54": "when(channel.newPromise()).thenReturn(future);",
            "55": "when(future.addListener(Mockito.any())).thenReturn(future);"
          },
          "abstractedStatement": {
            "53": "when(null.cause()).thenReturn(null)",
            "55": "when(null.addListener(T)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "51": {
              "code": "ChannelPromise future = mock(ChannelPromise.class);",
              "line": 51,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "when(channel.writeAndFlush(any())).thenReturn(future);",
              "line": 52,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "when(future.cause()).thenReturn(null);",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.cause()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "when(channel.newPromise()).thenReturn(future);",
              "line": 54,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "when(future.addListener(Mockito.any())).thenReturn(future);",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.addListener(T)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 4,
      "locReduced": 4,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
        "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)"
      ],
      "sequences": [
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "testMethodName": "testInvokeWithIllegalRetriesParam",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "108": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
            "109": "given(dic.getUrl()).willReturn(url);",
            "110": "given(dic.getConsumerUrl()).willReturn(url);",
            "111": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "112": "given(dic.list(invocation)).willReturn(invokers);"
          },
          "abstractedStatement": {
            "109": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "110": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "111": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "112": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)"
          },
          "rawStatementInfo": {
            "108": {
              "code": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
              "line": 108,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "109": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 109,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "110": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 110,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "111": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 111,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "112": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 112,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalRetriesParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dic",
          "variableType": "Directory<FailbackClusterInvokerTest>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\support\\FailbackClusterInvokerTest.java",
          "testMethodName": "testInvokeWithIllegalFailbacktasksParam",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "124": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
            "125": "given(dic.getUrl()).willReturn(url);",
            "126": "given(dic.getConsumerUrl()).willReturn(url);",
            "127": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
            "128": "given(dic.list(invocation)).willReturn(invokers);"
          },
          "abstractedStatement": {
            "125": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "126": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
            "127": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
            "128": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)"
          },
          "rawStatementInfo": {
            "124": {
              "code": "Directory<FailbackClusterInvokerTest> dic = mock(Directory.class);",
              "line": 124,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "125": {
              "code": "given(dic.getUrl()).willReturn(url);",
              "line": 125,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "126": {
              "code": "given(dic.getConsumerUrl()).willReturn(url);",
              "line": 126,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getConsumerUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "given(dic.getInterface()).willReturn(FailbackClusterInvokerTest.class);",
              "line": 127,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.getInterface()).thenReturn(java.lang.Class<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "given(dic.list(invocation)).willReturn(invokers);",
              "line": 128,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>.list(org.apache.dubbo.rpc.RpcInvocation)).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.support.FailbackClusterInvokerTest>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokeWithIllegalFailbacktasksParam",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)"
      ],
      "sequences": [
        {
          "variableName": "log",
          "variableType": "Log",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
          "testMethodName": "testCheckNoError",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "Log log = mock(Log.class);",
            "46": "DubboAppender.logList.add(log);",
            "47": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
            "49": "when(log.getLogLevel()).thenReturn(Level.INFO);"
          },
          "abstractedStatement": {
            "47": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
            "49": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Log log = mock(Log.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckNoError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "DubboAppender.logList.add(log);",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testCheckNoError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckNoError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "when(log.getLogLevel()).thenReturn(Level.INFO);",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckNoError",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "log",
          "variableType": "Log",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
          "testMethodName": "testFindLevel",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "63": "Log log = mock(Log.class);",
            "64": "DubboAppender.logList.add(log);",
            "65": "when(log.getLogLevel()).thenReturn(Level.ERROR);"
          },
          "abstractedStatement": {
            "65": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)"
          },
          "rawStatementInfo": {
            "63": {
              "code": "Log log = mock(Log.class);",
              "line": 63,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevel",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "64": {
              "code": "DubboAppender.logList.add(log);",
              "line": 64,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testFindLevel",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevel",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "log",
          "variableType": "Log",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
          "testMethodName": "testFindLevelWithThreadName",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "72": "Log log = mock(Log.class);",
            "73": "DubboAppender.logList.add(log);",
            "74": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
            "75": "when(log.getLogThread()).thenReturn(\"thread-1\");",
            "76": "log = mock(Log.class);",
            "77": "DubboAppender.logList.add(log);",
            "78": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
            "79": "when(log.getLogThread()).thenReturn(\"thread-2\");"
          },
          "abstractedStatement": {
            "74": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
            "75": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
            "78": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
            "79": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "72": {
              "code": "Log log = mock(Log.class);",
              "line": 72,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "73": {
              "code": "DubboAppender.logList.add(log);",
              "line": 73,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
              "line": 74,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "when(log.getLogThread()).thenReturn(\"thread-1\");",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "log = mock(Log.class);",
              "line": 76,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "DubboAppender.logList.add(log);",
              "line": 77,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
              "line": 78,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(log.getLogThread()).thenReturn(\"thread-2\");",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogThread()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindLevelWithThreadName",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "log",
          "variableType": "Log",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogUtilTest.java",
          "testMethodName": "testFindMessage2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "101": "Log log = mock(Log.class);",
            "102": "DubboAppender.logList.add(log);",
            "103": "when(log.getLogMessage()).thenReturn(\"message\");",
            "104": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
            "105": "log = mock(Log.class);",
            "106": "DubboAppender.logList.add(log);",
            "107": "when(log.getLogMessage()).thenReturn(\"message\");",
            "108": "when(log.getLogLevel()).thenReturn(Level.INFO);"
          },
          "abstractedStatement": {
            "103": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
            "104": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
            "107": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
            "108": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)"
          },
          "rawStatementInfo": {
            "101": {
              "code": "Log log = mock(Log.class);",
              "line": 101,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "DubboAppender.logList.add(log);",
              "line": 102,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "when(log.getLogMessage()).thenReturn(\"message\");",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "104": {
              "code": "when(log.getLogLevel()).thenReturn(Level.ERROR);",
              "line": 104,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "105": {
              "code": "log = mock(Log.class);",
              "line": 105,
              "type": "ASSIGNMENT_MOCK",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "106": {
              "code": "DubboAppender.logList.add(log);",
              "line": 106,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "107": {
              "code": "when(log.getLogMessage()).thenReturn(\"message\");",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogMessage()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "108": {
              "code": "when(log.getLogLevel()).thenReturn(Level.INFO);",
              "line": 108,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.utils.Log.getLogLevel()).thenReturn(org.apache.log4j.Level)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testFindMessage2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "commandContext1",
          "variableType": "CommandContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeCheckStatusTest.java",
          "testMethodName": "testNotify",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "36": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
            "37": "Mockito.when(commandContext1.isHttp()).thenReturn(false);"
          },
          "abstractedStatement": {
            "37": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "36": {
              "code": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
              "line": 36,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNotify",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "37": {
              "code": "Mockito.when(commandContext1.isHttp()).thenReturn(false);",
              "line": 37,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNotify",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "commandContext2",
          "variableType": "CommandContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeCheckStatusTest.java",
          "testMethodName": "testNotify",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "38": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
            "39": "Mockito.when(commandContext2.isHttp()).thenReturn(true);"
          },
          "abstractedStatement": {
            "39": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
              "line": 38,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNotify",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "39": {
              "code": "Mockito.when(commandContext2.isHttp()).thenReturn(true);",
              "line": 39,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testNotify",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "commandContext1",
          "variableType": "CommandContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeWarnedClassesTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "36": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
            "37": "Mockito.when(commandContext1.isHttp()).thenReturn(false);"
          },
          "abstractedStatement": {
            "37": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "36": {
              "code": "CommandContext commandContext1 = Mockito.mock(CommandContext.class);",
              "line": 36,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "37": {
              "code": "Mockito.when(commandContext1.isHttp()).thenReturn(false);",
              "line": 37,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "commandContext2",
          "variableType": "CommandContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\command\\impl\\SerializeWarnedClassesTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "38": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
            "39": "Mockito.when(commandContext2.isHttp()).thenReturn(true);"
          },
          "abstractedStatement": {
            "39": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "38": {
              "code": "CommandContext commandContext2 = Mockito.mock(CommandContext.class);",
              "line": 38,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "39": {
              "code": "Mockito.when(commandContext2.isHttp()).thenReturn(true);",
              "line": 39,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.qos.api.CommandContext.isHttp()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
      ],
      "sequences": [
        {
          "variableName": "directory",
          "variableType": "DynamicDirectory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "241": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
            "259": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);"
          },
          "abstractedStatement": {
            "259": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "241": {
              "code": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
              "line": 241,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "259": {
              "code": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "serviceDiscoveryDirectory",
          "variableType": "DynamicDirectory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "242": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
            "260": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);"
          },
          "abstractedStatement": {
            "260": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "242": {
              "code": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
              "line": 242,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "260": {
              "code": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);",
              "line": 260,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "directory",
          "variableType": "DynamicDirectory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "65": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
            "83": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);"
          },
          "abstractedStatement": {
            "83": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "DynamicDirectory directory = Mockito.mock(DynamicDirectory.class);",
              "line": 65,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "83": {
              "code": "Mockito.when(directory.getAllInvokers()).thenReturn(invokers);",
              "line": 83,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "serviceDiscoveryDirectory",
          "variableType": "DynamicDirectory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "66": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
            "84": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);",
            "196": "Mockito.verify(serviceDiscoveryDirectory, Mockito.atLeastOnce()).setInvokersChangedListener(argument.capture());"
          },
          "abstractedStatement": {
            "84": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "66": {
              "code": "DynamicDirectory serviceDiscoveryDirectory = Mockito.mock(DynamicDirectory.class);",
              "line": 66,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "84": {
              "code": "Mockito.when(serviceDiscoveryDirectory.getAllInvokers()).thenReturn(serviceDiscoveryInvokers);",
              "line": 84,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.DynamicDirectory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "196": {
              "code": "Mockito.verify(serviceDiscoveryDirectory, Mockito.atLeastOnce()).setInvokersChangedListener(argument.capture());",
              "line": 196,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
      ],
      "sequences": [
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "113": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "114": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "119": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "119": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "113": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 113,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "114": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 114,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "119": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 119,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "463": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "464": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "469": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "469": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "463": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 463,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "464": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 464,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "469": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 469,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "181": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "182": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "187": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "187": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "181": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 181,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "182": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 182,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "187": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 187,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "396": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "397": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "402": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "402": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "396": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 396,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "397": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 397,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "402": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 402,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
      ],
      "sequences": [
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader<RegistryProtocolListener>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "401": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
            "402": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "404": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);"
          },
          "abstractedStatement": {
            "404": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "401": {
              "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 401,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "402": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 402,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "404": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 404,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader<RegistryProtocolListener>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "118": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
            "119": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "121": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);"
          },
          "abstractedStatement": {
            "121": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "118": {
              "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 118,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "119": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 119,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "121": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 121,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader<RegistryProtocolListener>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "468": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
            "469": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "471": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);"
          },
          "abstractedStatement": {
            "471": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "468": {
              "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 468,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "469": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 469,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "471": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 471,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader<RegistryProtocolListener>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "186": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
            "187": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "189": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);"
          },
          "abstractedStatement": {
            "189": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)"
          },
          "rawStatementInfo": {
            "186": {
              "code": "ExtensionLoader<RegistryProtocolListener> extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 186,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "187": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 187,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 189,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader<org.apache.dubbo.registry.integration.RegistryProtocolListener>.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 1,
      "locReduced": 3,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "protocolWithoutListener",
          "variableType": "Protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java",
          "testMethodName": "testLoadingListenerForRemoteReference",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "97": "Protocol protocolWithoutListener = mock(Protocol.class);",
            "98": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);"
          },
          "abstractedStatement": {
            "98": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "97": {
              "code": "Protocol protocolWithoutListener = mock(Protocol.class);",
              "line": 97,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForRemoteReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "98": {
              "code": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);",
              "line": 98,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForRemoteReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java",
          "testMethodName": "testLoadingListenerForRemoteReference",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "121": "Protocol protocol = mock(Protocol.class);",
            "122": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);"
          },
          "abstractedStatement": {
            "122": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "121": {
              "code": "Protocol protocol = mock(Protocol.class);",
              "line": 121,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForRemoteReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "122": {
              "code": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);",
              "line": 122,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForRemoteReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocolWithoutListener",
          "variableType": "Protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java",
          "testMethodName": "testLoadingListenerForLocalReference",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "50": "Protocol protocolWithoutListener = mock(Protocol.class);",
            "51": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);"
          },
          "abstractedStatement": {
            "51": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "Protocol protocolWithoutListener = mock(Protocol.class);",
              "line": 50,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForLocalReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "when(protocolWithoutListener.refer(DemoService.class, urlWithoutListener)).thenReturn(invokerWithoutListener);",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForLocalReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\ProtocolListenerWrapperTest.java",
          "testMethodName": "testLoadingListenerForLocalReference",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "74": "Protocol protocol = mock(Protocol.class);",
            "75": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);"
          },
          "abstractedStatement": {
            "75": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "74": {
              "code": "Protocol protocol = mock(Protocol.class);",
              "line": 74,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForLocalReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "when(protocol.refer(DemoService.class, urlWithListener)).thenReturn(invokerWithListener);",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Protocol.refer(DemoService.class, org.apache.dubbo.common.URL)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLoadingListenerForLocalReference",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 3,
      "locReduced": 3,
      "sharedStatements": [
        "when(null.eventLoop()).thenReturn(null)",
        "when(null.isActive()).thenReturn(boolean)",
        "when(null.newPromise()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "Channel channel = Mockito.mock(Channel.class);",
            "46": "Mockito.when(ctx.channel()).thenReturn(channel);",
            "47": "Mockito.when(channel.isActive()).thenReturn(true);",
            "48": "Mockito.when(channel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
            "49": "Mockito.when(channel.alloc()).thenReturn(PooledByteBufAllocator.DEFAULT);",
            "52": "when(channel.writeAndFlush(any())).thenReturn(future);",
            "54": "when(channel.newPromise()).thenReturn(future);",
            "81": "Mockito.verify(channel, Mockito.times(1)).writeAndFlush(requestArgumentCaptor.capture());"
          },
          "abstractedStatement": {
            "47": "when(null.isActive()).thenReturn(boolean)",
            "48": "when(null.eventLoop()).thenReturn(null)",
            "49": "when(null.alloc()).thenReturn(null)",
            "52": "when(null.writeAndFlush(T)).thenReturn(null)",
            "54": "when(null.newPromise()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 45,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.when(ctx.channel()).thenReturn(channel);",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "Mockito.when(channel.isActive()).thenReturn(true);",
              "line": 47,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "Mockito.when(channel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.eventLoop()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "Mockito.when(channel.alloc()).thenReturn(PooledByteBufAllocator.DEFAULT);",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.alloc()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "when(channel.writeAndFlush(any())).thenReturn(future);",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(T)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "when(channel.newPromise()).thenReturn(future);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.newPromise()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "81": {
              "code": "Mockito.verify(channel, Mockito.times(1)).writeAndFlush(requestArgumentCaptor.capture());",
              "line": 81,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "http2StreamChannel",
          "variableType": "Http2StreamChannel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\stream\\TripleClientStreamTest.java",
          "testMethodName": "progress",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "75": "Http2StreamChannel http2StreamChannel = mock(Http2StreamChannel.class);",
            "76": "when(http2StreamChannel.isActive()).thenReturn(true);",
            "77": "when(http2StreamChannel.newSucceededFuture()).thenReturn(channel.newSucceededFuture());",
            "78": "when(http2StreamChannel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
            "79": "when(http2StreamChannel.newPromise()).thenReturn(channel.newPromise());",
            "80": "when(http2StreamChannel.parent()).thenReturn(channel);"
          },
          "abstractedStatement": {
            "76": "when(null.isActive()).thenReturn(boolean)",
            "77": "when(null.newSucceededFuture()).thenReturn(null)",
            "78": "when(null.eventLoop()).thenReturn(null)",
            "79": "when(null.newPromise()).thenReturn(null)",
            "80": "when(null.parent()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "75": {
              "code": "Http2StreamChannel http2StreamChannel = mock(Http2StreamChannel.class);",
              "line": 75,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "when(http2StreamChannel.isActive()).thenReturn(true);",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.isActive()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "when(http2StreamChannel.newSucceededFuture()).thenReturn(channel.newSucceededFuture());",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.newSucceededFuture()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "when(http2StreamChannel.eventLoop()).thenReturn(new NioEventLoopGroup().next());",
              "line": 78,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.eventLoop()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(http2StreamChannel.newPromise()).thenReturn(channel.newPromise());",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.newPromise()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "when(http2StreamChannel.parent()).thenReturn(channel);",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.parent()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "progress",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "// Data preparation\r\nInvoker<DemoService> invoker1 = Mockito.mock(Invoker.class);",
            "44": "Mockito.when(invoker1.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));"
          },
          "abstractedStatement": {
            "44": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "41": {
              "code": "// Data preparation\r\nInvoker<DemoService> invoker1 = Mockito.mock(Invoker.class);",
              "line": 41,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "44": {
              "code": "Mockito.when(invoker1.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));",
              "line": 44,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "42": "Invoker<DemoService> invoker2 = Mockito.mock(Invoker.class);",
            "45": "Mockito.when(invoker2.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));"
          },
          "abstractedStatement": {
            "45": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "42": {
              "code": "Invoker<DemoService> invoker2 = Mockito.mock(Invoker.class);",
              "line": 42,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "Mockito.when(invoker2.getUrl()).thenReturn(URL.valueOf(\"mock://127.0.0.1/test\"));",
              "line": 45,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker<DemoService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mock\\MockInvokersSelectorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "43": "Invoker<DemoService> invoker3 = Mockito.mock(Invoker.class);",
            "46": "Mockito.when(invoker3.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1/test\"));"
          },
          "abstractedStatement": {
            "46": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "Invoker<DemoService> invoker3 = Mockito.mock(Invoker.class);",
              "line": 43,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.when(invoker3.getUrl()).thenReturn(URL.valueOf(\"dubbo://127.0.0.1/test\"));",
              "line": 46,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelectorTest.DemoService>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)"
      ],
      "sequences": [
        {
          "variableName": "mockMonitorFactory",
          "variableType": "MonitorFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testSafeFailForMonitorCollectFail",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "202": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
            "206": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
            "207": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);"
          },
          "abstractedStatement": {
            "207": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)"
          },
          "rawStatementInfo": {
            "202": {
              "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
              "line": 202,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSafeFailForMonitorCollectFail",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "206": {
              "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
              "line": 206,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSafeFailForMonitorCollectFail",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "207": {
              "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
              "line": 207,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSafeFailForMonitorCollectFail",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockMonitorFactory",
          "variableType": "MonitorFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testOnResponseWithoutStartTime",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "217": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
            "219": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
            "220": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);"
          },
          "abstractedStatement": {
            "220": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)"
          },
          "rawStatementInfo": {
            "217": {
              "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
              "line": 217,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnResponseWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "219": {
              "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
              "line": 219,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testOnResponseWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "220": {
              "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
              "line": 220,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnResponseWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockMonitorFactory",
          "variableType": "MonitorFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testOnErrorWithoutStartTime",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "233": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
            "235": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
            "236": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);"
          },
          "abstractedStatement": {
            "236": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)"
          },
          "rawStatementInfo": {
            "233": {
              "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
              "line": 233,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnErrorWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "235": {
              "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
              "line": 235,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testOnErrorWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "236": {
              "code": "given(mockMonitorFactory.getMonitor(any(URL.class))).willReturn(mockMonitor);",
              "line": 236,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.monitor.MonitorFactory.getMonitor(org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.monitor.Monitor)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnErrorWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "81": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "83": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "95": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {
            "83": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "81": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 81,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "83": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 83,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "95": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 95,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test1",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "43": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "45": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "53": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {
            "45": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "43": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 43,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 45,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 53,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "60": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "62": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "74": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {
            "62": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)"
          },
          "rawStatementInfo": {
            "60": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 60,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 62,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.writeAndFlush(any(FullHttpResponse.class))).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 74,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()"
      ],
      "sequences": [
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceHostPortCustomizerTest.java",
          "testMethodName": "customizePreferredProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "60": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
            "61": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
            "66": "// when(applicationModel.getCurrentConfig()).thenReturn(applicationConfig);\r\ndoReturn(applicationConfig).when(applicationModel).getCurrentConfig();"
          },
          "abstractedStatement": {
            "61": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
            "66": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()"
          },
          "rawStatementInfo": {
            "60": {
              "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
              "line": 60,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "customizePreferredProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "customizePreferredProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "// when(applicationModel.getCurrentConfig()).thenReturn(applicationConfig);\r\ndoReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
              "line": 66,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "customizePreferredProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceMetadataCustomizerTest.java",
          "testMethodName": "testCustomizeWithIncludeFilters",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
            "54": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();"
          },
          "abstractedStatement": {
            "54": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()"
          },
          "rawStatementInfo": {
            "52": {
              "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
              "line": 52,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustomizeWithIncludeFilters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustomizeWithIncludeFilters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\ServiceInstanceMetadataCustomizerTest.java",
          "testMethodName": "testCustomizeWithExcludeFilters",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "75": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
            "77": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();"
          },
          "abstractedStatement": {
            "77": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()"
          },
          "rawStatementInfo": {
            "75": {
              "code": "ApplicationModel applicationModel = spy(ApplicationModel.defaultModel());",
              "line": 75,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustomizeWithExcludeFilters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "doReturn(applicationConfig).when(applicationModel).getCurrentConfig();",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doReturn(org.apache.dubbo.config.ApplicationConfig).when(null).getCurrentConfig()",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustomizeWithExcludeFilters",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)"
      ],
      "sequences": [
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "249": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "250": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "255": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "259": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "255": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
            "259": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)"
          },
          "rawStatementInfo": {
            "249": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 249,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "250": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 250,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "255": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 255,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 259,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "316": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "317": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "322": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "326": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "322": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
            "326": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)"
          },
          "rawStatementInfo": {
            "316": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 316,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "317": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 317,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "322": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 322,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.integration.RegistryProtocolListener>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "326": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 326,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "moduleModel",
          "variableType": "ModuleModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "513": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
            "514": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
            "519": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);"
          },
          "abstractedStatement": {
            "519": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)"
          },
          "rawStatementInfo": {
            "513": {
              "code": "ModuleModel moduleModel = Mockito.spy(ApplicationModel.defaultModel().getDefaultModule());",
              "line": 513,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "514": {
              "code": "moduleModel.getApplicationModel().getApplicationConfigManager().setApplication(new ApplicationConfig(\"application1\"));",
              "line": 514,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "519": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 519,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ModuleModel.getExtensionLoader(java.lang.Class<org.apache.dubbo.registry.RegistryFactory>)).thenReturn(org.apache.dubbo.common.extension.ExtensionLoader)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)"
      ],
      "sequences": [
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "254": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
            "255": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "257": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
            "259": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
            "260": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);"
          },
          "abstractedStatement": {
            "257": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
            "260": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)"
          },
          "rawStatementInfo": {
            "254": {
              "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 254,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "255": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 255,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 257,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 259,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "260": {
              "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
              "line": 260,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "321": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
            "322": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
            "324": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
            "326": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
            "327": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);"
          },
          "abstractedStatement": {
            "324": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
            "327": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)"
          },
          "rawStatementInfo": {
            "321": {
              "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 321,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "322": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryProtocolListener.class)).thenReturn(extensionLoaderMock);",
              "line": 322,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "324": {
              "code": "Mockito.when(extensionLoaderMock.getActivateExtension(url, REGISTRY_PROTOCOL_LISTENER_KEY)).thenReturn(registryProtocolListeners);",
              "line": 324,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getActivateExtension(org.apache.dubbo.common.URL, java.lang.String)).thenReturn(java.util.List<org.apache.dubbo.registry.integration.RegistryProtocolListener>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "326": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 326,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "327": {
              "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
              "line": 327,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "extensionLoaderMock",
          "variableType": "ExtensionLoader",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "518": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
            "519": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
            "520": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);"
          },
          "abstractedStatement": {
            "520": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)"
          },
          "rawStatementInfo": {
            "518": {
              "code": "ExtensionLoader extensionLoaderMock = mock(ExtensionLoader.class);",
              "line": 518,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "519": {
              "code": "Mockito.when(moduleModel.getExtensionLoader(RegistryFactory.class)).thenReturn(extensionLoaderMock);",
              "line": 519,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "520": {
              "code": "Mockito.when(extensionLoaderMock.getAdaptiveExtension()).thenReturn(registryFactory);",
              "line": 520,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.extension.ExtensionLoader.getAdaptiveExtension()).thenReturn(org.apache.dubbo.registry.RegistryFactory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "connectionManager",
          "variableType": "NacosConnectionManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
            "42": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);"
          },
          "abstractedStatement": {
            "42": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "40": {
              "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
              "line": 40,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "42": {
              "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
              "line": 42,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "connectionManager",
          "variableType": "NacosConnectionManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testSubscribeMultiManager",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "65": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
            "72": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService1);",
            "76": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService2);"
          },
          "abstractedStatement": {
            "72": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
            "76": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "65": {
              "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
              "line": 65,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService1);",
              "line": 72,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService2);",
              "line": 76,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "connectionManager",
          "variableType": "NacosConnectionManager",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testConcurrency",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "558": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
            "563": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);"
          },
          "abstractedStatement": {
            "563": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "558": {
              "code": "NacosConnectionManager connectionManager = Mockito.mock(NacosConnectionManager.class);",
              "line": 558,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConcurrency",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "563": {
              "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
              "line": 563,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.nacos.NacosConnectionManager.getNamingService()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConcurrency",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 1,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
      ],
      "sequences": [
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubProxyFactoryTest.java",
          "testMethodName": "getProxy",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "37": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
            "39": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "39": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "37": {
              "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
              "line": 37,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getProxy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "39": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 39,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getProxy",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "46": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
            "53": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "53": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "46": {
              "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
              "line": 46,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "42": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
            "48": "when(invoker.getUrl()).thenReturn(url);"
          },
          "abstractedStatement": {
            "48": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)"
          },
          "rawStatementInfo": {
            "42": {
              "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
              "line": 42,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invoker<?>.getUrl()).thenReturn(org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 2,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)",
        "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "helper",
          "variableType": "AccessKeyAuthenticator",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testSignForRequest",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
            "53": "doCallRealMethod().when(helper).sign(invocation, url);",
            "54": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
            "59": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);"
          },
          "abstractedStatement": {
            "53": "doCallRealMethod().when(null).sign(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
            "54": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
            "59": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
              "line": 52,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "doCallRealMethod().when(helper).sign(invocation, url);",
              "line": 53,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doCallRealMethod().when(null).sign(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
              "line": 59,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "helper",
          "variableType": "AccessKeyAuthenticator",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testAuthenticateRequest",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "79": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
            "80": "doCallRealMethod().when(helper).authenticate(invocation, url);",
            "81": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
            "86": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);"
          },
          "abstractedStatement": {
            "80": "doCallRealMethod().when(null).authenticate(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
            "81": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
            "86": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)"
          },
          "rawStatementInfo": {
            "79": {
              "code": "AccessKeyAuthenticator helper = mock(AccessKeyAuthenticator.class);",
              "line": 79,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "doCallRealMethod().when(helper).authenticate(invocation, url);",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "doCallRealMethod().when(null).authenticate(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "81": {
              "code": "when(helper.getSignature(eq(url), eq(invocation), eq(\"sk\"), anyString())).thenReturn(\"dubbo\");",
              "line": 81,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getSignature(org.apache.dubbo.common.URL, org.apache.dubbo.rpc.Invocation, java.lang.String, java.lang.String)).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.AccessKeyAuthenticator.getAccessKeyPair(org.apache.dubbo.rpc.Invocation, org.apache.dubbo.common.URL)).thenReturn(org.apache.dubbo.auth.model.AccessKeyPair)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 2,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
        "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
      ],
      "sequences": [
        {
          "variableName": "newDirectory",
          "variableType": "Directory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "Directory newDirectory = Mockito.mock(Directory.class);",
            "57": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
            "77": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(newInvokerList);"
          },
          "abstractedStatement": {
            "57": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
            "77": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Directory newDirectory = Mockito.mock(Directory.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "57": {
              "code": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
              "line": 57,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "77": {
              "code": "Mockito.when(newDirectory.getAllInvokers()).thenReturn(newInvokerList);",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "oldDirectory",
          "variableType": "Directory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\DefaultMigrationAddressComparatorTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "46": "Directory oldDirectory = Mockito.mock(Directory.class);",
            "65": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
            "82": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(oldInvokerList);"
          },
          "abstractedStatement": {
            "65": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
            "82": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)"
          },
          "rawStatementInfo": {
            "46": {
              "code": "Directory oldDirectory = Mockito.mock(Directory.class);",
              "line": 46,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "65": {
              "code": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(Collections.emptyList());",
              "line": 65,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<T>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "82": {
              "code": "Mockito.when(oldDirectory.getAllInvokers()).thenReturn(oldInvokerList);",
              "line": 82,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.Directory.getAllInvokers()).thenReturn(java.util.List<org.apache.dubbo.rpc.Invoker<?>>)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 2,
      "locReduced": 2,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
        "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)"
      ],
      "sequences": [
        {
          "variableName": "registryProtocol",
          "variableType": "RegistryProtocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "60": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
            "86": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
            "88": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);"
          },
          "abstractedStatement": {
            "86": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "88": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)"
          },
          "rawStatementInfo": {
            "60": {
              "code": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
              "line": 60,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "86": {
              "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "88": {
              "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
              "line": 88,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registryProtocol",
          "variableType": "RegistryProtocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "236": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
            "262": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
            "264": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);"
          },
          "abstractedStatement": {
            "262": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "264": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)"
          },
          "rawStatementInfo": {
            "236": {
              "code": "RegistryProtocol registryProtocol = Mockito.mock(RegistryProtocol.class);",
              "line": 236,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "262": {
              "code": "Mockito.when(registryProtocol.getInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(invoker);",
              "line": 262,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "264": {
              "code": "Mockito.when(registryProtocol.getServiceDiscoveryInvoker(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any())).thenReturn(serviceDiscoveryInvoker);",
              "line": 264,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.integration.RegistryProtocol.getServiceDiscoveryInvoker(T, T, T, T)).thenReturn(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)"
      ],
      "sequences": [
        {
          "variableName": "meshEnvListenerFactory1",
          "variableType": "MeshEnvListenerFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "testMethodName": "testRegister3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "199": "MeshEnvListenerFactory meshEnvListenerFactory1 = Mockito.mock(MeshEnvListenerFactory.class);",
            "203": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);"
          },
          "abstractedStatement": {
            "203": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)"
          },
          "rawStatementInfo": {
            "199": {
              "code": "MeshEnvListenerFactory meshEnvListenerFactory1 = Mockito.mock(MeshEnvListenerFactory.class);",
              "line": 199,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "203": {
              "code": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);",
              "line": 203,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "meshEnvListenerFactory2",
          "variableType": "MeshEnvListenerFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "testMethodName": "testRegister3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "200": "MeshEnvListenerFactory meshEnvListenerFactory2 = Mockito.mock(MeshEnvListenerFactory.class);",
            "205": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);"
          },
          "abstractedStatement": {
            "205": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)"
          },
          "rawStatementInfo": {
            "200": {
              "code": "MeshEnvListenerFactory meshEnvListenerFactory2 = Mockito.mock(MeshEnvListenerFactory.class);",
              "line": 200,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "205": {
              "code": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);",
              "line": 205,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListenerFactory.getListener()).thenReturn(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "meshEnvListener1",
          "variableType": "MeshEnvListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "testMethodName": "testRegister3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "202": "MeshEnvListener meshEnvListener1 = Mockito.mock(MeshEnvListener.class);",
            "203": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);",
            "227": "when(meshEnvListener1.isEnable()).thenReturn(false);"
          },
          "abstractedStatement": {
            "227": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "202": {
              "code": "MeshEnvListener meshEnvListener1 = Mockito.mock(MeshEnvListener.class);",
              "line": 202,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "203": {
              "code": "when(meshEnvListenerFactory1.getListener()).thenReturn(meshEnvListener1);",
              "line": 203,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "227": {
              "code": "when(meshEnvListener1.isEnable()).thenReturn(false);",
              "line": 227,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "meshEnvListener2",
          "variableType": "MeshEnvListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshRuleManagerTest.java",
          "testMethodName": "testRegister3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "204": "MeshEnvListener meshEnvListener2 = Mockito.mock(MeshEnvListener.class);",
            "205": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);",
            "228": "when(meshEnvListener2.isEnable()).thenReturn(true);",
            "238": "verify(meshEnvListener2, times(1)).onSubscribe(\"dubbo-demo\", meshAppRuleListener);",
            "271": "verify(meshEnvListener2, times(1)).onUnSubscribe(\"dubbo-demo\");"
          },
          "abstractedStatement": {
            "228": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "204": {
              "code": "MeshEnvListener meshEnvListener2 = Mockito.mock(MeshEnvListener.class);",
              "line": 204,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "205": {
              "code": "when(meshEnvListenerFactory2.getListener()).thenReturn(meshEnvListener2);",
              "line": 205,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "228": {
              "code": "when(meshEnvListener2.isEnable()).thenReturn(true);",
              "line": 228,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.cluster.router.mesh.route.MeshEnvListener.isEnable()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "238": {
              "code": "verify(meshEnvListener2, times(1)).onSubscribe(\"dubbo-demo\", meshAppRuleListener);",
              "line": 238,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "271": {
              "code": "verify(meshEnvListener2, times(1)).onUnSubscribe(\"dubbo-demo\");",
              "line": 271,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegister3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\ClassLoaderFilterTest.java",
          "testMethodName": "testInvoke",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "66": "Invocation invocation = Mockito.mock(Invocation.class);",
            "69": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);"
          },
          "abstractedStatement": {
            "69": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)"
          },
          "rawStatementInfo": {
            "66": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 66,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "69": {
              "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
              "line": 69,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvoke",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\RouterSnapshotFilterTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "Invocation invocation = Mockito.mock(Invocation.class);",
            "48": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);"
          },
          "abstractedStatement": {
            "48": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)"
          },
          "rawStatementInfo": {
            "45": {
              "code": "Invocation invocation = Mockito.mock(Invocation.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "Mockito.when(invocation.getServiceModel()).thenReturn(serviceModel);",
              "line": 48,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)"
      ],
      "sequences": [
        {
          "variableName": "executor",
          "variableType": "ExecutorService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java",
          "testMethodName": "testGracefulShutdown1",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "50": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
            "51": "when(executor.isTerminated()).thenReturn(false, true);",
            "52": "when(executor.awaitTermination(20, TimeUnit.MILLISECONDS)).thenReturn(false);",
            "53": "ExecutorUtil.gracefulShutdown(executor, 20);",
            "54": "verify(executor).shutdown();",
            "55": "verify(executor).shutdownNow();"
          },
          "abstractedStatement": {
            "51": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)",
            "52": "when(java.util.concurrent.ExecutorService.awaitTermination(int, java.util.concurrent.TimeUnit)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
              "line": 50,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "when(executor.isTerminated()).thenReturn(false, true);",
              "line": 51,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "when(executor.awaitTermination(20, TimeUnit.MILLISECONDS)).thenReturn(false);",
              "line": 52,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.util.concurrent.ExecutorService.awaitTermination(int, java.util.concurrent.TimeUnit)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "ExecutorUtil.gracefulShutdown(executor, 20);",
              "line": 53,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "verify(executor).shutdown();",
              "line": 54,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "verify(executor).shutdownNow();",
              "line": 55,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGracefulShutdown1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "executor",
          "variableType": "ExecutorService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\ExecutorUtilTest.java",
          "testMethodName": "testShutdownNow",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "74": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
            "75": "when(executor.isTerminated()).thenReturn(false, true);",
            "76": "ExecutorUtil.shutdownNow(executor, 20);",
            "77": "verify(executor).shutdownNow();",
            "78": "verify(executor).awaitTermination(20, TimeUnit.MILLISECONDS);"
          },
          "abstractedStatement": {
            "75": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)"
          },
          "rawStatementInfo": {
            "74": {
              "code": "ExecutorService executor = Mockito.mock(ExecutorService.class);",
              "line": 74,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testShutdownNow",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "when(executor.isTerminated()).thenReturn(false, true);",
              "line": 75,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.util.concurrent.ExecutorService.isTerminated()).thenReturn(boolean, boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testShutdownNow",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "ExecutorUtil.shutdownNow(executor, 20);",
              "line": 76,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testShutdownNow",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "verify(executor).shutdownNow();",
              "line": 77,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testShutdownNow",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "verify(executor).awaitTermination(20, TimeUnit.MILLISECONDS);",
              "line": 78,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testShutdownNow",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "logger",
          "variableType": "Logger",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\utils\\LogHelperTest.java",
          "testMethodName": "testDebug",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "Logger logger = Mockito.mock(Logger.class);",
            "45": "when(logger.isDebugEnabled()).thenReturn(true);",
            "46": "LogHelper.debug(logger, \"debug\");",
            "47": "verify(logger).debug(\"debug\");",
            "49": "LogHelper.debug(logger, t);",
            "50": "verify(logger).debug(t);",
            "51": "LogHelper.debug(logger, \"debug\", t);",
            "52": "verify(logger).debug(\"debug\", t);"
          },
          "abstractedStatement": {
            "45": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "Logger logger = Mockito.mock(Logger.class);",
              "line": 44,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "when(logger.isDebugEnabled()).thenReturn(true);",
              "line": 45,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "LogHelper.debug(logger, \"debug\");",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "verify(logger).debug(\"debug\");",
              "line": 47,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "LogHelper.debug(logger, t);",
              "line": 49,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "50": {
              "code": "verify(logger).debug(t);",
              "line": 50,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "LogHelper.debug(logger, \"debug\", t);",
              "line": 51,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "52": {
              "code": "verify(logger).debug(\"debug\", t);",
              "line": 52,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDebug",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "successLogger",
          "variableType": "Logger",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-http\\src\\test\\java\\org\\apache\\dubbo\\remoting\\http\\jetty\\JettyLoggerAdapterTest.java",
          "testMethodName": "testSuccessLogger",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "68": "Logger successLogger = mock(Logger.class);",
            "78": "when(successLogger.isDebugEnabled()).thenReturn(true);",
            "79": "when(successLogger.isWarnEnabled()).thenReturn(true);",
            "80": "when(successLogger.isInfoEnabled()).thenReturn(true);",
            "86": "verify(successLogger).warn(anyString());",
            "87": "verify(successLogger).info(anyString());",
            "88": "verify(successLogger).debug(anyString());"
          },
          "abstractedStatement": {
            "78": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)",
            "79": "when(org.apache.dubbo.common.logger.Logger.isWarnEnabled()).thenReturn(boolean)",
            "80": "when(org.apache.dubbo.common.logger.Logger.isInfoEnabled()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "68": {
              "code": "Logger successLogger = mock(Logger.class);",
              "line": 68,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "when(successLogger.isDebugEnabled()).thenReturn(true);",
              "line": 78,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isDebugEnabled()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(successLogger.isWarnEnabled()).thenReturn(true);",
              "line": 79,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isWarnEnabled()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "when(successLogger.isInfoEnabled()).thenReturn(true);",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.logger.Logger.isInfoEnabled()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "verify(successLogger).warn(anyString());",
              "line": 86,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "verify(successLogger).info(anyString());",
              "line": 87,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "verify(successLogger).debug(anyString());",
              "line": 88,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSuccessLogger",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)"
      ],
      "sequences": [
        {
          "variableName": "dataSource",
          "variableType": "DataSource",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "testMethodName": "testWithDatasourceHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "84": "DataSource dataSource = mock(DataSource.class);",
            "86": "given(dataSource.getConnection()).willReturn(connection);"
          },
          "abstractedStatement": {
            "86": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)"
          },
          "rawStatementInfo": {
            "84": {
              "code": "DataSource dataSource = mock(DataSource.class);",
              "line": 84,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(dataSource.getConnection()).willReturn(connection);",
              "line": 86,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "dataSource",
          "variableType": "DataSource",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "testMethodName": "testWithDatasourceNotHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "100": "DataSource dataSource = mock(DataSource.class);",
            "102": "given(dataSource.getConnection()).willReturn(connection);"
          },
          "abstractedStatement": {
            "102": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)"
          },
          "rawStatementInfo": {
            "100": {
              "code": "DataSource dataSource = mock(DataSource.class);",
              "line": 100,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "given(dataSource.getConnection()).willReturn(connection);",
              "line": 102,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(javax.sql.DataSource.getConnection()).thenReturn(java.sql.Connection)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(java.sql.ResultSet.next()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "connection",
          "variableType": "Connection",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "testMethodName": "testWithDatasourceHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "85": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
            "86": "given(dataSource.getConnection()).willReturn(connection);",
            "87": "given(connection.getMetaData().getTypeInfo().next()).willReturn(true);"
          },
          "abstractedStatement": {
            "87": "when(java.sql.ResultSet.next()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "85": {
              "code": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
              "line": 85,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "given(dataSource.getConnection()).willReturn(connection);",
              "line": 86,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "given(connection.getMetaData().getTypeInfo().next()).willReturn(true);",
              "line": 87,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.sql.ResultSet.next()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "connection",
          "variableType": "Connection",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\DataSourceStatusCheckerTest.java",
          "testMethodName": "testWithDatasourceNotHasNextResult",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "101": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
            "102": "given(dataSource.getConnection()).willReturn(connection);",
            "103": "given(connection.getMetaData().getTypeInfo().next()).willReturn(false);"
          },
          "abstractedStatement": {
            "103": "when(java.sql.ResultSet.next()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "101": {
              "code": "Connection connection = mock(Connection.class, Answers.RETURNS_DEEP_STUBS);",
              "line": 101,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "102": {
              "code": "given(dataSource.getConnection()).willReturn(connection);",
              "line": 102,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "103": {
              "code": "given(connection.getMetaData().getTypeInfo().next()).willReturn(false);",
              "line": 103,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(java.sql.ResultSet.next()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithDatasourceNotHasNextResult",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "applicationLifeCycle",
          "variableType": "ApplicationLifeCycle",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\SpringStatusCheckerTest.java",
          "testMethodName": "testWithLifeCycleRunning",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "59": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
            "60": "given(applicationLifeCycle.getConfigLocations()).willReturn(new String[] { \"test1\", \"test2\" });",
            "61": "given(applicationLifeCycle.isRunning()).willReturn(true);"
          },
          "abstractedStatement": {
            "60": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.getConfigLocations()).thenReturn(java.lang.String[])",
            "61": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "59": {
              "code": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
              "line": 59,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithLifeCycleRunning",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "given(applicationLifeCycle.getConfigLocations()).willReturn(new String[] { \"test1\", \"test2\" });",
              "line": 60,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.getConfigLocations()).thenReturn(java.lang.String[])",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithLifeCycleRunning",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "given(applicationLifeCycle.isRunning()).willReturn(true);",
              "line": 61,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithLifeCycleRunning",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationLifeCycle",
          "variableType": "ApplicationLifeCycle",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-spring\\src\\test\\java\\org\\apache\\dubbo\\config\\spring\\status\\SpringStatusCheckerTest.java",
          "testMethodName": "testWithoutLifeCycleRunning",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "72": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
            "73": "given(applicationLifeCycle.isRunning()).willReturn(false);"
          },
          "abstractedStatement": {
            "73": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "72": {
              "code": "ApplicationLifeCycle applicationLifeCycle = mock(ApplicationLifeCycle.class);",
              "line": 72,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithoutLifeCycleRunning",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "73": {
              "code": "given(applicationLifeCycle.isRunning()).willReturn(false);",
              "line": 73,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.spring.status.SpringStatusCheckerTest.ApplicationLifeCycle.isRunning()).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithoutLifeCycleRunning",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)"
      ],
      "sequences": [
        {
          "variableName": "mockedApplicationModel",
          "variableType": "ApplicationModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\metadata\\MetadataServiceNameMappingTest.java",
          "testMethodName": "testMap",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "77": "ApplicationModel mockedApplicationModel = spy(applicationModel);",
            "80": "Mockito.when(mockedApplicationModel.getApplicationConfigManager()).thenReturn(configManager);",
            "81": "Mockito.when(mockedApplicationModel.getCurrentConfig()).thenReturn(new ApplicationConfig(\"test\"));"
          },
          "abstractedStatement": {
            "80": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
            "81": "when(org.apache.dubbo.rpc.model.ApplicationModel.getCurrentConfig()).thenReturn(org.apache.dubbo.config.ApplicationConfig)"
          },
          "rawStatementInfo": {
            "77": {
              "code": "ApplicationModel mockedApplicationModel = spy(applicationModel);",
              "line": 77,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMap",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "80": {
              "code": "Mockito.when(mockedApplicationModel.getApplicationConfigManager()).thenReturn(configManager);",
              "line": 80,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMap",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "81": {
              "code": "Mockito.when(mockedApplicationModel.getCurrentConfig()).thenReturn(new ApplicationConfig(\"test\"));",
              "line": 81,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getCurrentConfig()).thenReturn(org.apache.dubbo.config.ApplicationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMap",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "applicationModel",
          "variableType": "ApplicationModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java",
          "testMethodName": "testQPS",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "208": "ApplicationModel applicationModel = mock(ApplicationModel.class);",
            "214": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
            "215": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);"
          },
          "abstractedStatement": {
            "214": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
            "215": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)"
          },
          "rawStatementInfo": {
            "208": {
              "code": "ApplicationModel applicationModel = mock(ApplicationModel.class);",
              "line": 208,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "214": {
              "code": "when(applicationModel.getApplicationConfigManager()).thenReturn(configManager);",
              "line": 214,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getApplicationConfigManager()).thenReturn(org.apache.dubbo.config.context.ConfigManager)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "215": {
              "code": "when(applicationModel.getBeanFactory()).thenReturn(beanFactory);",
              "line": 215,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ApplicationModel.getBeanFactory()).thenReturn(org.apache.dubbo.common.beans.factory.ScopeBeanFactory)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)"
      ],
      "sequences": [
        {
          "variableName": "metricsConfig",
          "variableType": "MetricsConfig",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-registry\\src\\test\\java\\org\\apache\\dubbo\\metrics\\registry\\metrics\\collector\\RegistryMetricsTest.java",
          "testMethodName": "getTestCollector",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "334": "MetricsConfig metricsConfig = spy(new MetricsConfig());",
            "339": "when(metricsConfig.getAggregation()).thenReturn(new AggregationConfig());"
          },
          "abstractedStatement": {
            "339": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)"
          },
          "rawStatementInfo": {
            "334": {
              "code": "MetricsConfig metricsConfig = spy(new MetricsConfig());",
              "line": 334,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            },
            "339": {
              "code": "when(metricsConfig.getAggregation()).thenReturn(new AggregationConfig());",
              "line": 339,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "getTestCollector",
                "methodAnnotations": []
              }
            }
          }
        },
        {
          "variableName": "metricsConfig",
          "variableType": "MetricsConfig",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-metrics\\dubbo-metrics-default\\src\\test\\java\\org\\apache\\dubbo\\metrics\\collector\\AggregateMetricsCollectorTest.java",
          "testMethodName": "testQPS",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "210": "MetricsConfig metricsConfig = mock(MetricsConfig.class);",
            "218": "when(configManager.getMetrics()).thenReturn(Optional.of(metricsConfig));",
            "219": "when(metricsConfig.getAggregation()).thenReturn(aggregationConfig);"
          },
          "abstractedStatement": {
            "219": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)"
          },
          "rawStatementInfo": {
            "210": {
              "code": "MetricsConfig metricsConfig = mock(MetricsConfig.class);",
              "line": 210,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "218": {
              "code": "when(configManager.getMetrics()).thenReturn(Optional.of(metricsConfig));",
              "line": 218,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "219": {
              "code": "when(metricsConfig.getAggregation()).thenReturn(aggregationConfig);",
              "line": 219,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.config.MetricsConfig.getAggregation()).thenReturn(org.apache.dubbo.config.nested.AggregationConfig)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testQPS",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)"
      ],
      "sequences": [
        {
          "variableName": "accessKeyPair",
          "variableType": "AccessKeyPair",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testSignForRequest",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "57": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
            "58": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
            "59": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);"
          },
          "abstractedStatement": {
            "58": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "57": {
              "code": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
              "line": 57,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
              "line": 58,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
              "line": 59,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSignForRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "accessKeyPair",
          "variableType": "AccessKeyPair",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testAuthenticateRequest",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "84": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
            "85": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
            "86": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);"
          },
          "abstractedStatement": {
            "85": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)"
          },
          "rawStatementInfo": {
            "84": {
              "code": "AccessKeyPair accessKeyPair = mock(AccessKeyPair.class);",
              "line": 84,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "85": {
              "code": "when(accessKeyPair.getSecretKey()).thenReturn(\"sk\");",
              "line": 85,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.auth.model.AccessKeyPair.getSecretKey()).thenReturn(java.lang.String)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "when(helper.getAccessKeyPair(invocation, url)).thenReturn(accessKeyPair);",
              "line": 86,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAuthenticateRequest",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailed",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "77": "Invocation invocation = mock(RpcInvocation.class);",
            "78": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);"
          },
          "abstractedStatement": {
            "78": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "77": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 77,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
              "line": 78,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthFailedWhenNoSignature",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "94": "Invocation invocation = mock(RpcInvocation.class);",
            "95": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);"
          },
          "abstractedStatement": {
            "95": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)"
          },
          "rawStatementInfo": {
            "94": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 94,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoSignature",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "95": {
              "code": "when(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY)).thenReturn(null);",
              "line": 95,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.Invocation.getAttachment(java.lang.String)).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthFailedWhenNoSignature",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(null.pipeline()).thenReturn(null)"
      ],
      "sequences": [
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java",
          "testMethodName": "testDecodeHttp",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
            "46": "Mockito.when(context.pipeline()).thenReturn(pipeline);"
          },
          "abstractedStatement": {
            "46": "when(null.pipeline()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
              "line": 44,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
              "line": 46,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.pipeline()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java",
          "testMethodName": "testDecodeTelnet",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "64": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
            "66": "Mockito.when(context.pipeline()).thenReturn(pipeline);"
          },
          "abstractedStatement": {
            "66": "when(null.pipeline()).thenReturn(null)"
          },
          "rawStatementInfo": {
            "64": {
              "code": "ChannelHandlerContext context = Mockito.mock(ChannelHandlerContext.class);",
              "line": 64,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
              "line": 66,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(null.pipeline()).thenReturn(null)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)"
      ],
      "sequences": [
        {
          "variableName": "migrationRule",
          "variableType": "MigrationRule",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "testDecide",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "282": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
            "283": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
            "284": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);"
          },
          "abstractedStatement": {
            "283": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)"
          },
          "rawStatementInfo": {
            "282": {
              "code": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
              "line": 282,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "283": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
              "line": 283,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "284": {
              "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
              "line": 284,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecide",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRule",
          "variableType": "MigrationRule",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationInvokerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "106": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
            "107": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
            "108": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "118": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
            "119": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
            "124": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
            "125": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
            "130": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
            "131": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
            "132": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "142": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
            "143": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
            "148": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
            "149": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
            "159": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
            "160": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "165": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
            "166": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
            "167": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "177": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
            "178": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "184": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
            "185": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
            "188": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
            "189": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
            "198": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
            "199": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
            "219": "Mockito.when(migrationRule.getProportion(Mockito.any())).thenReturn(50);",
            "220": "migrationInvoker.setMigrationRule(migrationRule);",
            "227": "Mockito.when(migrationRule.getDelay(Mockito.any())).thenReturn(1);"
          },
          "abstractedStatement": {
            "107": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "118": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "124": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "130": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "131": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "142": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "148": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "159": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "165": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "166": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "177": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "184": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "188": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
            "198": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
            "219": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getProportion(T)).thenReturn(int)",
            "227": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getDelay(T)).thenReturn(int)"
          },
          "rawStatementInfo": {
            "106": {
              "code": "MigrationRule migrationRule = Mockito.mock(MigrationRule.class);",
              "line": 106,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "107": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
              "line": 107,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "108": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 108,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "118": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
              "line": 118,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "119": {
              "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
              "line": 119,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "124": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
              "line": 124,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "125": {
              "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
              "line": 125,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "130": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
              "line": 130,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "131": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
              "line": 131,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "132": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 132,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "142": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
              "line": 142,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "143": {
              "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
              "line": 143,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "148": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
              "line": 148,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "149": {
              "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
              "line": 149,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "159": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
              "line": 159,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "160": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 160,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "165": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(2.0f);",
              "line": 165,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "166": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
              "line": 166,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "167": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 167,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "177": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
              "line": 177,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "178": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 178,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "184": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(true);",
              "line": 184,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "185": {
              "code": "migrationInvoker.migrateToForceInterfaceInvoker(migrationRule);",
              "line": 185,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "188": {
              "code": "Mockito.when(migrationRule.getForce(Mockito.any())).thenReturn(false);",
              "line": 188,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getForce(T)).thenReturn(boolean)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "189": {
              "code": "migrationInvoker.migrateToForceApplicationInvoker(migrationRule);",
              "line": 189,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "198": {
              "code": "Mockito.when(migrationRule.getThreshold(Mockito.any())).thenReturn(1.0f);",
              "line": 198,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getThreshold(T)).thenReturn(float)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "199": {
              "code": "migrationInvoker.migrateToApplicationFirstInvoker(migrationRule);",
              "line": 199,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "219": {
              "code": "Mockito.when(migrationRule.getProportion(Mockito.any())).thenReturn(50);",
              "line": 219,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getProportion(T)).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "220": {
              "code": "migrationInvoker.setMigrationRule(migrationRule);",
              "line": 220,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            },
            "227": {
              "code": "Mockito.when(migrationRule.getDelay(Mockito.any())).thenReturn(1);",
              "line": 227,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.registry.client.migration.model.MigrationRule.getDelay(T)).thenReturn(int)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "SuppressWarnings",
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)"
      ],
      "sequences": [
        {
          "variableName": "channel1",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "50": "// test getChannels() and getExchangeChannels()\r\nChannel channel1 = Mockito.mock(Channel.class);",
            "54": "Mockito.when(channel1.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel1);"
          },
          "abstractedStatement": {
            "54": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)"
          },
          "rawStatementInfo": {
            "50": {
              "code": "// test getChannels() and getExchangeChannels()\r\nChannel channel1 = Mockito.mock(Channel.class);",
              "line": 50,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.when(channel1.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel1);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel2",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "51": "Channel channel2 = Mockito.mock(Channel.class);",
            "56": "Mockito.when(channel2.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel2);"
          },
          "abstractedStatement": {
            "56": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)"
          },
          "rawStatementInfo": {
            "51": {
              "code": "Channel channel2 = Mockito.mock(Channel.class);",
              "line": 51,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "Mockito.when(channel2.getAttribute(HeaderExchangeChannel.class.getName() + \".CHANNEL\")).thenReturn(exchangeChannel2);",
              "line": 56,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.remoting.Channel.getAttribute(java.lang.String)).thenReturn(org.apache.dubbo.remoting.Channel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)"
      ],
      "sequences": [
        {
          "variableName": "providerModel",
          "variableType": "ProviderModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "48": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
            "54": "when(url.getServiceModel()).thenReturn(providerModel);",
            "55": "when(providerModel.getServiceMetadata()).thenReturn(serviceMetadata);",
            "77": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);"
          },
          "abstractedStatement": {
            "55": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceMetadata()).thenReturn(org.apache.dubbo.rpc.model.ServiceMetadata)",
            "77": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)"
          },
          "rawStatementInfo": {
            "48": {
              "code": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
              "line": 48,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "when(url.getServiceModel()).thenReturn(providerModel);",
              "line": 54,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "when(providerModel.getServiceMetadata()).thenReturn(serviceMetadata);",
              "line": 55,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceMetadata()).thenReturn(org.apache.dubbo.rpc.model.ServiceMetadata)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
              "line": 77,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "providerModel",
          "variableType": "ProviderModel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
            "49": "when(url.getServiceModel()).thenReturn(providerModel);",
            "50": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);"
          },
          "abstractedStatement": {
            "50": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)"
          },
          "rawStatementInfo": {
            "44": {
              "code": "ProviderModel providerModel = Mockito.mock(ProviderModel.class);",
              "line": 44,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "when(url.getServiceModel()).thenReturn(providerModel);",
              "line": 49,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "50": {
              "code": "when(providerModel.getServiceModel()).thenReturn(serviceDescriptor);",
              "line": 50,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.rpc.model.ProviderModel.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ServiceDescriptor)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 1,
      "locReduced": 1,
      "sharedStatements": [
        "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)"
      ],
      "sequences": [
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\ReflectionServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "URL url = Mockito.mock(URL.class);",
            "53": "when(invoker.getUrl()).thenReturn(url);",
            "54": "when(url.getServiceModel()).thenReturn(providerModel);"
          },
          "abstractedStatement": {
            "54": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)"
          },
          "rawStatementInfo": {
            "52": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 52,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 53,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "when(url.getServiceModel()).thenReturn(providerModel);",
              "line": 54,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-triple\\src\\test\\java\\org\\apache\\dubbo\\rpc\\protocol\\tri\\call\\StubServerCallTest.java",
          "testMethodName": "doStartCall",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "47": "URL url = Mockito.mock(URL.class);",
            "48": "when(invoker.getUrl()).thenReturn(url);",
            "49": "when(url.getServiceModel()).thenReturn(providerModel);"
          },
          "abstractedStatement": {
            "49": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)"
          },
          "rawStatementInfo": {
            "47": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 47,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "when(invoker.getUrl()).thenReturn(url);",
              "line": 48,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "when(url.getServiceModel()).thenReturn(providerModel);",
              "line": 49,
              "type": "STUBBING",
              "locate": "Test Case",
              "abstractedStatement": "when(org.apache.dubbo.common.URL.getServiceModel()).thenReturn(org.apache.dubbo.rpc.model.ProviderModel)",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "doStartCall",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "189": "NotifyListener listener = mock(NotifyListener.class);",
            "190": "nacosRegistry.subscribe(serviceUrl, listener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "189": {
              "code": "NotifyListener listener = mock(NotifyListener.class);",
              "line": 189,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "190": {
              "code": "nacosRegistry.subscribe(serviceUrl, listener);",
              "line": 190,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java",
          "testMethodName": "testUnSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "229": "NotifyListener listener = mock(NotifyListener.class);",
            "230": "nacosRegistry.subscribe(serviceUrl, listener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "229": {
              "code": "NotifyListener listener = mock(NotifyListener.class);",
              "line": 229,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "230": {
              "code": "nacosRegistry.subscribe(serviceUrl, listener);",
              "line": 230,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "listener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosRegistryTest.java",
          "testMethodName": "testIsConformRules",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "300": "NotifyListener listener = mock(NotifyListener.class);",
            "301": "nacosRegistry.subscribe(serviceUrlWithWildcard, listener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "300": {
              "code": "NotifyListener listener = mock(NotifyListener.class);",
              "line": 300,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIsConformRules",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "301": {
              "code": "nacosRegistry.subscribe(serviceUrlWithWildcard, listener);",
              "line": 301,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testIsConformRules",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "URL url = mock(URL.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "URL url = mock(URL.class);",
              "line": 40,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "42": "Invocation invocation = mock(Invocation.class);",
            "45": "consumerSignFilter.invoke(invoker, invocation);",
            "46": "verify(invocation, never()).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "42": {
              "code": "Invocation invocation = mock(Invocation.class);",
              "line": 42,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "consumerSignFilter.invoke(invoker, invocation);",
              "line": 45,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "verify(invocation, never()).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());",
              "line": 46,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ConsumerSignFilterTest.java",
          "testMethodName": "testAuthEnabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "57": "Invocation invocation = mock(Invocation.class);",
            "60": "consumerSignFilter.invoke(invoker, invocation);",
            "61": "verify(invocation, times(1)).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "57": {
              "code": "Invocation invocation = mock(Invocation.class);",
              "line": 57,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "consumerSignFilter.invoke(invoker, invocation);",
              "line": 60,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "verify(invocation, times(1)).setAttachment(eq(Constants.REQUEST_SIGNATURE_KEY), anyString());",
              "line": 61,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "serviceDiscovery",
          "variableType": "ServiceDiscovery",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "688": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "688": {
              "code": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
              "line": 688,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "spyListener",
          "variableType": "ServiceInstancesChangedListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerTest.java",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "690": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "690": {
              "code": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);",
              "line": 690,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "handler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\DecodeHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "36": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "36": {
              "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
              "line": 36,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\DecodeHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "37": "Channel channel = Mockito.mock(Channel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "37": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 37,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 6,
      "sequenceCount": 8,
      "sharedStatementLineCount": 0,
      "locReduced": 7,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "standardMeshRuleRouter",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "testStandard",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "115": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "116": "meshAppRuleListener.register(standardMeshRuleRouter);",
            "123": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
            "134": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "115": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 115,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testStandard",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "116": {
              "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
              "line": 116,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testStandard",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "123": {
              "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 123,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testStandard",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "134": {
              "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
              "line": 134,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testStandard",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter1",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "register",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "141": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "166": "verify(standardMeshRuleRouter1, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "141": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 141,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "register",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "166": {
              "code": "verify(standardMeshRuleRouter1, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 166,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "register",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter2",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "register",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "142": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "176": "verify(standardMeshRuleRouter2, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "142": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 142,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "register",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "176": {
              "code": "verify(standardMeshRuleRouter2, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 176,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "register",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter1",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "unregister",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "189": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "189": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter1 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 189,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "unregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter2",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "unregister",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "190": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "190": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter2 = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 190,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "unregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "process",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "229": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "230": "meshAppRuleListener.register(standardMeshRuleRouter);",
            "243": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
            "259": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
            "273": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "229": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 229,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "process",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "230": {
              "code": "meshAppRuleListener.register(standardMeshRuleRouter);",
              "line": 230,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "process",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "243": {
              "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 243,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "process",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "259": {
              "code": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 259,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "process",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "273": {
              "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
              "line": 273,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "process",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "testUnknownRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "280": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "288": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
            "297": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
            "304": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "280": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 280,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "288": {
              "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 288,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "297": {
              "code": "verify(standardMeshRuleRouter, times(2)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 297,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "304": {
              "code": "verify(standardMeshRuleRouter, times(1)).clearRule(\"demo-route\");",
              "line": 304,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "standardMeshRuleRouter",
          "variableType": "StandardMeshRuleRouter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-cluster\\src\\test\\java\\org\\apache\\dubbo\\rpc\\cluster\\router\\mesh\\route\\MeshAppRuleListenerTest.java",
          "testMethodName": "testMultipleRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "368": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
            "380": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "368": {
              "code": "StandardMeshRuleRouter standardMeshRuleRouter = Mockito.spy(new StandardMeshRuleRouter(URL.valueOf(\"\")));",
              "line": 368,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultipleRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "380": {
              "code": "verify(standardMeshRuleRouter, times(1)).onRuleChange(appCaptor.capture(), ruleCaptor.capture());",
              "line": 380,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testMultipleRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 4,
      "sharedStatementLineCount": 0,
      "locReduced": 3,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "descriptor",
          "variableType": "ServiceDescriptor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java",
          "testMethodName": "addDescriptor",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "34": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);",
            "35": "StubSuppliers.addDescriptor(serviceName, descriptor);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "34": {
              "code": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);",
              "line": 34,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "addDescriptor",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "35": {
              "code": "StubSuppliers.addDescriptor(serviceName, descriptor);",
              "line": 35,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "addDescriptor",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java",
          "testMethodName": "addSupplier",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "Invoker<?> invoker = Mockito.mock(Invoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "41": {
              "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
              "line": 41,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "addSupplier",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "descriptor",
          "variableType": "ServiceDescriptor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java",
          "testMethodName": "addSupplier",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "42": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "42": {
              "code": "ServiceDescriptor descriptor = Mockito.mock(ServiceDescriptor.class);",
              "line": 42,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "addSupplier",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker",
          "variableType": "Invoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\stub\\StubSuppliersTest.java",
          "testMethodName": "createStub",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "49": "Invoker<?> invoker = Mockito.mock(Invoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "49": {
              "code": "Invoker<?> invoker = Mockito.mock(Invoker.class);",
              "line": 49,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "createStub",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 6,
      "sequenceCount": 7,
      "sharedStatementLineCount": 0,
      "locReduced": 6,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "namingService",
          "variableType": "NamingService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "NamingService namingService = Mockito.mock(NamingService.class);",
            "42": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
            "48": "Mockito.verify(namingService, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
            "51": "Mockito.verify(namingService, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
            "54": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
            "57": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
            "60": "Mockito.verify(namingService, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "41": {
              "code": "NamingService namingService = Mockito.mock(NamingService.class);",
              "line": 41,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "42": {
              "code": "Mockito.when(connectionManager.getNamingService()).thenReturn(namingService);",
              "line": 42,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "48": {
              "code": "Mockito.verify(namingService, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
              "line": 48,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "Mockito.verify(namingService, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
              "line": 51,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
              "line": 54,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "Mockito.verify(namingService, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
              "line": 57,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "Mockito.verify(namingService, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
              "line": 60,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingService1",
          "variableType": "NamingService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testSubscribeMultiManager",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "66": "NamingService namingService1 = Mockito.mock(NamingService.class);",
            "74": "Mockito.verify(namingService1, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
            "78": "Mockito.verify(namingService1, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
            "81": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
            "84": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
            "87": "Mockito.verify(namingService1, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "66": {
              "code": "NamingService namingService1 = Mockito.mock(NamingService.class);",
              "line": 66,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "Mockito.verify(namingService1, Mockito.times(1)).subscribe(\"service_name\", \"test\", eventListener);",
              "line": 74,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "Mockito.verify(namingService1, Mockito.times(2)).subscribe(\"service_name\", \"test\", eventListener);",
              "line": 78,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "81": {
              "code": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
              "line": 81,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "84": {
              "code": "Mockito.verify(namingService1, Mockito.times(1)).unsubscribe(\"service_name\", \"test\", eventListener);",
              "line": 84,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "87": {
              "code": "Mockito.verify(namingService1, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
              "line": 87,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingService2",
          "variableType": "NamingService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testSubscribeMultiManager",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "67": "NamingService namingService2 = Mockito.mock(NamingService.class);",
            "88": "Mockito.verify(namingService2, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "67": {
              "code": "NamingService namingService2 = Mockito.mock(NamingService.class);",
              "line": 67,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "88": {
              "code": "Mockito.verify(namingService2, Mockito.times(0)).unsubscribe(\"service_name\", \"mock\", eventListener);",
              "line": 88,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribeMultiManager",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceList",
          "variableType": "List<NamingService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testRegisterNacos2_0_x",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "93": "List<NamingService> namingServiceList = new LinkedList<>();",
            "112": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "118": "Assertions.assertEquals(2, namingServiceList.size());",
            "119": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "120": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
            "126": "Assertions.assertEquals(3, namingServiceList.size());",
            "127": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "128": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
            "129": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
            "132": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
            "136": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
            "140": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "93": {
              "code": "List<NamingService> namingServiceList = new LinkedList<>();",
              "line": 93,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "112": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 112,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "118": {
              "code": "Assertions.assertEquals(2, namingServiceList.size());",
              "line": 118,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "119": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 119,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "120": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
              "line": 120,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "126": {
              "code": "Assertions.assertEquals(3, namingServiceList.size());",
              "line": 126,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "127": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 127,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "128": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
              "line": 128,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "129": {
              "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
              "line": 129,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "132": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
              "line": 132,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "136": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
              "line": 136,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "140": {
              "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 140,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_0_x",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceList",
          "variableType": "List<NamingService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testRegisterNacos2_1_xClient2_0_xServer",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "146": "List<NamingService> namingServiceList = new LinkedList<>();",
            "172": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "178": "Assertions.assertEquals(2, namingServiceList.size());",
            "179": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "180": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
            "186": "Assertions.assertEquals(3, namingServiceList.size());",
            "187": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "188": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
            "189": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
            "192": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
            "196": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
            "201": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
            "203": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
            "208": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
            "210": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
            "214": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "146": {
              "code": "List<NamingService> namingServiceList = new LinkedList<>();",
              "line": 146,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "172": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 172,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "178": {
              "code": "Assertions.assertEquals(2, namingServiceList.size());",
              "line": 178,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "179": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 179,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "180": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
              "line": 180,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "186": {
              "code": "Assertions.assertEquals(3, namingServiceList.size());",
              "line": 186,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "187": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 187,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "188": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance2);",
              "line": 188,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "189": {
              "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance3);",
              "line": 189,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "192": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance1);",
              "line": 192,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "196": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance2);",
              "line": 196,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "201": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
              "line": 201,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "203": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).registerInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
              "line": 203,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "208": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
              "line": 208,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "210": {
              "code": "Mockito.verify(namingServiceList.get(1), Mockito.times(2)).deregisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.any());",
              "line": 210,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "214": {
              "code": "Mockito.verify(namingServiceList.get(2), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 214,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_0_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceList",
          "variableType": "List<NamingService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testRegisterNacos2_1_xClient2_1_xServer",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "220": "List<NamingService> namingServiceList = new LinkedList<>();",
            "239": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "245": "Assertions.assertEquals(1, namingServiceList.size());",
            "246": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
            "256": "Assertions.assertEquals(1, namingServiceList.size());",
            "257": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
            "264": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
            "271": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "278": "Assertions.assertEquals(1, namingServiceList.size());",
            "279": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
            "286": "Assertions.assertEquals(1, namingServiceList.size());",
            "287": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
            "294": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
            "301": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "308": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
            "312": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
            "317": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
            "320": "Assertions.assertEquals(1, namingServiceList.size());",
            "321": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
            "328": "Assertions.assertEquals(1, namingServiceList.size());",
            "329": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
            "336": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
            "343": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "350": "Assertions.assertEquals(1, namingServiceList.size());",
            "351": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
            "358": "Assertions.assertEquals(1, namingServiceList.size());",
            "359": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
            "366": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
            "373": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "380": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
            "384": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "220": {
              "code": "List<NamingService> namingServiceList = new LinkedList<>();",
              "line": 220,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "239": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 239,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "245": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 245,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "246": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
              "line": 246,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 256,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "257": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
              "line": 257,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "264": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
              "line": 264,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "271": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 271,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "278": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 278,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "279": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
              "line": 279,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "286": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 286,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "287": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
              "line": 287,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "294": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
              "line": 294,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "301": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 301,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "308": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 308,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "312": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 312,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "317": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 317,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "320": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 320,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "321": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
              "line": 321,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "328": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 328,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "329": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
              "line": 329,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "336": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
              "line": 336,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "343": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 343,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "350": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 350,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "351": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
              "line": 351,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "358": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 358,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "359": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
              "line": 359,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "366": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
              "line": 366,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "373": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 373,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "380": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 380,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "384": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 384,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterNacos2_1_xClient2_1_xServer",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "namingServiceList",
          "variableType": "List<NamingService>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-nacos\\src\\test\\java\\org\\apache\\dubbo\\registry\\nacos\\NacosNamingServiceWrapperTest.java",
          "testMethodName": "testUnregister",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "390": "List<NamingService> namingServiceList = new LinkedList<>();",
            "409": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
            "415": "Assertions.assertEquals(1, namingServiceList.size());",
            "416": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
            "426": "Assertions.assertEquals(1, namingServiceList.size());",
            "427": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
            "435": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
            "443": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "450": "Assertions.assertEquals(1, namingServiceList.size());",
            "451": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
            "458": "Assertions.assertEquals(1, namingServiceList.size());",
            "459": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
            "468": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
            "476": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "484": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
            "489": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
            "492": "Assertions.assertEquals(1, namingServiceList.size());",
            "493": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
            "500": "Assertions.assertEquals(1, namingServiceList.size());",
            "501": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
            "508": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
            "515": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "522": "Assertions.assertEquals(1, namingServiceList.size());",
            "523": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
            "530": "Assertions.assertEquals(1, namingServiceList.size());",
            "531": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
            "538": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
            "545": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
            "552": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "390": {
              "code": "List<NamingService> namingServiceList = new LinkedList<>();",
              "line": 390,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "409": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 409,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "415": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 415,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "416": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
              "line": 416,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "426": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 426,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "427": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
              "line": 427,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "435": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
              "line": 435,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "443": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 443,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "450": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 450,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "451": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
              "line": 451,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "458": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 458,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "459": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
              "line": 459,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "468": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
              "line": 468,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "476": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 476,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "484": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(1)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 484,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "489": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).registerInstance(\"service_name\", \"test\", instance1);",
              "line": 489,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "492": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 492,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "493": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2))));",
              "line": 493,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "500": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 500,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "501": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance1, instance2, instance3))));",
              "line": 501,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "508": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance2, instance3))));",
              "line": 508,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "515": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(3)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 515,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "522": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 522,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "523": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1))));",
              "line": 523,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "530": {
              "code": "Assertions.assertEquals(1, namingServiceList.size());",
              "line": 530,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "531": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance1, instance2))));",
              "line": 531,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "538": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(new ArrayList<>(Arrays.asList(instance3, instance2))));",
              "line": 538,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "545": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(4)).batchRegisterInstance(Mockito.eq(\"service_name\"), Mockito.eq(\"test\"), Mockito.eq(Collections.singletonList(instance3)));",
              "line": 545,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "552": {
              "code": "Mockito.verify(namingServiceList.get(0), Mockito.times(2)).deregisterInstance(\"service_name\", \"test\", instance3);",
              "line": 552,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnregister",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 0,
      "locReduced": 3,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "codec2",
          "variableType": "Codec2",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "49": "Codec2 codec2 = Mockito.mock(Codec2.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "49": {
              "code": "Codec2 codec2 = Mockito.mock(Codec2.class);",
              "line": 49,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "50": "URL url = Mockito.mock(URL.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "50": {
              "code": "URL url = Mockito.mock(URL.class);",
              "line": 50,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "51": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "51": {
              "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
              "line": 51,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyCodecAdapterTest.java",
          "testMethodName": "testDecodeException",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "67": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "67": {
              "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
              "line": 67,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeException",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "mockMonitorFactory",
          "variableType": "MonitorFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testSkipMonitorIfNotHasKey",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "149": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
            "150": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
            "160": "verify(mockMonitorFactory, never()).getMonitor(any(URL.class));"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "149": {
              "code": "MonitorFactory mockMonitorFactory = mock(MonitorFactory.class);",
              "line": 149,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSkipMonitorIfNotHasKey",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "150": {
              "code": "monitorFilter.setMonitorFactory(mockMonitorFactory);",
              "line": 150,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testSkipMonitorIfNotHasKey",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "160": {
              "code": "verify(mockMonitorFactory, never()).getMonitor(any(URL.class));",
              "line": 160,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSkipMonitorIfNotHasKey",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockMonitor",
          "variableType": "Monitor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testOnResponseWithoutStartTime",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "218": "Monitor mockMonitor = mock(Monitor.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "218": {
              "code": "Monitor mockMonitor = mock(Monitor.class);",
              "line": 218,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnResponseWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "mockMonitor",
          "variableType": "Monitor",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-api\\src\\test\\java\\org\\apache\\dubbo\\monitor\\support\\MonitorFilterTest.java",
          "testMethodName": "testOnErrorWithoutStartTime",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "234": "Monitor mockMonitor = mock(Monitor.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "234": {
              "code": "Monitor mockMonitor = mock(Monitor.class);",
              "line": 234,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testOnErrorWithoutStartTime",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "mock",
          "variableType": "ConfigValidationUtils",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\utils\\ConfigValidationUtilsTest.java",
          "testMethodName": "testCheckQosInApplicationConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "138": "ConfigValidationUtils mock = Mockito.mock(ConfigValidationUtils.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "138": {
              "code": "ConfigValidationUtils mock = Mockito.mock(ConfigValidationUtils.class);",
              "line": 138,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckQosInApplicationConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "loggerMock",
          "variableType": "ErrorTypeAwareLogger",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-config\\dubbo-config-api\\src\\test\\java\\org\\apache\\dubbo\\config\\utils\\ConfigValidationUtilsTest.java",
          "testMethodName": "testCheckQosInApplicationConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "139": "ErrorTypeAwareLogger loggerMock = Mockito.mock(ErrorTypeAwareLogger.class);",
            "140": "injectField(mock.getClass().getDeclaredField(\"logger\"), loggerMock);",
            "145": "verify(loggerMock, never()).warn(any(), any());",
            "149": "verify(loggerMock).warn(eq(COMMON_CLASS_NOT_FOUND), eq(\"\"), eq(\"\"), eq(\"No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly.\"), any());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "139": {
              "code": "ErrorTypeAwareLogger loggerMock = Mockito.mock(ErrorTypeAwareLogger.class);",
              "line": 139,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckQosInApplicationConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "140": {
              "code": "injectField(mock.getClass().getDeclaredField(\"logger\"), loggerMock);",
              "line": 140,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testCheckQosInApplicationConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "145": {
              "code": "verify(loggerMock, never()).warn(any(), any());",
              "line": 145,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckQosInApplicationConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "149": {
              "code": "verify(loggerMock).warn(eq(COMMON_CLASS_NOT_FOUND), eq(\"\"), eq(\"\"), eq(\"No QosProtocolWrapper class was found. Please check the dependency of dubbo-qos whether was imported correctly.\"), any());",
              "line": 149,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCheckQosInApplicationConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "address1",
          "variableType": "InetSocketAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "64": "// test getChannel(InetSocketAddress) and getExchangeChannel(InetSocketAddress)\r\nInetSocketAddress address1 = Mockito.mock(InetSocketAddress.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "64": {
              "code": "// test getChannel(InetSocketAddress) and getExchangeChannel(InetSocketAddress)\r\nInetSocketAddress address1 = Mockito.mock(InetSocketAddress.class);",
              "line": 64,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "address2",
          "variableType": "InetSocketAddress",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\header\\HeaderExchangeServerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "65": "InetSocketAddress address2 = Mockito.mock(InetSocketAddress.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "65": {
              "code": "InetSocketAddress address2 = Mockito.mock(InetSocketAddress.class);",
              "line": 65,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "52": "ChannelFuture future = mock(ChannelFuture.class);",
            "53": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
            "65": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "52": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 52,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 53,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 65,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndEmptyWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "78": "ChannelFuture future = mock(ChannelFuture.class);",
            "79": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
            "92": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "78": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 78,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 79,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "92": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 92,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteList",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\ForeignHostPermitHandlerTest.java",
          "testMethodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "139": "ChannelFuture future = mock(ChannelFuture.class);",
            "140": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
            "148": "verify(future, never()).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "139": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 139,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "140": {
              "code": "when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);",
              "line": 140,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "148": {
              "code": "verify(future, never()).addListener(ChannelFutureListener.CLOSE);",
              "line": 148,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "shouldNotShowIpNotPermittedMsg_GivenAcceptForeignIpFalseAndNotMatchWhiteListAndPermissionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "handler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "43": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
            "61": "Mockito.verify(handler, Mockito.times(1)).connected(captor.capture());",
            "65": "Mockito.verify(handler, Mockito.times(1)).disconnected(captor.capture());",
            "71": "Mockito.verify(handler, Mockito.times(1)).caught(captor.capture(), throwableArgumentCaptor.capture());",
            "76": "Mockito.verify(handler, Mockito.times(1)).received(captor.capture(), objectArgumentCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "43": {
              "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
              "line": 43,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "Mockito.verify(handler, Mockito.times(1)).connected(captor.capture());",
              "line": 61,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "Mockito.verify(handler, Mockito.times(1)).disconnected(captor.capture());",
              "line": 65,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "71": {
              "code": "Mockito.verify(handler, Mockito.times(1)).caught(captor.capture(), throwableArgumentCaptor.capture());",
              "line": 71,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "Mockito.verify(handler, Mockito.times(1)).received(captor.capture(), objectArgumentCaptor.capture());",
              "line": 76,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "throwable",
          "variableType": "Throwable",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-netty4\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\netty4\\NettyClientHandlerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "67": "Throwable throwable = Mockito.mock(Throwable.class);",
            "68": "nettyClientHandler.exceptionCaught(ctx, throwable);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "67": {
              "code": "Throwable throwable = Mockito.mock(Throwable.class);",
              "line": 67,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "68": {
              "code": "nettyClientHandler.exceptionCaught(ctx, throwable);",
              "line": 68,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "monitorService",
          "variableType": "MonitorService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testAvailable",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "211": "MonitorService monitorService = mock(MonitorService.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "211": {
              "code": "MonitorService monitorService = mock(MonitorService.class);",
              "line": 211,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAvailable",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "monitorService",
          "variableType": "MonitorService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testSum",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "236": "MonitorService monitorService = mock(MonitorService.class);",
            "256": "verify(monitorService, atLeastOnce()).collect(summaryCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "236": {
              "code": "MonitorService monitorService = mock(MonitorService.class);",
              "line": 236,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSum",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "256": {
              "code": "verify(monitorService, atLeastOnce()).collect(summaryCaptor.capture());",
              "line": 256,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSum",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "monitorService",
          "variableType": "MonitorService",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-monitor\\dubbo-monitor-default\\src\\test\\java\\org\\apache\\dubbo\\monitor\\dubbo\\DubboMonitorTest.java",
          "testMethodName": "testLookUp",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "273": "MonitorService monitorService = mock(MonitorService.class);",
            "281": "verify(monitorService).lookup(queryUrl);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "273": {
              "code": "MonitorService monitorService = mock(MonitorService.class);",
              "line": 273,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLookUp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "281": {
              "code": "verify(monitorService).lookup(queryUrl);",
              "line": 281,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testLookUp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "pipeline",
          "variableType": "ChannelPipeline",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java",
          "testMethodName": "testDecodeHttp",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
            "46": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
            "55": "verify(pipeline).addLast(any(HttpServerCodec.class));",
            "56": "verify(pipeline).addLast(any(HttpObjectAggregator.class));",
            "57": "verify(pipeline).addLast(any(HttpProcessHandler.class));",
            "58": "verify(pipeline).remove(handler);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
              "line": 45,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "verify(pipeline).addLast(any(HttpServerCodec.class));",
              "line": 55,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "verify(pipeline).addLast(any(HttpObjectAggregator.class));",
              "line": 56,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "verify(pipeline).addLast(any(HttpProcessHandler.class));",
              "line": 57,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "verify(pipeline).remove(handler);",
              "line": 58,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeHttp",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "pipeline",
          "variableType": "ChannelPipeline",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\QosProcessHandlerTest.java",
          "testMethodName": "testDecodeTelnet",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "65": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
            "66": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
            "75": "verify(pipeline).addLast(any(LineBasedFrameDecoder.class));",
            "76": "verify(pipeline).addLast(any(StringDecoder.class));",
            "77": "verify(pipeline).addLast(any(StringEncoder.class));",
            "78": "verify(pipeline).addLast(any(TelnetProcessHandler.class));",
            "79": "verify(pipeline).remove(handler);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "65": {
              "code": "ChannelPipeline pipeline = Mockito.mock(ChannelPipeline.class);",
              "line": 65,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "Mockito.when(context.pipeline()).thenReturn(pipeline);",
              "line": 66,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "75": {
              "code": "verify(pipeline).addLast(any(LineBasedFrameDecoder.class));",
              "line": 75,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "76": {
              "code": "verify(pipeline).addLast(any(StringDecoder.class));",
              "line": 76,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "77": {
              "code": "verify(pipeline).addLast(any(StringEncoder.class));",
              "line": 77,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "78": {
              "code": "verify(pipeline).addLast(any(TelnetProcessHandler.class));",
              "line": 78,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "79": {
              "code": "verify(pipeline).remove(handler);",
              "line": 79,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testDecodeTelnet",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 4,
      "sharedStatementLineCount": 0,
      "locReduced": 3,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "cert1",
          "variableType": "Cert",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java",
          "testMethodName": "testGetConsumerConnectionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "57": "Cert cert1 = Mockito.mock(Cert.class);",
            "58": "FirstCertProvider.setCert(cert1);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "57": {
              "code": "Cert cert1 = Mockito.mock(Cert.class);",
              "line": 57,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetConsumerConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "FirstCertProvider.setCert(cert1);",
              "line": 58,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetConsumerConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "cert2",
          "variableType": "Cert",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java",
          "testMethodName": "testGetConsumerConnectionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "64": "Cert cert2 = Mockito.mock(Cert.class);",
            "65": "SecondCertProvider.setCert(cert2);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "64": {
              "code": "Cert cert2 = Mockito.mock(Cert.class);",
              "line": 64,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetConsumerConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "SecondCertProvider.setCert(cert2);",
              "line": 65,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetConsumerConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "providerCert1",
          "variableType": "ProviderCert",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java",
          "testMethodName": "testGetProviderConnectionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "85": "ProviderCert providerCert1 = Mockito.mock(ProviderCert.class);",
            "86": "FirstCertProvider.setProviderCert(providerCert1);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "85": {
              "code": "ProviderCert providerCert1 = Mockito.mock(ProviderCert.class);",
              "line": 85,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetProviderConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "86": {
              "code": "FirstCertProvider.setProviderCert(providerCert1);",
              "line": 86,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetProviderConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "providerCert2",
          "variableType": "ProviderCert",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-common\\src\\test\\java\\org\\apache\\dubbo\\common\\ssl\\CertManagerTest.java",
          "testMethodName": "testGetProviderConnectionConfig",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "92": "ProviderCert providerCert2 = Mockito.mock(ProviderCert.class);",
            "93": "SecondCertProvider.setProviderCert(providerCert2);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "92": {
              "code": "ProviderCert providerCert2 = Mockito.mock(ProviderCert.class);",
              "line": 92,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetProviderConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "SecondCertProvider.setProviderCert(providerCert2);",
              "line": 93,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetProviderConnectionConfig",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "handler",
          "variableType": "InvocationHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java",
          "testMethodName": "testIntercept",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "36": "InvocationHandler handler = Mockito.mock(InvocationHandler.class);",
            "43": "// 'intercept' method will call 'invoke' method directly\r\nMockito.verify(handler, Mockito.times(1)).invoke(proxy, method, args);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "36": {
              "code": "InvocationHandler handler = Mockito.mock(InvocationHandler.class);",
              "line": 36,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIntercept",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "43": {
              "code": "// 'intercept' method will call 'invoke' method directly\r\nMockito.verify(handler, Mockito.times(1)).invoke(proxy, method, args);",
              "line": 43,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIntercept",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "method",
          "variableType": "Method",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java",
          "testMethodName": "testIntercept",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "38": "Method method = Mockito.mock(Method.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "38": {
              "code": "Method method = Mockito.mock(Method.class);",
              "line": 38,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIntercept",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "proxy",
          "variableType": "Proxy",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\bytebuddy\\ByteBuddyInterceptorTest.java",
          "testMethodName": "testIntercept",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "39": "Proxy proxy = Mockito.mock(Proxy.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "39": {
              "code": "Proxy proxy = Mockito.mock(Proxy.class);",
              "line": 39,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testIntercept",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 5,
      "sharedStatementLineCount": 0,
      "locReduced": 4,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "channelHandler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "35": "ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
            "55": "Mockito.verify(channelHandler, Mockito.times(1)).connected(channel);",
            "56": "Mockito.verify(channelHandler, Mockito.times(1)).disconnected(channel);",
            "57": "Mockito.verify(channelHandler, Mockito.times(1)).sent(channel, null);",
            "58": "Mockito.verify(channelHandler, Mockito.times(1)).received(channel, null);",
            "59": "Mockito.verify(channelHandler, Mockito.times(1)).caught(channel, null);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "35": {
              "code": "ChannelHandler channelHandler = Mockito.mock(ChannelHandler.class);",
              "line": 35,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "55": {
              "code": "Mockito.verify(channelHandler, Mockito.times(1)).connected(channel);",
              "line": 55,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "Mockito.verify(channelHandler, Mockito.times(1)).disconnected(channel);",
              "line": 56,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "57": {
              "code": "Mockito.verify(channelHandler, Mockito.times(1)).sent(channel, null);",
              "line": 57,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "Mockito.verify(channelHandler, Mockito.times(1)).received(channel, null);",
              "line": 58,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "59": {
              "code": "Mockito.verify(channelHandler, Mockito.times(1)).caught(channel, null);",
              "line": 59,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "replier",
          "variableType": "Replier",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "36": "Replier replier = Mockito.mock(Replier.class);",
            "60": "Mockito.verify(replier, Mockito.times(1)).reply(exchangeChannel, obj);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "36": {
              "code": "Replier replier = Mockito.mock(Replier.class);",
              "line": 36,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "60": {
              "code": "Mockito.verify(replier, Mockito.times(1)).reply(exchangeChannel, obj);",
              "line": 60,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "telnetHandlerAdapter",
          "variableType": "TelnetHandlerAdapter",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "37": "TelnetHandlerAdapter telnetHandlerAdapter = Mockito.mock(TelnetHandlerAdapter.class);",
            "61": "Mockito.verify(telnetHandlerAdapter, Mockito.times(1)).telnet(channel, null);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "37": {
              "code": "TelnetHandlerAdapter telnetHandlerAdapter = Mockito.mock(TelnetHandlerAdapter.class);",
              "line": 37,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "Mockito.verify(telnetHandlerAdapter, Mockito.times(1)).telnet(channel, null);",
              "line": 61,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "Channel channel = Mockito.mock(Channel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "44": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 44,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "exchangeChannel",
          "variableType": "ExchangeChannel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\exchange\\support\\ExchangeHandlerDispatcherTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "ExchangeChannel exchangeChannel = Mockito.mock(ExchangeChannel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "ExchangeChannel exchangeChannel = Mockito.mock(ExchangeChannel.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "59": "Registry registry = mock(Registry.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "59": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 59,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "notifyListener",
          "variableType": "NotifyListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "60": "NotifyListener notifyListener = mock(NotifyListener.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "60": {
              "code": "NotifyListener notifyListener = mock(NotifyListener.class);",
              "line": 60,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "listener",
          "variableType": "RegistryServiceListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\ListenerRegistryWrapperTest.java",
          "testMethodName": "testSubscribe",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "70": "RegistryServiceListener listener = Mockito.mock(RegistryServiceListener.class);",
            "74": "verify(listener, times(1)).onSubscribe(subscribeUrl, registry);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "70": {
              "code": "RegistryServiceListener listener = Mockito.mock(RegistryServiceListener.class);",
              "line": 70,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "74": {
              "code": "verify(listener, times(1)).onSubscribe(subscribeUrl, registry);",
              "line": 74,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testSubscribe",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "serviceDiscovery",
          "variableType": "ServiceDiscovery",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "687": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "687": {
              "code": "ServiceDiscovery serviceDiscovery = Mockito.mock(ServiceDiscovery.class);",
              "line": 687,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        },
        {
          "variableName": "spyListener",
          "variableType": "ServiceInstancesChangedListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\event\\listener\\ServiceInstancesChangedListenerWithoutEmptyProtectTest.java",
          "testMethodName": "testInstanceWithoutRevision",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "689": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "689": {
              "code": "ServiceInstancesChangedListener spyListener = Mockito.spy(listener);",
              "line": 689,
              "type": "METHOD_SPY_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInstanceWithoutRevision",
                "methodAnnotations": [
                  "Test",
                  "Order"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testGetAccessKeyPairFailed",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "106": "Invocation invocation = mock(Invocation.class);",
            "107": "assertThrows(RuntimeException.class, () -> helper.getAccessKeyPair(invocation, url));"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "106": {
              "code": "Invocation invocation = mock(Invocation.class);",
              "line": 106,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetAccessKeyPairFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "107": {
              "code": "assertThrows(RuntimeException.class, () -> helper.getAccessKeyPair(invocation, url));",
              "line": 107,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGetAccessKeyPairFailed",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testGetSignatureNoParameter",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "112": "URL url = mock(URL.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "112": {
              "code": "URL url = mock(URL.class);",
              "line": 112,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetSignatureNoParameter",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\AccessKeyAuthenticatorTest.java",
          "testMethodName": "testGetSignatureNoParameter",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "113": "Invocation invocation = mock(Invocation.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "113": {
              "code": "Invocation invocation = mock(Invocation.class);",
              "line": 113,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGetSignatureNoParameter",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 9,
      "sharedStatementLineCount": 0,
      "locReduced": 8,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "dynamicConfiguration",
          "variableType": "DynamicConfiguration",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "87": "DynamicConfiguration dynamicConfiguration = Mockito.mock(DynamicConfiguration.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "87": {
              "code": "DynamicConfiguration dynamicConfiguration = Mockito.mock(DynamicConfiguration.class);",
              "line": 87,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "MigrationRuleHandler<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "104": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
            "131": "Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "104": {
              "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
              "line": 104,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "131": {
              "code": "Mockito.verify(handler, Mockito.times(2)).doMigrate(Mockito.any());",
              "line": 131,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationInvoker",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "121": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
            "122": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "121": {
              "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
              "line": 121,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "122": {
              "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
              "line": 122,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "MigrationRuleHandler<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithInitAndNoLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "150": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
            "159": "// check migration happened after invoker referred\r\nMockito.verify(handler, Mockito.times(1)).doMigrate(MigrationRule.getInitRule());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "150": {
              "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
              "line": 150,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "159": {
              "code": "// check migration happened after invoker referred\r\nMockito.verify(handler, Mockito.times(1)).doMigrate(MigrationRule.getInitRule());",
              "line": 159,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationInvoker",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithInitAndNoLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "155": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
            "156": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "155": {
              "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
              "line": 155,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "156": {
              "code": "migrationRuleListener.getHandlers().put(migrationInvoker, handler);",
              "line": 156,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testWithInitAndNoLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "MigrationRuleHandler<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "195": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
            "215": "Mockito.verify(handler, Mockito.times(1)).doMigrate(captor.capture());",
            "221": "Mockito.verify(handler, Mockito.times(1)).doMigrate(Mockito.any());",
            "239": "Mockito.verify(handler, Mockito.times(2)).doMigrate(captor_event.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "195": {
              "code": "MigrationRuleHandler<?> handler = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
              "line": 195,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "215": {
              "code": "Mockito.verify(handler, Mockito.times(1)).doMigrate(captor.capture());",
              "line": 215,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "221": {
              "code": "Mockito.verify(handler, Mockito.times(1)).doMigrate(Mockito.any());",
              "line": 221,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "239": {
              "code": "Mockito.verify(handler, Mockito.times(2)).doMigrate(captor_event.capture());",
              "line": 239,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler2",
          "variableType": "MigrationRuleHandler<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "197": "MigrationRuleHandler<?> handler2 = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
            "226": "Mockito.verify(handler2, Mockito.times(1)).doMigrate(captor2.capture());",
            "242": "Mockito.verify(handler2, Mockito.times(2)).doMigrate(captor_event.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "197": {
              "code": "MigrationRuleHandler<?> handler2 = Mockito.mock(MigrationRuleHandler.class, Mockito.withSettings().verboseLogging());",
              "line": 197,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "226": {
              "code": "Mockito.verify(handler2, Mockito.times(1)).doMigrate(captor2.capture());",
              "line": 226,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "242": {
              "code": "Mockito.verify(handler2, Mockito.times(2)).doMigrate(captor_event.capture());",
              "line": 242,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationInvoker",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "206": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "206": {
              "code": "MigrationInvoker<?> migrationInvoker = Mockito.mock(MigrationInvoker.class);",
              "line": 206,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationInvoker2",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\client\\migration\\MigrationRuleListenerTest.java",
          "testMethodName": "testWithConfigurationListenerAndLocalRule",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "207": "MigrationInvoker<?> migrationInvoker2 = Mockito.mock(MigrationInvoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "207": {
              "code": "MigrationInvoker<?> migrationInvoker2 = Mockito.mock(MigrationInvoker.class);",
              "line": 207,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testWithConfigurationListenerAndLocalRule",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "invoker1",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java",
          "testMethodName": "testInvokers",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "53": "Invoker invoker1 = Mockito.mock(Invoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "53": {
              "code": "Invoker invoker1 = Mockito.mock(Invoker.class);",
              "line": 53,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokers",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker2",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java",
          "testMethodName": "testInvokers",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "54": "Invoker invoker2 = Mockito.mock(Invoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "54": {
              "code": "Invoker invoker2 = Mockito.mock(Invoker.class);",
              "line": 54,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokers",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invoker3",
          "variableType": "Invoker",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\RpcInvocationTest.java",
          "testMethodName": "testInvokers",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "55": "Invoker invoker3 = Mockito.mock(Invoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "55": {
              "code": "Invoker invoker3 = Mockito.mock(Invoker.class);",
              "line": 55,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInvokers",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "channel",
          "variableType": "Channel",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\dispatcher\\ChannelEventRunnableTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "39": "Channel channel = Mockito.mock(Channel.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "39": {
              "code": "Channel channel = Mockito.mock(Channel.class);",
              "line": 39,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "handler",
          "variableType": "ChannelHandler",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-remoting\\dubbo-remoting-api\\src\\test\\java\\org\\apache\\dubbo\\remoting\\transport\\dispatcher\\ChannelEventRunnableTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
            "61": "Mockito.verify(handler, Mockito.times(1)).connected(channelArgumentCaptor.capture());",
            "62": "Mockito.verify(handler, Mockito.times(1)).disconnected(channelArgumentCaptor.capture());",
            "63": "Mockito.verify(handler, Mockito.times(1)).sent(channelArgumentCaptor.capture(), Mockito.any());",
            "64": "Mockito.verify(handler, Mockito.times(1)).received(channelArgumentCaptor.capture(), objectArgumentCaptor.capture());",
            "66": "Mockito.verify(handler, Mockito.times(1)).caught(channelArgumentCaptor.capture(), throwableArgumentCaptor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "ChannelHandler handler = Mockito.mock(ChannelHandler.class);",
              "line": 40,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "61": {
              "code": "Mockito.verify(handler, Mockito.times(1)).connected(channelArgumentCaptor.capture());",
              "line": 61,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "Mockito.verify(handler, Mockito.times(1)).disconnected(channelArgumentCaptor.capture());",
              "line": 62,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "63": {
              "code": "Mockito.verify(handler, Mockito.times(1)).sent(channelArgumentCaptor.capture(), Mockito.any());",
              "line": 63,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "64": {
              "code": "Mockito.verify(handler, Mockito.times(1)).received(channelArgumentCaptor.capture(), objectArgumentCaptor.capture());",
              "line": 64,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "Mockito.verify(handler, Mockito.times(1)).caught(channelArgumentCaptor.capture(), throwableArgumentCaptor.capture());",
              "line": 66,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "listener1",
          "variableType": "RegistryServiceListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\RegistryFactoryWrapperTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "31": "RegistryServiceListener listener1 = Mockito.mock(RegistryServiceListener.class);",
            "41": "Mockito.verify(listener1, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
            "45": "Mockito.verify(listener1, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
            "49": "Mockito.verify(listener1, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
            "53": "Mockito.verify(listener1, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "31": {
              "code": "RegistryServiceListener listener1 = Mockito.mock(RegistryServiceListener.class);",
              "line": 31,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "41": {
              "code": "Mockito.verify(listener1, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
              "line": 41,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "Mockito.verify(listener1, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
              "line": 45,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "49": {
              "code": "Mockito.verify(listener1, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
              "line": 49,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "53": {
              "code": "Mockito.verify(listener1, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);",
              "line": 53,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "listener2",
          "variableType": "RegistryServiceListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\RegistryFactoryWrapperTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "33": "RegistryServiceListener listener2 = Mockito.mock(RegistryServiceListener.class);",
            "42": "Mockito.verify(listener2, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
            "46": "Mockito.verify(listener2, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
            "50": "Mockito.verify(listener2, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
            "54": "Mockito.verify(listener2, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "33": {
              "code": "RegistryServiceListener listener2 = Mockito.mock(RegistryServiceListener.class);",
              "line": 33,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "42": {
              "code": "Mockito.verify(listener2, Mockito.times(1)).onRegister(url, SimpleRegistryFactory.registry);",
              "line": 42,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "Mockito.verify(listener2, Mockito.times(1)).onUnregister(url, SimpleRegistryFactory.registry);",
              "line": 46,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "50": {
              "code": "Mockito.verify(listener2, Mockito.times(1)).onSubscribe(url, SimpleRegistryFactory.registry);",
              "line": 50,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.verify(listener2, Mockito.times(1)).onUnsubscribe(url, SimpleRegistryFactory.registry);",
              "line": 54,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 3,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test1",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "44": "ChannelFuture future = mock(ChannelFuture.class);",
            "45": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "51": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "44": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 44,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "45": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 45,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 51,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test1",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test2",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "61": "ChannelFuture future = mock(ChannelFuture.class);",
            "62": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "72": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "61": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 61,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "62": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 62,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "72": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 72,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test2",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\HttpProcessHandlerTest.java",
          "testMethodName": "test3",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "82": "ChannelFuture future = mock(ChannelFuture.class);",
            "83": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
            "93": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "82": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 82,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "83": {
              "code": "when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);",
              "line": 83,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "93": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 93,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test3",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 7,
      "sequenceCount": 15,
      "sharedStatementLineCount": 0,
      "locReduced": 14,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "105": "Registry registry = mock(Registry.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "105": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 105,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRuleListener",
          "variableType": "MigrationRuleListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "109": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "109": {
              "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
              "line": 109,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "cluster",
          "variableType": "Cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithoutProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "127": "Cluster cluster = mock(Cluster.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "127": {
              "code": "Cluster cluster = mock(Cluster.class);",
              "line": 127,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithoutProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "175": "Registry registry = mock(Registry.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "175": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 175,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRuleListener",
          "variableType": "MigrationRuleListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "177": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "177": {
              "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
              "line": 177,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "cluster",
          "variableType": "Cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testConsumerUrlWithProtocol",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "195": "Cluster cluster = mock(Cluster.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "195": {
              "code": "Cluster cluster = mock(Cluster.class);",
              "line": 195,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testConsumerUrlWithProtocol",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "242": "Registry registry = mock(Registry.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "242": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 242,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRuleListener",
          "variableType": "MigrationRuleListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithoutGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "244": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "244": {
              "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
              "line": 244,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithoutGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "309": "Registry registry = mock(Registry.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "309": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 309,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRuleListener",
          "variableType": "MigrationRuleListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testReferWithGroup",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "311": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "311": {
              "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
              "line": 311,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testReferWithGroup",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "clusterInvoker",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "377": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "377": {
              "code": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);",
              "line": 377,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "migrationRuleListener",
          "variableType": "MigrationRuleListener",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForMigrationRuleListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "391": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
            "409": "verify(migrationRuleListener, times(1)).onRefer(registryProtocol, clusterInvoker, consumerUrl, url);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "391": {
              "code": "MigrationRuleListener migrationRuleListener = mock(MigrationRuleListener.class);",
              "line": 391,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "409": {
              "code": "verify(migrationRuleListener, times(1)).onRefer(registryProtocol, clusterInvoker, consumerUrl, url);",
              "line": 409,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForMigrationRuleListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "clusterInvoker",
          "variableType": "MigrationInvoker<?>",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testInterceptInvokerForCustomRegistryProtocolListener",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "445": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "445": {
              "code": "MigrationInvoker<?> clusterInvoker = mock(MigrationInvoker.class);",
              "line": 445,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testInterceptInvokerForCustomRegistryProtocolListener",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "registry",
          "variableType": "Registry",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "511": "Registry registry = mock(Registry.class);",
            "548": "verify(registry, times(1)).register(registeredConsumerUrl);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "511": {
              "code": "Registry registry = mock(Registry.class);",
              "line": 511,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "548": {
              "code": "verify(registry, times(1)).register(registeredConsumerUrl);",
              "line": 548,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "cluster",
          "variableType": "Cluster",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-registry\\dubbo-registry-api\\src\\test\\java\\org\\apache\\dubbo\\registry\\integration\\RegistryProtocolTest.java",
          "testMethodName": "testRegisterConsumerUrl",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "527": "Cluster cluster = mock(Cluster.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "527": {
              "code": "Cluster cluster = mock(Cluster.class);",
              "line": 527,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testRegisterConsumerUrl",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 2,
      "sequenceCount": 3,
      "sharedStatementLineCount": 0,
      "locReduced": 2,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "url",
          "variableType": "URL",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "45": "URL url = mock(URL.class);",
            "51": "verify(url, never()).getParameter(eq(Constants.AUTHENTICATOR), eq(Constants.DEFAULT_AUTHENTICATOR));"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "45": {
              "code": "URL url = mock(URL.class);",
              "line": 45,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "51": {
              "code": "verify(url, never()).getParameter(eq(Constants.AUTHENTICATOR), eq(Constants.DEFAULT_AUTHENTICATOR));",
              "line": 51,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthDisabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "47": "Invocation invocation = mock(RpcInvocation.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "47": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 47,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthDisabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "invocation",
          "variableType": "Invocation",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-auth\\src\\test\\java\\org\\apache\\dubbo\\auth\\filter\\ProviderAuthFilterTest.java",
          "testMethodName": "testAuthEnabled",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "62": "Invocation invocation = mock(RpcInvocation.class);",
            "65": "providerAuthFilter.invoke(invoker, invocation);",
            "66": "verify(invocation, atLeastOnce()).getAttachment(anyString());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "62": {
              "code": "Invocation invocation = mock(RpcInvocation.class);",
              "line": 62,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "65": {
              "code": "providerAuthFilter.invoke(invoker, invocation);",
              "line": 65,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "66": {
              "code": "verify(invocation, atLeastOnce()).getAttachment(anyString());",
              "line": 66,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testAuthEnabled",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 4,
      "sequenceCount": 4,
      "sharedStatementLineCount": 0,
      "locReduced": 3,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java",
          "testMethodName": "testPrompt",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "46": "handler.channelRead0(context, \"\");",
            "47": "verify(context).writeAndFlush(QosProcessHandler.PROMPT);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 40,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPrompt",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "46": {
              "code": "handler.channelRead0(context, \"\");",
              "line": 46,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testPrompt",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "47": {
              "code": "verify(context).writeAndFlush(QosProcessHandler.PROMPT);",
              "line": 47,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testPrompt",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "future",
          "variableType": "ChannelFuture",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java",
          "testMethodName": "testBye",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "55": "ChannelFuture future = mock(ChannelFuture.class);",
            "56": "when(context.writeAndFlush(\"BYE!\\n\")).thenReturn(future);",
            "58": "verify(future).addListener(ChannelFutureListener.CLOSE);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "55": {
              "code": "ChannelFuture future = mock(ChannelFuture.class);",
              "line": 55,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testBye",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "56": {
              "code": "when(context.writeAndFlush(\"BYE!\\n\")).thenReturn(future);",
              "line": 56,
              "type": "REFERENCE",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testBye",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "58": {
              "code": "verify(future).addListener(ChannelFutureListener.CLOSE);",
              "line": 58,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testBye",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java",
          "testMethodName": "testUnknownCommand",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "63": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "68": "verify(context, Mockito.atLeastOnce()).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "63": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 63,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testUnknownCommand",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "68": {
              "code": "verify(context, Mockito.atLeastOnce()).writeAndFlush(captor.capture());",
              "line": 68,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testUnknownCommand",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "context",
          "variableType": "ChannelHandlerContext",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-plugin\\dubbo-qos\\src\\test\\java\\org\\apache\\dubbo\\qos\\server\\handler\\TelnetProcessHandlerTest.java",
          "testMethodName": "testGreeting",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "74": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
            "82": "verify(context).writeAndFlush(captor.capture());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "74": {
              "code": "ChannelHandlerContext context = mock(ChannelHandlerContext.class);",
              "line": 74,
              "type": "METHOD_VARIABLE_INITIALIZATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": false,
              "locationContext": {
                "methodName": "testGreeting",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "82": {
              "code": "verify(context).writeAndFlush(captor.capture());",
              "line": 82,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testGreeting",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "appender",
          "variableType": "Appender",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\AccessLogFilterTest.java",
          "testMethodName": "testCustom",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "91": "Appender appender = mock(Appender.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "91": {
              "code": "Appender appender = mock(Appender.class);",
              "line": 91,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustom",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "appender2",
          "variableType": "Appender",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\filter\\AccessLogFilterTest.java",
          "testMethodName": "testCustom",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "116": "Appender appender2 = mock(Appender.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "116": {
              "code": "Appender appender2 = mock(Appender.class);",
              "line": 116,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "testCustom",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    },
    {
      "mockedClass": "null",
      "packageName": "null",
      "testCaseCount": 1,
      "sequenceCount": 2,
      "sharedStatementLineCount": 0,
      "locReduced": 1,
      "sharedStatements": [],
      "sequences": [
        {
          "variableName": "proxyFactory",
          "variableType": "ProxyFactory",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "40": "ProxyFactory proxyFactory = Mockito.mock(ProxyFactory.class);"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "40": {
              "code": "ProxyFactory proxyFactory = Mockito.mock(ProxyFactory.class);",
              "line": 40,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        },
        {
          "variableName": "protocol",
          "variableType": "Protocol",
          "filePath": "C:\\java tool\\Apache\\dubbo\\dubbo-rpc\\dubbo-rpc-api\\src\\test\\java\\org\\apache\\dubbo\\rpc\\proxy\\wrapper\\StubProxyFactoryWrapperTest.java",
          "testMethodName": "test",
          "overlapLines": [],
          "shareableMockLines": {},
          "testMockLines": {
            "41": "Protocol protocol = Mockito.mock(Protocol.class);",
            "54": "Mockito.verify(protocol, Mockito.times(1)).export(Mockito.any());"
          },
          "abstractedStatement": {},
          "rawStatementInfo": {
            "41": {
              "code": "Protocol protocol = Mockito.mock(Protocol.class);",
              "line": 41,
              "type": "METHOD_MOCK_CREATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            },
            "54": {
              "code": "Mockito.verify(protocol, Mockito.times(1)).export(Mockito.any());",
              "line": 54,
              "type": "VERIFICATION",
              "locate": "Test Case",
              "abstractedStatement": "",
              "isMockRelated": true,
              "locationContext": {
                "methodName": "test",
                "methodAnnotations": [
                  "Test"
                ]
              }
            }
          }
        }
      ]
    }
  ]
}